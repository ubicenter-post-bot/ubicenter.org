<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="/author/matt/feed.xml" rel="self" type="application/atom+xml" />
  <link href="/" rel="alternate" type="text/html" />
  <updated>2021-06-15T09:53:21+00:00</updated>
  <id>/author/matt/feed.xml</id>

  
  
  

  
    <title type="html">UBI Center | </title>
  

  
    <subtitle>Analyzing universal basic income policies with open-source research</subtitle>
  

  

  
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">Welcome to our new open-source website</title>
      <link href="/new-open-source-website" rel="alternate" type="text/html" title="Welcome to our new open-source website" />
      <published>2021-04-22T00:00:00+00:00</published>
      <updated>2021-04-22T00:00:00+00:00</updated>
      <id>/new-open-source-website</id>
      <content type="html" xml:base="/new-open-source-website">&lt;head&gt;
  &lt;script src=&quot;https://cdn.plot.ly/plotly-latest.min.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;p&gt;The UBI Center’s mission is to produce open-source research that informs a robust policy debate around universal basic income. We emphasize “open-source” because we believe that the public deserves full transparency into research that influences economic policy, and because we know that feedback and contributions improve our work, whether or not it comes from our staff. As our friends at the &lt;a href=&quot;https://pslmodels.org/&quot;&gt;Policy Simulation Library&lt;/a&gt; say, “Open Models == Better Policy.”&lt;/p&gt;

&lt;p&gt;The UBI Center has been dedicated to open-source research since its inception. In our &lt;a href=&quot;https://www.ubicenter.org/distributional-analysis-of-andrew-yangs-freedom-dividend&quot;&gt;first&lt;/a&gt; &lt;a href=&quot;https://www.ubicenter.org/budgetneutral-version-of-andrew-yangs-freedom-dividend&quot;&gt;studies&lt;/a&gt; of Andrew Yang’s Freedom Dividend, we just cited Jupyter &lt;a href=&quot;https://github.com/UBICenter/ubi-center/tree/master/notebooks/yang&quot;&gt;notebooks&lt;/a&gt; stored on GitHub. Later, we moved to the &lt;a href=&quot;https://jupyterbook.org/&quot;&gt;Jupyter Book&lt;/a&gt; platform for our &lt;a href=&quot;https://blog.ubicenter.org&quot;&gt;blog&lt;/a&gt; and &lt;a href=&quot;https://child-allowance.ubicenter.org&quot;&gt;child allowance&lt;/a&gt; website; we published Jupyter notebooks directly as webpages using GitHub Pages and GitHub Actions. We’ve also been developing open-source software with the Policy Simulation Library like &lt;a href=&quot;https://github.com/pslmodels/openfisca-uk&quot;&gt;openfisca-uk&lt;/a&gt;, a microsimulation model of the UK tax and benefit system, and &lt;a href=&quot;https://github.com/pslmodels/microdf&quot;&gt;microdf&lt;/a&gt;, a data analysis package for weighted survey microdata.&lt;/p&gt;

&lt;p&gt;This week, we’re taking the open-source part of our mission to a new level: we’re re-launching &lt;a href=&quot;https://ubicenter.org&quot;&gt;ubicenter.org&lt;/a&gt; as a new website hosted entirely on GitHub. We’ve moved all our posts from &lt;a href=&quot;https://medium.com/ubicenter&quot;&gt;Medium&lt;/a&gt; and &lt;a href=&quot;https://blog.ubicenter.org&quot;&gt;blog.ubicenter.org&lt;/a&gt; (which was hosted with &lt;a href=&quot;https://jupyterbook.org/&quot;&gt;JupyterBook&lt;/a&gt;) to the format you’re seeing here, as well as content from our old Google Sites website. We’re using the &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; blogging platform, the &lt;a href=&quot;https://github.com/jekyller/jasper2&quot;&gt;Jasper2&lt;/a&gt; theme (based on &lt;a href=&quot;https://ghost.org/&quot;&gt;Ghost&lt;/a&gt;’s &lt;a href=&quot;https://github.com/TryGhost/Casper&quot;&gt;Casper&lt;/a&gt; theme), &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, and &lt;a href=&quot;https://github.com/features/actions&quot;&gt;GitHub Actions&lt;/a&gt;, plus a &lt;a href=&quot;github.com/UBICenter/plotly-converter&quot;&gt;utility&lt;/a&gt; we built for turning Jupyter notebooks into Markdown files with interactive graphics. All the code is at &lt;a href=&quot;https://github.com/ubicenter/ubicenter.org&quot;&gt;github.com/ubicenter/ubicenter.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Beyond the advantages of open-source, our new website provides a cleaner look, more immediate access to our new research, a unified view of our projects, and organization by author and topic. For example, you can see all our research on UBI and race at &lt;a href=&quot;https://ubicenter.org/tag/race&quot;&gt;ubicenter.org/tag/race&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2021-04-22-new-open-source-website/race-tag.webp&quot; alt=&quot;Posts with the &amp;quot;race&amp;quot; tag&quot; title=&quot;image_tooltip&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And just like our previous JupyterBook sites like &lt;a href=&quot;https://blog.ubicenter.org/&quot;&gt;blog.ubicenter.org&lt;/a&gt;, we still have interactive visualizations and a toggle to see the Python code that generates them, like this chart from our &lt;a href=&quot;https://www.ubicenter.org/womens-day-2021&quot;&gt;Women’s Day 2021 post&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button1&quot; onclick=&quot;f1()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_1&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
import microdf as mdf
import numpy as np
import pandas as pd
import plotly.express as px
import ubicenter

df = pd.read_csv(
    &quot;https://github.com/MaxGhenis/datarepo/raw/master/pppub20.csv.gz&quot;,
    usecols=[
        &quot;MARSUPWT&quot;,
        &quot;SPM_RESOURCES&quot;,
        &quot;SPM_POVTHRESHOLD&quot;,
        &quot;SPM_WEIGHT&quot;,
        &quot;SPM_NUMPER&quot;,
        &quot;A_SEX&quot;,
        &quot;A_AGE&quot;,
        &quot;SPM_ID&quot;,
        &quot;AGI&quot;,
    ],
)
df.columns = df.columns.str.lower()
df[&quot;weight&quot;] = df.marsupwt / 100
df[&quot;spm_weight&quot;] = df.spm_weight / 100
df[&quot;female&quot;] = df.a_sex == 2
df[&quot;poverty&quot;] = df.spm_resources &amp;lt; df.spm_povthreshold
df[&quot;deep_poverty&quot;] = df.spm_resources &amp;lt; (df.spm_povthreshold / 2)
df[&quot;sex&quot;] = np.where(df.female, &quot;Female&quot;, &quot;Male&quot;)

spm = df.groupby(
    [&quot;spm_id&quot;, &quot;spm_resources&quot;, &quot;spm_weight&quot;, &quot;spm_povthreshold&quot;, &quot;spm_numper&quot;]
)[[&quot;agi&quot;]].sum()
spm[&quot;agi_pos&quot;] = np.maximum(spm.agi, 0)
spm.reset_index(inplace=True)

total_population = df.weight.sum()
total_agi_pos = mdf.weighted_sum(spm, &quot;agi_pos&quot;, &quot;spm_weight&quot;)

# Bin into ages aligning with 18 year old threshold.
DARK_PURPLE = &quot;#46296E&quot;  # Official Intl Womens Day Color.
LIGHT_PURPLE = &quot;#907EA8&quot;  # Lightened version.
DARK_GREY = &quot;#9E9E9E&quot;  # Gray 500 from Material Design.
LIGHT_GREY = &quot;#BDBDBD&quot;  # Gray 400.

COLOR_MAP = {
    &quot;Female&quot;: DARK_PURPLE,
    &quot;Male&quot;: LIGHT_GREY,
    &quot;Female poverty&quot;: DARK_PURPLE,
    &quot;Female deep poverty&quot;: LIGHT_PURPLE,
    &quot;Male poverty&quot;: DARK_GREY,
    &quot;Male deep poverty&quot;: LIGHT_GREY,
    &quot;Poverty&quot;: DARK_PURPLE,
    &quot;Deep poverty&quot;: LIGHT_PURPLE,
}

df[&quot;age_group&quot;] = pd.cut(df.a_age + 1, np.arange(0, 91, 5), labels=np.arange(0, 86, 5))
pov_age = mdf.weighted_mean(
    df, [&quot;poverty&quot;, &quot;deep_poverty&quot;], &quot;marsupwt&quot;, groupby=[&quot;age_group&quot;, &quot;sex&quot;]
)
pov_age = pov_age.round(3)
pov_age.reset_index(inplace=True)
pov_age = pov_age.melt([&quot;age_group&quot;, &quot;sex&quot;], [&quot;poverty&quot;, &quot;deep_poverty&quot;])
pov_age[&quot;label&quot;] = (
    pov_age.sex
    + &quot; &quot;
    + np.where(pov_age.variable == &quot;poverty&quot;, &quot;poverty&quot;, &quot;deep poverty&quot;)
)

fig = px.line(
    pov_age, x=&quot;age_group&quot;, y=&quot;value&quot;, color=&quot;label&quot;, color_discrete_map=COLOR_MAP
)
fig.update_layout(
    title=&quot;Poverty by gender and age&quot;,
    xaxis_title=&quot;Age (in 5-year bins)&quot;,
    yaxis_title=&quot;SPM poverty rate (2019)&quot;,
    legend_title=&quot;&quot;,
    yaxis_tickformat=&quot;%&quot;,
    yaxis_range=[0, pov_age.value.max() * 1.1] #fig.update_xaxes(range=[1.5, 4.5])
)

fig.update_traces(mode=&quot;markers+lines&quot;, hovertemplate=None)

fig = ubicenter.format_fig(fig, show = False)
fig.show()
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f1() {
  var x = document.getElementById(&quot;asset_code_1&quot;);
  var b = document.getElementById(&quot;button1&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset1&quot;).load(&quot;/assets/markdown_assets/womens-day-2021/2020-03-08-womens-day-2021-asset-1.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset1&quot;&gt;&lt;/div&gt;

&lt;p&gt;We have much more to do, as we’ve listed on &lt;a href=&quot;https://github.com/UBICenter/ubicenter.org/issues&quot;&gt;github.com/UBICenter/ubicenter.org/issues&lt;/a&gt;. From completing the &lt;a href=&quot;https://github.com/UBICenter/ubicenter.org/issues/161&quot;&gt;migration&lt;/a&gt; &lt;a href=&quot;https://github.com/UBICenter/ubicenter.org/issues/162&quot;&gt;from JupyterBook&lt;/a&gt; to &lt;a href=&quot;https://github.com/UBICenter/ubicenter.org/issues/3&quot;&gt;adding a search bar&lt;/a&gt; to &lt;a href=&quot;https://github.com/UBICenter/ubicenter.org/issues/149&quot;&gt;embedding our Twitter feed&lt;/a&gt;, we’re prioritizing openness in our future development. If you see something off, or if there’s something you’d like to see, feel free to &lt;a href=&quot;https://github.com/UBICenter/ubicenter.org/issues/new&quot;&gt;submit an issue&lt;/a&gt;. And if you’d like to contribute, check out our open &lt;a href=&quot;https://ubicenter.org/about/join/&quot;&gt;research assistantships and internships&lt;/a&gt;.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>[&quot;matt&quot;, &quot;yuri&quot;]</name>
        
        
      </author>

      

      
        <category term="open source" />
      
        <category term="website" />
      

      
        <summary type="html">Bringing together all our research in one GitHub-served platform.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Our new child allowance project</title>
      <link href="/child-allowance-project" rel="alternate" type="text/html" title="Our new child allowance project" />
      <published>2020-11-25T00:00:00+00:00</published>
      <updated>2020-11-25T00:00:00+00:00</updated>
      <id>/child-allowance-project</id>
      <content type="html" xml:base="/child-allowance-project">&lt;head&gt;
  &lt;script src=&quot;https://cdn.plot.ly/plotly-latest.min.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;p&gt;&lt;em&gt;See the full project at &lt;a href=&quot;https://child-allowance.ubicenter.org&quot;&gt;child-allowance.ubicenter.org&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;1 in 7 children in the United States lives in poverty, &lt;a href=&quot;https://heckmanequation.org/resource/invest-in-early-childhood-development-reduce-deficits-strengthen-the-economy/&quot;&gt;raising&lt;/a&gt; stress and crime rates, &lt;a href=&quot;https://www.sciencedirect.com/science/article/abs/pii/S1876285915003836&quot;&gt;worsening&lt;/a&gt; educational outcomes, and &lt;a href=&quot;https://www.nap.edu/catalog/25246/a-roadmap-to-reducing-child-poverty&quot;&gt;shrinking&lt;/a&gt; the economy by up to $1 trillion annually. Research shows that giving money to families with children, as &lt;a href=&quot;https://www.vox.com/future-perfect/2019/3/6/18249290/child-poverty-american-family-act-sherrod-brown-michael-bennet&quot;&gt;most developed countries do&lt;/a&gt;, reduces each of these issues. A child allowance is a policy that gives families an equal amount for each child.&lt;/p&gt;

&lt;p&gt;This project examines child allowances through various lenses:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;2020-11-25-child-allowance-state-simulation&quot;&gt;&lt;strong&gt;Simulations&lt;/strong&gt;&lt;/a&gt; quantifying the effects of child allowance policies (deficit- and tax-funded) on poverty and inequality across US states.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://child-allowance.ubicenter.org/empirical&quot;&gt;&lt;strong&gt;Research&lt;/strong&gt;&lt;/a&gt; on the effects of child allowances and similar policies on children, based on randomized controlled trials and other empirical techniques.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://child-allowance.ubicenter.org/policies&quot;&gt;&lt;strong&gt;Policy context&lt;/strong&gt;&lt;/a&gt; of existing US child benefits and child allowances in other countries.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, this interactive map is one of several visualizations in our &lt;a href=&quot;2020-11-25-child-allowance-state-simulation&quot;&gt;simulations page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button1&quot; onclick=&quot;f1()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_1&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# TODO: Add tax reforms as a drop-down (mirrored from simulation.ipynb).

# Imports.
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# Load data.
summary = pd.read_csv('https://github.com/ngpsu22/Child_Allowance_States/raw/main/poverty_gini_tax_child_allowance')

# General configs.
LABELS = {'monthly_ca': 'Monthly child allowance',
          'decile': 'Decile',
          'net_chg': 'Net change',
          'pct_chg': 'Net change',
          'child_allowance':'Monthly child allowance',
          'code': 'State',
          'state': 'State',
          'fed_tax_rate': 'Tax rate',
          'state_tax_rate': 'Tax rate',
          'non_funded_poverty_rate': 'Poverty rate',
          'fed_poverty_rate': 'Poverty rate',
          'state_poverty_rate': 'Poverty rate',
          'non_funded_gini': 'Gini index',
          'fed_gini': 'Gini index',
          'state_gini': 'Gini index'}

CONFIG = {'displayModeBar': False}

# Preprocess data.
summary.drop('Unnamed: 0', 1, inplace = True)
state_dict = summary[['code', 'state']].set_index('code').to_dict()['state']

# data labels
FUNDING = {'fed_poverty_rate': 'Federal tax',
           'state_poverty_rate': 'State tax',
           'non_funded_poverty_rate': 'No funding'}

ca_amts = summary.child_allowance.unique()
child_poverty = summary[(summary['age_group'] == 'child') &amp;amp;
                        (summary['race'] == 'All')]

# create figure dictionary
fig_dict = {
    'data': [],
    'layout': {},
    'frames': []
}

# fill in most of layout
fig_dict['layout'] = {
    'plot_bgcolor': 'white',
    'font': dict(family = 'Roboto'),
    'height': 600,
    'margin': dict(t=100, b=0, l=0, r=10)
}
fig_dict['layout']['title'] = {
    'text': ('Child poverty by state and child allowance amount'),
    'y': 0.97,
    'x': 0.05,
    'xanchor': 'left',
    'yanchor': 'top'
}

# add slider specifications
slidermenu =  {
    'buttons': [
        {
            'args': [None, {'frame': {'duration': 500, 'redraw': True},
                            'fromcurrent': True,
                            'transition': {'duration': 300,
                                           'easing': 'quadratic-in-out'}}],
            'label': '&amp;#9654;',
            'method': 'animate'
        },
        {
            &quot;args&quot;: [[None], {&quot;frame&quot;: {&quot;duration&quot;: 0, &quot;redraw&quot;: True},
                              &quot;mode&quot;: &quot;immediate&quot;,
                              &quot;transition&quot;: {&quot;duration&quot;: 0}}],
            &quot;label&quot;: &quot;&amp;#9724;&quot;,
            &quot;method&quot;: &quot;animate&quot;
        }
    ],
    'direction': 'left',
    'pad': {'r': 15, 't': 75},
    'showactive': True,
    'type': 'buttons',
    'x': 0.1,
    'xanchor': 'right',
    'y': 0,
    'yanchor': 'top'
}
    
sliders_dict = {
    'active': 0,
    'yanchor': 'top',
    'xanchor': 'left',
    'currentvalue': {
        'font': {'size': 20},
        'prefix': 'Monthly child allowance: ',
        'visible': True,
        'xanchor': 'right'
    },
    'transition': {'duration': 300, 'easing': 'cubic-in-out'},
    'pad': {'b': 10, 't': 50},
    'len': 0.9,
    'x': 0.1,
    'y': 0,
    'steps': []
}

steps = []
for ca in ca_amts:
    slider_step = {
        'args': [
            [ca],
            {'frame': {'duration': 300, 'redraw': True},
             'mode': 'immediate',
             'transition': {'duration': 300}}
        ],
        'label': '$' + str(ca),
        'method': 'animate'
    }
    steps.append(slider_step)
sliders_dict['steps'] = steps

# generate frames
frames = []
locations = child_poverty.code
zero_poverty = child_poverty[child_poverty.child_allowance == 0]
for ca in ca_amts:
    data_list = []
    ca_data = child_poverty[child_poverty.child_allowance == ca]
    for funding in FUNDING:
        data_list.append({
            'hovertemplate': 
                '&lt;b&gt;%{customdata[1]}&lt;/b&gt;' + 
                '&lt;br /&gt;Child poverty rate: %{z}%&lt;br /&gt;' + 
                'Poverty reduction: %{customdata[0]}%' +
                '&lt;extra&gt;&lt;/extra&gt;',
            'locationmode': 'USA-states',
            'locations': child_poverty.code.unique(),
            'z': ca_data[funding].tolist(),
            'type': 'choropleth',
            'customdata': list(map(lambda x, y, z: (round(100 * (1 - y / x)), state_dict[z]),
                                   zero_poverty[funding], ca_data[funding], state_dict))
        })
    
    frame = {'data': data_list, 'name': str(ca), 'traces': [0,1,2]}
    frames.append(frame)
    
# add frames to figure dictionary
fig_dict['frames'] = frames

# add traces to figure dictionary
for i in (range(len(FUNDING))):
    fig_dict['data'].append(frames[0]['data'][0])

# generate figure
fig = go.Figure(fig_dict)

# generate dropdown menu buttons
buttons = []
for funding in FUNDING:
    new_button = {'method': 'update',
                  'label': FUNDING[funding],
                  'args': [{'visible': [f == funding for f in FUNDING.keys()]}
                          ]}
    buttons.append(new_button)
    
# construct button menu
updatemenu = {'buttons': buttons,
              'direction': 'down',
              'showactive': True,
              'pad':{&quot;r&quot;: 10, 't': 20, 'l': 50},
              'xanchor': 'left',
              'yanchor': 'top',
              'x': 0,
              'y': 1.2
             }

# add slider, dropdown menu, and set geo scope
fig.update_layout(
    geo_scope='usa', # limite map scope to USA
    sliders=[sliders_dict],
    updatemenus=[slidermenu, updatemenu]
)

# update visual attributes
fig.update_traces(showscale=False, colorscale='Reds', zmin=0, zmax=22)
fig.update_layout(
    hoverlabel=dict(
        bgcolor=&quot;white&quot;,
        font=dict(family='Roboto')
    ),
    title_font_size=20,
)
fig.update(layout_showlegend=False)

fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f1() {
  var x = document.getElementById(&quot;asset_code_1&quot;);
  var b = document.getElementById(&quot;button1&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset1&quot;).load(&quot;/assets/markdown_assets/index/2020-11-25-index-asset-1.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset1&quot;&gt;&lt;/div&gt;

&lt;p&gt;We also review the evidence around child allowances from the United States and Canada, and a special deep dive into research from sub-Saharan Africa, where randomized cash transfer rollouts produce particularly high-quality estimates. For example, cash transfer programs consistently reduced consumption poverty (below). See the &lt;a href=&quot;https://child-allowance.ubicenter.org/empirical&quot;&gt;&lt;strong&gt;full paper&lt;/strong&gt;&lt;/a&gt; for evidence across other outcomes like education and health.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button2&quot; onclick=&quot;f2()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_2&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
pov = pd.DataFrame({
    &quot;effect_pp&quot;: [-2.1, -3.9, 3.8, -14.9, -8.3, -4.1, -0.5],
    &quot;baseline_pp&quot;: [93, 88, 68, 82, 44, 94, 92],
    &quot;stars&quot;: [2, 0, 0, 3, 1, 2, 0]
}, index=['Ghana LEAP', 'Kenya HSNP', 'Lesotho CGP', 'Malawi SCTP',
          'Uganda SAGE', 'Zambia CGP', 'Zimbabwe HSCT']
)
pov['pct_effect'] = 100 * pov.effect_pp / pov.baseline_pp
pov['significance'] = pov.stars.map({0: '&amp;gt;10%',
                                     1: '5-10%',
                                     2: '1-5%',
                                     3: '&amp;lt;1%'})
# Sort by stars for proper legend ordering.
pov.sort_values('stars', ascending=False, inplace=True)

DARK_BLUE = '#0D47A1'
BLUE = '#2196F3'
BARELY_BLUE = '#BBDEFB'
GRAY = '#E0E0E0'

fig = px.bar(pov, 'pct_effect', color='significance',
             labels={'pct_effect': 'Poverty change',
                     'index': 'Program',
                     'significance': 'Significance'},
             title='Poverty reductions across cash transfer RCTs in SSA',
             color_discrete_map={'&amp;gt;10%': GRAY,
                                 '5-10%': BARELY_BLUE,
                                 '1-5%': BLUE,
                                 '&amp;lt;1%': DARK_BLUE},
)

fig.update_layout(font=dict(family='Roboto'),
                  plot_bgcolor='white',
                  yaxis_title='Cash transfer program',
                  legend_title='Statistical significance',
                  xaxis_title='Percent change in poverty headcount rate',
                  xaxis_ticksuffix='%',
                  # Sort by effect size
                  # (since data is sorted by stars for legend order)
                  yaxis={'categoryorder':'total descending'},
                  title_font_size=20,
                 )

fig.show(config={'displayModeBar': False})
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f2() {
  var x = document.getElementById(&quot;asset_code_2&quot;);
  var b = document.getElementById(&quot;button2&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset2&quot;).load(&quot;/assets/markdown_assets/index/2020-11-25-index-asset-2.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset2&quot;&gt;&lt;/div&gt;

&lt;p&gt;Finally, we consider the political state of child allowances, such as the &lt;a href=&quot;https://www.bennet.senate.gov/public/index.cfm/american-family-act&quot;&gt;American Family Act&lt;/a&gt;, which would ensure all low-income children in the US receive the full benefits of the Child Tax Credit, and how such a policy would align US child benefits with those from other developed countries.&lt;/p&gt;

&lt;p&gt;By efficiently reducing child poverty, child allowances provide kids with basic needs, improve access to opportunity, and invest in our future.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>[&quot;nate&quot;, &quot;john&quot;, &quot;matt&quot;, &quot;max&quot;]</name>
        
        
      </author>

      

      
        <category term="us" />
      
        <category term="child allowance" />
      

      
        <summary type="html">We're examining universal payments to parents across multiple angles.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">The effect of child allowances across US states</title>
      <link href="/child-allowance-state-simulation" rel="alternate" type="text/html" title="The effect of child allowances across US states" />
      <published>2020-11-25T00:00:00+00:00</published>
      <updated>2020-11-25T00:00:00+00:00</updated>
      <id>/child-allowance-state-simulation</id>
      <content type="html" xml:base="/child-allowance-state-simulation">&lt;head&gt;
  &lt;script src=&quot;https://cdn.plot.ly/plotly-latest.min.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;p&gt;Poverty has a lasting impact on children.  Growing up in poverty increases &lt;a href=&quot;https://heckmanequation.org/resource/invest-in-early-childhood-development-reduce-deficits-strengthen-the-economy/&quot;&gt;stress&lt;/a&gt; and &lt;a href=&quot;https://heckmanequation.org/resource/invest-in-early-childhood-development-reduce-deficits-strengthen-the-economy/&quot;&gt;incarceration rates&lt;/a&gt; and decreases &lt;a href=&quot;https://www.sciencedirect.com/science/article/abs/pii/S1876285915003836&quot;&gt;educational&lt;/a&gt; and &lt;a href=&quot;https://www.aeaweb.org/articles?id=10.1257/app.2.1.86&quot;&gt;health&lt;/a&gt; outcomes.  These negative consequences not only impact the nation’s poor, but the entire economy as well–child poverty shrinks GDP by more than &lt;a href=&quot;https://www.nap.edu/read/25246/chapter/1&quot;&gt;$1 trillion annually&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Research has shown that giving money to families with children, as most developed countries do, can reduce each of these issues.  Programs that provide cash to families with children are called a &lt;em&gt;child allowance&lt;/em&gt;, and are typically paid out on a monthly basis.&lt;/p&gt;

&lt;p&gt;Here you can explore the impact of a potential child allowance of various amounts in each state.
We show impacts across three funding mechanisms:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Federal tax&lt;/strong&gt; as a flat rate on taxable income. For each child allowance amount the total cost is calculated by multiplying the annual child allowance by the total number of children.  To calculate the revenue neutral tax rate, the total cost is divided by the nation’s total taxable income.  For example, a child allowance of $100 per month would cost about $88 billion annually and require a new flat tax of 1.1 percent.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;State tax&lt;/strong&gt; as a flat rate on taxable income. The state tax is calculated in the same manner as the federal tax, but at the state level. This shows how states can fund their own child allowances. Because states vary in child population and income, different states have different tax rates. A $100 monthly child allowance in DC is offset by a 0.5 percent tax on taxable income while the same amount requires a 1.3 percent tax in Alabama.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;No funding&lt;/strong&gt; does not impose any new taxes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These static analyses (they do not consider labor supply effects) are based on data from the Current Population Survey March Supplement representing income from 2017 to 2019, and preserve existing benefits such as the Child Tax Credit.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button1&quot; onclick=&quot;f1()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_1&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# Imports.
import pandas as pd
import numpy as np
import math
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import copy

# Load data.
summary = pd.read_csv('https://github.com/ngpsu22/Child_Allowance_States/raw/main/poverty_gini_tax_child_allowance')

deciles = pd.read_csv('data/deciles.csv')

deciles.funding = deciles.funding.map({'deficit': 'No funding',
                                       'fed': 'Federal tax',
                                       'state': 'State tax'})

# General configs.
LABELS = {'monthly_ca': 'Monthly child allowance',
          'decile': 'Decile',
          'net_chg': 'Net change',
          'pct_chg': 'Net change',
          'child_allowance':'Monthly child allowance',
          'code': 'State',
          'state': 'State',
          'fed_tax_rate': 'Tax rate',
          'state_tax_rate': 'Tax rate',
          'non_funded_poverty_rate': 'Poverty rate',
          'fed_poverty_rate': 'Poverty rate',
          'state_poverty_rate': 'Poverty rate',
          'non_funded_gini': 'Gini index',
          'fed_gini': 'Gini index',
          'state_gini': 'Gini index'}

CONFIG = {'displayModeBar': False}

# Preprocess data.
summary.drop('Unnamed: 0', 1, inplace = True)
tax = summary[(summary.race == 'All') &amp;amp; (summary.age_group == 'all')]

state_names = tax.state.unique()
state_names = np.insert(state_names[:-1], 0, 'US')
default_state = 'US'
state_dict = summary[['code', 'state']].set_index('code').to_dict()['state']

# Colors from https://material.io/design/color/the-color-system.html
DARK_BLUE = '#1565C0'
LIGHT_BLUE = '#42A5F5'
GRAY = '#BDBDBD'
GRAY_SHADOW = '#EEEEEE'
COLOR_MAP = {
    'Federal tax rate': DARK_BLUE,
    'State tax rate': LIGHT_BLUE,
    'Federal tax': DARK_BLUE,
    'State tax': LIGHT_BLUE,
    'No funding': GRAY,
    'No funding, out of poverty': GRAY_SHADOW
}

# data labels
REFORM = {'state_tax_rate': 'State tax rate', 
          'fed_tax_rate': 'Federal tax rate'}

# reformat data
data_list = []
for state in state_names:
    state_data = tax[tax.state == state]
    state_list = []
    for reform in REFORM:
        state_list.append(state_data[reform])
    data_list.append(state_list)

# generate first graph
data_columns = list(REFORM.keys())
data = pd.DataFrame(data_list, columns = data_columns)
data['State'] = state_names
data = data.set_index('State')

def getDataList(state):
    data_list = []
    for dc in data_columns:
        data_list.append(data.loc[state][dc])
    return data_list

# initialize figure
fig = go.Figure()

# add traces
x = tax.child_allowance.unique()
for reform in REFORM:
    fig.add_trace(go.Scatter(
        x=x, 
        y=data[reform][default_state],
        name=REFORM[reform],
        marker = dict(color = COLOR_MAP[REFORM[reform]]),
        hoverlabel = dict(namelength = -1)
#         hovertemplate=
#                 REFORM[reform] + ': %{y}' + 
#                 '&lt;extra&gt;&lt;/extra&gt;',
    ))

# generate buttons
buttons = []
for state in state_names:
    new_button = {'method': 'update',
                  'label': state,
                  'args': [{'y': getDataList(state), 
                            'visible': ['legendonly' if state == 'US' 
                                        else True, True]}
                          ]}
    buttons.append(new_button)
    
# construct menus
updatemenus = [{'buttons': buttons,
                'direction': 'down',
                'showactive': True,
                'pad':{'l': 10, 'r': 25},
               }]

# update layout with buttons, and show the figure
fig.update_layout(updatemenus=updatemenus)

fig.update_xaxes(title_text='Monthly child allowance')

tax_values = tax.state_tax_rate.tolist() + tax.fed_tax_rate.tolist() 
ymin = math.floor(min(tax_values) * 100) / 100 - 0.1
ymax = math.ceil(max(tax_values) * 100) / 100
fig.update_yaxes(title_text='Tax rate on taxable income', range=[ymin, ymax])

fig.update_layout(height=600, 
                  margin=dict(l=0, r=0, t=80, b=0),
                  yaxis_ticksuffix='%',
                  font=dict(family='Roboto'),
                  hovermode='x', 
                  xaxis_tickprefix='$',
                  xaxis_ticksuffix='',
                  plot_bgcolor='white',
                  legend_title_text='',
                  title={
                    'text': 'Income tax required to fund child allowances',
                    'y':0.95,
                    'x':0.01,
                    'xanchor': 'left',
                    'yanchor': 'top'},
                  title_font_size=20,
                 )

fig.update_layout(hovermode=&quot;x unified&quot;)

# hide state tax rate for US only
hide_line = ['State tax rate']
fig.for_each_trace(lambda trace: trace.update(visible=&quot;legendonly&quot;)
                   if trace.name in hide_line else ())

fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f1() {
  var x = document.getElementById(&quot;asset_code_1&quot;);
  var b = document.getElementById(&quot;button1&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset1&quot;).load(&quot;/assets/markdown_assets/simulation/2020-11-25-simulation-asset-1.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset1&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;distributional-effects&quot;&gt;Distributional effects&lt;/h2&gt;

&lt;p&gt;While the new tax would hit most Americans, save the very poorest who earn less than the standard deduction, the overall distributional consequences would be positive.
For instance, the bottom decile would see their average annual resources rise by about $3,700 per person with a federal $300 per month child allowance, while the top 10 percent would see their average resources per person fall by about double, $6,400.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button2&quot; onclick=&quot;f2()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_2&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# make chart symmetric with boundary at the maximum.
boundary = deciles.net_chg.agg([min, max]).abs().max()

# initial data set-up 
x = deciles.decile.unique()
ca_amts = deciles.monthly_ca.unique()
state_names = deciles.state.unique()
state_names = np.insert(state_names[:-1], 0, 'US')
fundings = ['Federal tax', 'State tax', 'No funding']

# get list of bar colors
colors = [COLOR_MAP[i] for i in fundings]

# create figure dictionary
fig_dict = {
    'data': [],
    'layout': {},
    'frames': []
}

# fill in most of layout
fig_dict['layout'] = {
    'plot_bgcolor': 'white',
    'font': dict(family = 'Roboto'),
    'showlegend': True,
    'height': 600,
    'margin': dict(t=100, b=0, l=0, r=0)
}
fig_dict['layout']['title'] = {
    'text': 'Average net change to household income by decile', 
    'y': 0.97,
    'x': 0.05,
    'xanchor': 'left',
    'yanchor': 'top'
}
fig_dict['layout']['xaxis'] = {
    'title': 'Decile of resources per person', 
    'dtick': 1,
    'type': 'category'
}
fig_dict['layout']['yaxis'] = {
    'title': 'Average annual net change per SPM unit', 
    'tickprefix': '$',
    'range': [-boundary, boundary]
}

# add slider specifications
slider_menu =  {
    'buttons': [
        {
            'args': [None, {'frame': {'duration': 500, 'redraw': True},
                            'fromcurrent': True,
                            'transition': {'duration': 300,
                                           'easing': 'quadratic-in-out'}}],
            'label': '&amp;#9654;',
            'method': 'animate'
        },
        {
            &quot;args&quot;: [[None], {&quot;frame&quot;: {&quot;duration&quot;: 0, &quot;redraw&quot;: True},
                              &quot;mode&quot;: &quot;immediate&quot;,
                              &quot;transition&quot;: {&quot;duration&quot;: 0}}],
            &quot;label&quot;: &quot;&amp;#9724;&quot;,
            &quot;method&quot;: &quot;animate&quot;
        }
    ],
    'direction': 'left',
    'pad': {'r': 15, 't': 75},
    'showactive': False,
    'type': 'buttons',
    'x': 0.1,
    'xanchor': 'right',
    'y': 0,
    'yanchor': 'top'
}

sliders_dict = {
    'active': 20,
    'yanchor': 'top',
    'xanchor': 'left',
    'currentvalue': {
        'font': {'size': 20},
        'prefix': 'Monthly child allowance: ',
        'visible': True,
        'xanchor': 'right'
    },
    'transition': {'duration': 300, 'easing': 'cubic-in-out'},
    'pad': {'b': 10, 't': 50},
    'len': 0.9,
    'x': 0.1,
    'y': 0,
    'steps': []
}

steps = []
for ca in ca_amts:
    slider_step = {
        'args': [
            [ca],
            {'frame': {'duration': 300, 'redraw': True},
             'mode': 'immediate',
             'transition': {'duration': 300}}
        ],
        'label': '$' + str(ca),
        'method': 'animate'
    }
    steps.append(slider_step)
sliders_dict['steps'] = steps

# create frames for a given state and funding method
def make_frames(state, funding):
    raw_data = deciles[(deciles.state == state) &amp;amp;
                       (deciles.funding == funding)].round()
    frames = {}
    for ca in ca_amts:
        frames[str(ca)] = list(raw_data[raw_data.monthly_ca == ca].net_chg)
    return frames

# create dataframe of booleans to determine trace visibility
# separating funding mechanisms is currently redundant but can 
#    in theory be used to add another dropdown menu
n = len(state_names) * len(fundings)
frames_list = []
count = 0
visible = []
for state in state_names:
    vis_list = []
    for funding in fundings:
        frames_list.append(make_frames(state, funding))
        v = np.array([False] * n)
        v[count] = True
        vis_list.append(v)
        count += 1
    visible.append(vis_list)
visible = pd.DataFrame(visible, columns = fundings, index = state_names)

# add traces to figure dictionary
for i in range(n):
    data_dict = {
        'x': x,
        'y': frames_list[i]['500'],
        'type': 'bar',
        # Only show the Federal tax line (index 0) when first loading chart.
        'visible': True if i == 0 else ('legendonly' if i &amp;lt; 3 else False),
        'name': fundings[i % 3],
        'marker_color':  colors[i % 3],
        'hovertemplate': 
                '&lt;b&gt;' + fundings[i % 3] + '&lt;/b&gt;' + 
                '&lt;br /&gt;Change in resources: %{y}&lt;br /&gt;' + 
                '&lt;extra&gt;&lt;/extra&gt;'
    }
    fig_dict['data'].append(data_dict)

# reorder existing frames
frames = []
for ca in ca_amts:
    data_list = []
    for f in frames_list:
        data_list.append({'y': f[str(ca)], 'type': 'bar'})
    frame = {'data': data_list, 'name': str(ca), 'traces': list(range(n))}
    frames.append(frame)

# add additional features to figure dictionary
fig_dict['frames'] = frames
fig_dict['layout']['sliders'] = [sliders_dict]

# generate plotly figure
fig = go.Figure(fig_dict)

# generate dropdown menu buttons
buttons = []
for state in state_names:
    new_button = {'method': 'update',
                  'label': state,
                  'args': [{'visible': (visible[fundings[0]][state] | 
                                        visible[fundings[1]][state] |
                                        visible[fundings[2]][state])}
                          ]}
    buttons.append(new_button)
    
# construct button menu
updatemenus = {'buttons': buttons,
               'direction': 'down',
               'showactive': True,
               'pad':{&quot;r&quot;: 10, 't': 20},
               'xanchor': 'left',
               'yanchor': 'top',
               'x': 0,
               'y': 1.2
               }

# add slider and button menus
fig.update_layout(updatemenus=[slider_menu, updatemenus],
                  title_font_size=20,)

# display figure
fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f2() {
  var x = document.getElementById(&quot;asset_code_2&quot;);
  var b = document.getElementById(&quot;button2&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset2&quot;).load(&quot;/assets/markdown_assets/simulation/2020-11-25-simulation-asset-2.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset2&quot;&gt;&lt;/div&gt;

&lt;p&gt;This $300-per-month child allowance would raise the bottom decile’s income by 33 percent, while lowering the top decile’s income by 4 percent.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button3&quot; onclick=&quot;f3()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_3&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# make chart symmetric with boundary at the maximum.
boundary = deciles.pct_chg.agg([min, max]).abs().max()

# initial data set-up 
x = deciles.decile.unique()
ca_amts = deciles.monthly_ca.unique()
state_names = deciles.state.unique()
state_names = np.insert(state_names[:-1], 0, 'US')
fundings = ['Federal tax', 'State tax', 'No funding']

# get list of bar colors
colors = [COLOR_MAP[i] for i in fundings]

# create figure dictionary
fig_dict = {
    'data': [],
    'layout': {},
    'frames': []
}

# fill in most of layout
fig_dict['layout'] = {
    'plot_bgcolor': 'white',
    'font': dict(family = 'Roboto'),
    'showlegend': True,
    'height': 600,
    'margin': dict(t=100, b=0, l=0, r=0)
}
fig_dict['layout']['title'] = {
    'text': 'Average percent change to household income by decile', 
    'y': 0.97,
    'x': 0.05,
    'xanchor': 'left',
    'yanchor': 'top'
}
fig_dict['layout']['xaxis'] = {
    'title': 'Decile of resources per person', 
    'dtick': 1,
    'type': 'category'
}
fig_dict['layout']['yaxis'] = {
    'title': 'Average percent change to SPM unit resources', 
    'ticksuffix': '%',
    'range': [-boundary, boundary]
}

# add slider specifications
slider_menu =  {
    'buttons': [
        {
            'args': [None, {'frame': {'duration': 500, 'redraw': True},
                            'fromcurrent': True,
                            'transition': {'duration': 300,
                                           'easing': 'quadratic-in-out'}}],
            'label': '&amp;#9654;',
            'method': 'animate'
        },
        {
            &quot;args&quot;: [[None], {&quot;frame&quot;: {&quot;duration&quot;: 0, &quot;redraw&quot;: True},
                              &quot;mode&quot;: &quot;immediate&quot;,
                              &quot;transition&quot;: {&quot;duration&quot;: 0}}],
            &quot;label&quot;: &quot;&amp;#9724;&quot;,
            &quot;method&quot;: &quot;animate&quot;
        }
    ],
    'direction': 'left',
    'pad': {'r': 15, 't': 75},
    'showactive': False,
    'type': 'buttons',
    'x': 0.1,
    'xanchor': 'right',
    'y': 0,
    'yanchor': 'top'
}

sliders_dict = {
    'active': 20,
    'yanchor': 'top',
    'xanchor': 'left',
    'currentvalue': {
        'font': {'size': 20},
        'prefix': 'Monthly child allowance: ',
        'visible': True,
        'xanchor': 'right'
    },
    'transition': {'duration': 300, 'easing': 'cubic-in-out'},
    'pad': {'b': 10, 't': 50},
    'len': 0.9,
    'x': 0.1,
    'y': 0,
    'steps': []
}

steps = []
for ca in ca_amts:
    slider_step = {
        'args': [
            [ca],
            {'frame': {'duration': 300, 'redraw': True},
             'mode': 'immediate',
             'transition': {'duration': 300}}
        ],
        'label': '$' + str(ca),
        'method': 'animate'
    }
    steps.append(slider_step)
sliders_dict['steps'] = steps

# create frames for a given state and funding method
def make_frames(state, funding):
    raw_data = deciles[(deciles.state == state) &amp;amp;
                       (deciles.funding == funding)].round()
    frames = {}
    for ca in ca_amts:
        frames[str(ca)] = list(raw_data[raw_data.monthly_ca == ca].pct_chg)
    return frames

# create dataframe of booleans to determine trace visibility
# separating funding mechanisms is currently redundant but can 
#    in theory be used to add another dropdown menu
n = len(state_names) * len(fundings)
frames_list = []
count = 0
visible = []
for state in state_names:
    vis_list = []
    for funding in fundings:
        frames_list.append(make_frames(state, funding))
        v = np.array([False] * n)
        v[count] = True
        vis_list.append(v)
        count += 1
    visible.append(vis_list)
visible = pd.DataFrame(visible, columns = fundings, index = state_names)

# add traces to figure dictionary
for i in range(n):
    data_dict = {
        'x': x,
        'y': frames_list[i]['500'],
        'type': 'bar',
        # Only show the Federal tax line (index 0) when first loading chart.
        'visible': True if i == 0 else ('legendonly' if i &amp;lt; 3 else False),
        'name': fundings[i % 3],
        'marker_color':  colors[i % 3],
        'hovertemplate': 
                '&lt;b&gt;' + fundings[i % 3] + '&lt;/b&gt;' + 
                '&lt;br /&gt;Change in resources: %{y}&lt;br /&gt;' + 
                '&lt;extra&gt;&lt;/extra&gt;'
    }
    fig_dict['data'].append(data_dict)

# reorder existing frames
frames = []
for ca in ca_amts:
    data_list = []
    for f in frames_list:
        data_list.append({'y': f[str(ca)], 'type': 'bar'})
    frame = {'data': data_list, 'name': str(ca), 'traces': list(range(n))}
    frames.append(frame)

# add additional features to figure dictionary
fig_dict['frames'] = frames
fig_dict['layout']['sliders'] = [sliders_dict]

# generate plotly figure
fig = go.Figure(fig_dict)

# generate dropdown menu buttons
buttons = []
for state in state_names:
    new_button = {'method': 'update',
                  'label': state,
                  'args': [{'visible': (visible[fundings[0]][state] | 
                                        visible[fundings[1]][state] |
                                        visible[fundings[2]][state])}
                          ]}
    buttons.append(new_button)
    
# construct button menu
updatemenus = {'buttons': buttons,
               'direction': 'down',
               'showactive': True,
               'pad':{&quot;r&quot;: 10, 't': 20},
               'xanchor': 'left',
               'yanchor': 'top',
               'x': 0,
               'y': 1.2
               }

# add slider and button menus
fig.update_layout(updatemenus=[slider_menu, updatemenus],
                  title_font_size=20,)

# display figure
fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f3() {
  var x = document.getElementById(&quot;asset_code_3&quot;);
  var b = document.getElementById(&quot;button3&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset3&quot;).load(&quot;/assets/markdown_assets/simulation/2020-11-25-simulation-asset-3.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset3&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;inequality&quot;&gt;Inequality&lt;/h2&gt;

&lt;p&gt;The progressive benefits by decile demonstrate that child allowances would reduce inequality.
Measures of inequality can formalize this result.
For example, the Gini index lies between 0 and 1, with 0 indicating that everyone has the exact same income, and 1 indicating that one person possesses all the income.&lt;/p&gt;

&lt;p&gt;Across funding strategies, child allowances reduce inequality as measured by the Gini index, with larger child allowances producing larger inequality reductions.
Nationally, a $500 monthly child allowance shrinks the Gini index nine percent, from 0.446 to 0.406.
While states vary in their levels of current inequality, a $200 monthly child allowance cuts the measure of inequality consistently between 4 and 5 percent across them.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button4&quot; onclick=&quot;f4()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_4&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# data labels
GINI = {'fed_gini': 'Federal tax',
        'state_gini': 'State tax',
        'non_funded_gini': 'No funding'}

# reformat data
data_list = []
for state in state_names:
    state_data = tax[tax.state == state]
    state_list = []
    for gini in GINI:
        state_list.append(state_data[gini])
    data_list.append(state_list)

data_columns = list(GINI.keys())
data = pd.DataFrame(data_list, columns = data_columns)
data['State'] = state_names
data = data.set_index('State')

def getDataList(state):
    data_list = []
    for dc in data_columns:
        data_list.append(data.loc[state][dc])
    return data_list

# initialize figure
fig = go.Figure()

# add traces
x = tax.child_allowance.unique()
for gini in GINI:
    fig.add_trace(go.Scatter(
        x=x, 
        y=tax[tax.state == default_state][gini],
        name=GINI[gini],
        marker = dict(color = COLOR_MAP[GINI[gini]]),
#         hovertemplate=
#                 GINI[gini] + ': %{y}' + 
#                 '&lt;extra&gt;&lt;/extra&gt;'
    ))

# generate buttons
buttons = []
for state in state_names:
    new_button = {'method': 'update',
                  'label': state,
                  'args': [{'y': getDataList(state),
                           'visible': [True,
                                       'legendonly' if state == 'US' else True,
                                       True]},
                          ]}
    buttons.append(new_button)
    
# construct menus
updatemenus = [{'buttons': buttons,
                'direction': 'down',
                'showactive': True,
                'pad':{'l': 10, 'r': 25},
               }]

# update layout with buttons, and show the figure
fig.update_layout(updatemenus=updatemenus)

fig.update_xaxes(title_text='Monthly child allowance')

gini_values = tax.non_funded_gini.tolist() + tax.fed_gini.tolist() + tax.state_gini.tolist()
ymin = math.floor(min(gini_values) * 100) / 100
ymax = math.ceil(max(gini_values) * 100) / 100
fig.update_yaxes(title_text='Gini index of per-capita income, 2017-2019',
                 range=[ymin, ymax])

fig.update_layout(height=600, 
                  margin=dict(l=0, r=0, t=80, b=0),
                  font=dict(family='Roboto'),
                  hovermode='x', 
                  xaxis_tickprefix='$',
                  xaxis_ticksuffix='',
                  plot_bgcolor='white',
                  legend_title_text='',
                  title={
                    'text': 'Income inequality by child allowance amount',
                    'y':0.95,
                    'x':0.01,
                    'xanchor': 'left',
                    'yanchor': 'top'},
                  title_font_size=20,
                 )

fig.update_layout(hovermode=&quot;x unified&quot;)

# hide state tax rate for US only
hide_line = ['State tax']
fig.for_each_trace(lambda trace: trace.update(visible=&quot;legendonly&quot;)
                   if trace.name in hide_line else ())

fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f4() {
  var x = document.getElementById(&quot;asset_code_4&quot;);
  var b = document.getElementById(&quot;button4&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset4&quot;).load(&quot;/assets/markdown_assets/simulation/2020-11-25-simulation-asset-4.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset4&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;poverty&quot;&gt;Poverty&lt;/h2&gt;
&lt;p&gt;A child allowance can also substantially cut poverty.  In this example, a person is said to be in poverty if their household’s total post tax and transfer income is less than their poverty threshold.
Poverty thresholds are determined by the Census Bureau’s Supplemental Poverty Measure (SPM), which considers a medley of factors including household size, housing status, and local housing costs.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button5&quot; onclick=&quot;f5()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_5&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# data labels
FUNDING = {'fed_poverty_rate': 'Federal tax',
           'state_poverty_rate': 'State tax',
           'non_funded_poverty_rate': 'No funding'}

ca_amts = summary.child_allowance.unique()
child_poverty = summary[(summary['age_group'] == 'child') &amp;amp;
                        (summary['race'] == 'All')]

# create figure dictionary
fig_dict = {
    'data': [],
    'layout': {},
    'frames': []
}

# fill in most of layout
fig_dict['layout'] = {
    'plot_bgcolor': 'white',
    'font': dict(family = 'Roboto'),
    'height': 600,
    'margin': dict(t=100, b=0, l=0, r=10)
}
fig_dict['layout']['title'] = {
    'text': ('Child poverty by state and child allowance amount'),
    'y': 0.97,
    'x': 0.05,
    'xanchor': 'left',
    'yanchor': 'top'
}

# add slider specifications
slidermenu =  {
    'buttons': [
        {
            'args': [None, {'frame': {'duration': 500, 'redraw': True},
                            'fromcurrent': True,
                            'transition': {'duration': 300,
                                           'easing': 'quadratic-in-out'}}],
            'label': '&amp;#9654;',
            'method': 'animate'
        },
        {
            &quot;args&quot;: [[None], {&quot;frame&quot;: {&quot;duration&quot;: 0, &quot;redraw&quot;: True},
                              &quot;mode&quot;: &quot;immediate&quot;,
                              &quot;transition&quot;: {&quot;duration&quot;: 0}}],
            &quot;label&quot;: &quot;&amp;#9724;&quot;,
            &quot;method&quot;: &quot;animate&quot;
        }
    ],
    'direction': 'left',
    'pad': {'r': 15, 't': 75},
    'showactive': True,
    'type': 'buttons',
    'x': 0.1,
    'xanchor': 'right',
    'y': 0,
    'yanchor': 'top'
}
    
sliders_dict = {
    'active': 0,
    'yanchor': 'top',
    'xanchor': 'left',
    'currentvalue': {
        'font': {'size': 20},
        'prefix': 'Monthly child allowance: ',
        'visible': True,
        'xanchor': 'right'
    },
    'transition': {'duration': 300, 'easing': 'cubic-in-out'},
    'pad': {'b': 10, 't': 50},
    'len': 0.9,
    'x': 0.1,
    'y': 0,
    'steps': []
}

steps = []
for ca in ca_amts:
    slider_step = {
        'args': [
            [ca],
            {'frame': {'duration': 300, 'redraw': True},
             'mode': 'immediate',
             'transition': {'duration': 300}}
        ],
        'label': '$' + str(ca),
        'method': 'animate'
    }
    steps.append(slider_step)
sliders_dict['steps'] = steps

# generate frames
frames = []
locations = child_poverty.code
zero_poverty = child_poverty[child_poverty.child_allowance == 0]
for ca in ca_amts:
    data_list = []
    ca_data = child_poverty[child_poverty.child_allowance == ca]
    for funding in FUNDING:
        data_list.append({
            'hovertemplate': 
                '&lt;b&gt;%{customdata[1]}&lt;/b&gt;' + 
                '&lt;br /&gt;Child poverty rate: %{z}%&lt;br /&gt;' + 
                'Poverty reduction: %{customdata[0]}%' +
                '&lt;extra&gt;&lt;/extra&gt;',
            'locationmode': 'USA-states',
            'locations': child_poverty.code.unique(),
            'z': ca_data[funding].tolist(),
            'type': 'choropleth',
            'customdata': list(map(lambda x, y, z: (round(100 * (1 - y / x)), state_dict[z]),
                                   zero_poverty[funding], ca_data[funding], state_dict))
        })
    
    frame = {'data': data_list, 'name': str(ca), 'traces': [0,1,2]}
    frames.append(frame)
    
# add frames to figure dictionary
fig_dict['frames'] = frames

# add traces to figure dictionary
for i in (range(len(FUNDING))):
    fig_dict['data'].append(frames[0]['data'][0])

# generate figure
fig = go.Figure(fig_dict)

# generate dropdown menu buttons
buttons = []
for funding in FUNDING:
    new_button = {'method': 'update',
                  'label': FUNDING[funding],
                  'args': [{'visible': [f == funding for f in FUNDING.keys()]}
                          ]}
    buttons.append(new_button)
    
# construct button menu
updatemenu = {'buttons': buttons,
              'direction': 'down',
              'showactive': True,
              'pad':{&quot;r&quot;: 10, 't': 20, 'l': 50},
              'xanchor': 'left',
              'yanchor': 'top',
              'x': 0,
              'y': 1.2
             }

# add slider, dropdown menu, and set geo scope
fig.update_layout(
    geo_scope='usa', # limite map scope to USA
    sliders=[sliders_dict],
    updatemenus=[slidermenu, updatemenu]
)

# update visual attributes
fig.update_traces(showscale=False, colorscale='Reds', zmin=0, zmax=22)
fig.update_layout(
    hoverlabel=dict(
        bgcolor=&quot;white&quot;,
        font=dict(family='Roboto')
    ),
    title_font_size=20,
)
fig.update(layout_showlegend=False)

fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f5() {
  var x = document.getElementById(&quot;asset_code_5&quot;);
  var b = document.getElementById(&quot;button5&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset5&quot;).load(&quot;/assets/markdown_assets/simulation/2020-11-25-simulation-asset-5.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset5&quot;&gt;&lt;/div&gt;

&lt;p&gt;A child allowance of $300 per month, funded by a federal income tax, would cut US child poverty by 52 percent, and also cut adult poverty by 13 percent.
Overall poverty would fall 22 percent.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button6&quot; onclick=&quot;f6()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_6&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
FUNDING = {'fed_poverty_rate': 'Federal tax',
           'state_poverty_rate': 'State tax',
           'non_funded_poverty_rate': 'No funding'}

# initial data set-up
age = summary[summary['race'] == 'All'].copy(deep=True)
age.age_group = age.age_group.str.capitalize()
x = ['Child', 'Adult', 'All']
ca_amts = age.child_allowance.unique()
state_names = age.state.unique()
state_names = np.insert(state_names[:-1], 0, 'US')

# create figure dictionary
fig_dict = {
    'data': [],
    'layout': {},
    'frames': []
}

# fill in most of layout
fig_dict['layout'] = {
    'plot_bgcolor': 'white',
    'font': dict(family = 'Roboto'),
    'showlegend': True,
    'height': 600,
    'margin': dict(t=100, b=0, l=0, r=0)
}
fig_dict['layout']['title'] = {
    'text': 'Poverty by age and child allowance amount',
    'y': 0.97,
    'x': 0.05,
    'xanchor': 'left',
    'yanchor': 'top'
}
fig_dict['layout']['xaxis'] = {
    'type': 'category'
}
fig_dict['layout']['yaxis'] = {
    'title': 'SPM poverty rate, 2017-2019',
    'ticksuffix': '%',
    'range': [0, 25]
}

# add slider specifications
slider_menu =  {
    'buttons': [
        {
            'args': [None, {'frame': {'duration': 500, 'redraw': True},
                            'fromcurrent': True, 
                            &quot;mode&quot;: &quot;immediate&quot;,
                            'transition': {'duration': 300,
                                           'easing': 'quadratic-in-out'}}],
            'label': '&amp;#9654;',
            'method': 'animate'
        },
        {
            &quot;args&quot;: [[None], {&quot;frame&quot;: {&quot;duration&quot;: 0, &quot;redraw&quot;: True},
                              &quot;mode&quot;: &quot;immediate&quot;,
                              &quot;transition&quot;: {&quot;duration&quot;: 0}}],
            &quot;label&quot;: &quot;&amp;#9724;&quot;,
            &quot;method&quot;: &quot;animate&quot;
        }
    ],
    'direction': 'left',
    'pad': {'r': 15, 't': 75},
    'showactive': False,
    'type': 'buttons',
    'x': 0.1,
    'xanchor': 'right',
    'y': 0,
    'yanchor': 'top'
}

sliders_dict = {
    'active': 0,
    'yanchor': 'top',
    'xanchor': 'left',
    'currentvalue': {
        'font': {'size': 20},
        'prefix': 'Monthly child allowance: ',
        'visible': True,
        'xanchor': 'right'
    },
    'transition': {'duration': 300, 'easing': 'cubic-in-out'},
    'pad': {'b': 10, 't': 50},
    'len': 0.9,
    'x': 0.1,
    'y': 0,
    'steps': []
}

steps = []
for ca in ca_amts:
    slider_step = {
        'args': [
            [ca],
            {'frame': {'duration': 300, 'redraw': True},
             'mode': 'immediate',
             'transition': {'duration': 300}}
        ],
        'label': '$' + str(ca),
        'method': 'animate'
    }
    steps.append(slider_step)
sliders_dict['steps'] = steps

# create frames for a given state and funding method
def make_frames(state, funding):
    raw_data = age[(age.state == state)]
    frames = {}
    for ca in ca_amts:
        frames[str(ca)] = list(raw_data[raw_data.child_allowance == ca].set_index(
            'age_group').loc[x][funding])
    return frames

# create dataframe of booleans to determine trace visibility
n = len(state_names) * len(FUNDING)
frames_list = []
count = 0
visible = {}
for state in state_names:
    v = [False] * n
    for funding in FUNDING:
        frames_list.append(make_frames(state, funding))
        v[count] = True
        count += 1
    visible[state] = v + v
v = [False] * n
v[0] = True
v[1] = 'legendonly'
v[2] = 'legendonly'
visible['US'] = v + v

# reorder existing frames
frames = []
for ca in ca_amts:
    data_list = []
    count = 0
    for f in frames_list:
        data_list.append({
            'y': f['0'], 
            'x': x,
            'type': 'bar', 
            'offsetgroup': count, 
            'showlegend': False,
            'legendgroup': count,
            'marker_color': GRAY_SHADOW,
            'name': 'No child allowance',
            'hovertemplate': 
                'Current poverty rate: %{y}' + 
                '&lt;extra&gt;&lt;/extra&gt;'
        })
        count += 1
    count = 0
    for f in frames_list:
        data_list.append({
            'y': f[str(ca)], 
            'x': x,
            'type': 'bar', 
            'offsetgroup': count,
            'legendgroup': count,
            'name': list(FUNDING.values())[count % 3],
            'marker_color': COLOR_MAP[list(FUNDING.values())[count % 3]],
            'hovertemplate': 
                '&lt;b&gt;' + list(FUNDING.values())[count % 3] + '&lt;/b&gt;' + 
                '&lt;br /&gt;Poverty rate: %{y}&lt;br /&gt;' + 
                'Poverty reduction: %{customdata}%'
                '&lt;extra&gt;&lt;/extra&gt;',
            'customdata': list(map(lambda x, y: (round(100 * (1 - y / x))),
                                   f['0'], f[str(ca)]))
        })
        count += 1
    frame = {'data': data_list, 'name': str(ca), 'traces': list(range(n*2))}
    frames.append(frame)

# add additional features to figure dictionary
fig_dict['frames'] = frames
fig_dict['layout']['sliders'] = [sliders_dict]

for i in range(n):
    data_dict = copy.deepcopy(frames[0]['data'][i])
    if i == 0:
        data_dict['visible'] = True
    elif i &amp;lt; 3:
        data_dict['visible'] = 'legendonly'
    else:
        data_dict['visible'] = False
    fig_dict['data'].append(data_dict)
for i in range(n):
    data_dict = copy.deepcopy(frames[0]['data'][n + i])
    if i == 0:
        data_dict['visible'] = True
    elif i &amp;lt; 3:
        data_dict['visible'] = 'legendonly'
    else:
        data_dict['visible'] = False
    fig_dict['data'].append(data_dict)

# generate plotly figure
fig = go.Figure(fig_dict)

# generate dropdown menu buttons
buttons = []
for state in state_names:
    new_button = {'method': 'update',
                  'label': state,
                  'args': [{'visible': (visible[state])},
                          ]}
    buttons.append(new_button)
    
# construct button menu
updatemenus = {'buttons': buttons,
               'direction': 'down',
               'showactive': True,
               'pad':{&quot;r&quot;: 10, 't': 20},
               'xanchor': 'left',
               'yanchor': 'top',
               'x': 0,
               'y': 1.2
              }

# add slider and button menus
fig.update_layout(
    updatemenus=[slider_menu, updatemenus],
    hoverlabel=dict(
        font=dict(family='Roboto')
    ),
    title_font_size=20,)

# display figure
fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f6() {
  var x = document.getElementById(&quot;asset_code_6&quot;);
  var b = document.getElementById(&quot;button6&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset6&quot;).load(&quot;/assets/markdown_assets/simulation/2020-11-25-simulation-asset-6.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset6&quot;&gt;&lt;/div&gt;

&lt;p&gt;That same $300-per-month federally-funded child allowance would cut child poverty fairly consistently across races: 51 percent among White children and 54 percent among Black children.
But because Black children are currently about twice as likely to be in poverty, it also cuts the percentage-point racial gaps in half.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button7&quot; onclick=&quot;f7()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_7&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
FUNDING = {'fed_poverty_rate': 'Federal tax',
           'state_poverty_rate': 'State tax',
           'non_funded_poverty_rate': 'No funding'}

# initial data set-up 
race = summary[summary['age_group'] == 'child']
x = ['Black', 'White', 'Other', 'All']
ca_amts = race.child_allowance.unique()
state_names = race.state.unique()
state_names = np.insert(state_names[:-1], 0, 'US')

# create figure dictionary
fig_dict = {
    'data': [],
    'layout': {},
    'frames': []
}

# fill in most of layout
fig_dict['layout'] = {
    'plot_bgcolor': 'white',
    'font': dict(family = 'Roboto'),
    'showlegend': True,
    'height': 600,
    'margin': dict(t=100, b=0, l=0, r=0)
}
fig_dict['layout']['title'] = {
    'text': 'Child poverty by race and child allowance amount',
    'y': 0.97,
    'x': 0.05,
    'xanchor': 'left',
    'yanchor': 'top'
}
fig_dict['layout']['xaxis'] = {
    'type': 'category'
}
fig_dict['layout']['yaxis'] = {
    'title': 'Child SPM poverty rate, 2017-2019',
    'ticksuffix': '%',
    'range': [0, 25]
}

# add slider specifications
slider_menu =  {
    'buttons': [
        {
            'args': [None, {'frame': {'duration': 500, 'redraw': True},
                            'fromcurrent': True, 
                            &quot;mode&quot;: &quot;immediate&quot;,
                            'transition': {'duration': 300,
                                           'easing': 'quadratic-in-out'}}],
            'label': '&amp;#9654;',
            'method': 'animate'
        },
        {
            &quot;args&quot;: [[None], {&quot;frame&quot;: {&quot;duration&quot;: 0, &quot;redraw&quot;: True},
                              &quot;mode&quot;: &quot;immediate&quot;,
                              &quot;transition&quot;: {&quot;duration&quot;: 0}}],
            &quot;label&quot;: &quot;&amp;#9724;&quot;,
            &quot;method&quot;: &quot;animate&quot;
        }
    ],
    'direction': 'left',
    'pad': {'r': 15, 't': 75},
    'showactive': False,
    'type': 'buttons',
    'x': 0.1,
    'xanchor': 'right',
    'y': 0,
    'yanchor': 'top'
}

sliders_dict = {
    'active': 0,
    'yanchor': 'top',
    'xanchor': 'left',
    'currentvalue': {
        'font': {'size': 20},
        'prefix': 'Monthly child allowance: ',
        'visible': True,
        'xanchor': 'right'
    },
    'transition': {'duration': 300, 'easing': 'cubic-in-out'},
    'pad': {'b': 10, 't': 50},
    'len': 0.9,
    'x': 0.1,
    'y': 0,
    'steps': []
}

steps = []
for ca in ca_amts:
    slider_step = {
        'args': [
            [ca],
            {'frame': {'duration': 300, 'redraw': True},
             'mode': 'immediate',
             'transition': {'duration': 300}}
        ],
        'label': '$' + str(ca),
        'method': 'animate'
    }
    steps.append(slider_step)
sliders_dict['steps'] = steps

# create frames for a given state and funding method
def make_frames(state, funding):
    raw_data = race[(race.state == state)]
    frames = {}
    for ca in ca_amts:
        frames[str(ca)] = list(raw_data[raw_data.child_allowance == ca].set_index('race').loc[x][funding])
    return frames

# create dataframe of booleans to determine trace visibility
n = len(state_names) * len(FUNDING)
frames_list = []
count = 0
visible = {}
for state in state_names:
    v = [False] * n
    for funding in FUNDING:
        frames_list.append(make_frames(state, funding))
        v[count] = True
        count += 1
    visible[state] = v + v
v = [False] * n
v[0] = True
v[1] = 'legendonly'
v[2] = 'legendonly'
visible['US'] = v + v

# reorder existing frames
frames = []
for ca in ca_amts:
    data_list = []
    count = 0
    for f in frames_list:
        data_list.append({
            'y': f['0'], 
            'x': x,
            'type': 'bar', 
            'offsetgroup': count, 
            'showlegend': False,
            'legendgroup': count,
            'marker_color': GRAY_SHADOW,
            'name': 'No child allowance',
            'hovertemplate': 
                'Current poverty rate: %{y}' + 
                '&lt;extra&gt;&lt;/extra&gt;'
        })
        count += 1
    count = 0
    for f in frames_list:
        data_list.append({
            'y': f[str(ca)], 
            'x': x,
            'type': 'bar', 
            'offsetgroup': count,
            'legendgroup': count,
            'name': list(FUNDING.values())[count % 3],
            'marker_color': COLOR_MAP[list(FUNDING.values())[count % 3]],
            'hovertemplate': 
                '&lt;b&gt;' + list(FUNDING.values())[count % 3] + '&lt;/b&gt;' + 
                '&lt;br /&gt;Child poverty rate: %{y}&lt;br /&gt;' + 
                'Poverty reduction: %{customdata}%'
                '&lt;extra&gt;&lt;/extra&gt;',
            'customdata': list(map(lambda x, y: (round(100 * (1 - y / x))),
                                   f['0'], f[str(ca)]))
        })
        count += 1
    frame = {'data': data_list, 'name': str(ca), 'traces': list(range(n*2))}
    frames.append(frame)

# add additional features to figure dictionary
fig_dict['frames'] = frames
fig_dict['layout']['sliders'] = [sliders_dict]

for i in range(n):
    data_dict = copy.deepcopy(frames[0]['data'][i])
    if i == 0:
        data_dict['visible'] = True
    elif i &amp;lt; 3:
        data_dict['visible'] = 'legendonly'
    else:
        data_dict['visible'] = False
    fig_dict['data'].append(data_dict)
for i in range(n):
    data_dict = copy.deepcopy(frames[0]['data'][n + i])
    if i == 0:
        data_dict['visible'] = True
    elif i &amp;lt; 3:
        data_dict['visible'] = 'legendonly'
    else:
        data_dict['visible'] = False
    fig_dict['data'].append(data_dict)

# generate plotly figure
fig = go.Figure(fig_dict)

# generate dropdown menu buttons
buttons = []
for state in state_names:
    new_button = {'method': 'update',
                  'label': state,
                  'args': [{'visible': (visible[state])}]
                 }
    buttons.append(new_button)
    
# construct button menu
updatemenus = {'buttons': buttons,
               'direction': 'down',
               'showactive': True,
               'pad':{&quot;r&quot;: 10, 't': 20},
               'xanchor': 'left',
               'yanchor': 'top',
               'x': 0,
               'y': 1.2
              }

# add slider and button menus
fig.update_layout(
    updatemenus=[slider_menu, updatemenus],
    hoverlabel=dict(
        font=dict(family='Roboto')
    ),
    title_font_size=20,)

# display figure
fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f7() {
  var x = document.getElementById(&quot;asset_code_7&quot;);
  var b = document.getElementById(&quot;button7&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset7&quot;).load(&quot;/assets/markdown_assets/simulation/2020-11-25-simulation-asset-7.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset7&quot;&gt;&lt;/div&gt;

&lt;p&gt;Beyond reducing child poverty, child allowances would decrease adult poverty and abate inequality.
These effects are consistent across states, races, and the funding mechanisms.&lt;/p&gt;

&lt;p&gt;Read on to our &lt;a href=&quot;https://child-allowance.ubicenter.org/empirical&quot;&gt;Empirical studies&lt;/a&gt; page for more research on the (often causal) links between child poverty and outcomes like health, education, and income.
For more information on how a child allowance would compare to existing policies like the Child Tax Credit, visit our &lt;a href=&quot;https://child-allowance.ubicenter.org/policies&quot;&gt;Policies&lt;/a&gt; page.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>[&quot;nate&quot;, &quot;matt&quot;, &quot;max&quot;]</name>
        
        
      </author>

      

      
        <category term="us" />
      
        <category term="child allowance" />
      

      
        <summary type="html">How different forms of cash grants to parents would affect poverty and inequality.</summary>
      

      
      
    </entry>
  
</feed>
