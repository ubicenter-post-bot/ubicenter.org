<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="/author/nate/feed.xml" rel="self" type="application/atom+xml" />
  <link href="/" rel="alternate" type="text/html" />
  <updated>2021-06-15T09:53:21+00:00</updated>
  <id>/author/nate/feed.xml</id>

  
  
  

  
    <title type="html">UBI Center | </title>
  

  
    <subtitle>Analyzing universal basic income policies with open-source research</subtitle>
  

  

  
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">How much UBI spending should go to children?</title>
      <link href="/child-ubi-share" rel="alternate" type="text/html" title="How much UBI spending should go to children?" />
      <published>2021-01-20T00:00:00+00:00</published>
      <updated>2021-01-20T00:00:00+00:00</updated>
      <id>/child-ubi-share</id>
      <content type="html" xml:base="/child-ubi-share">&lt;head&gt;
  &lt;script src=&quot;https://cdn.plot.ly/plotly-latest.min.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;p&gt;While the idea of a universal basic income has been around for centuries, it was recently brought into mainstream American political discourse by 2020 Presidential candidate Andrew Yang.
Yang centered his campaign around paying every adult citizen $1,000 each month.
Many other countries take the opposite approach, providing monthly &lt;a href=&quot;http://child-allowance.ubicenter.org&quot;&gt;“child allowance”&lt;/a&gt; payments for each child, an approach now favored by &lt;a href=&quot;https://www.vox.com/future-perfect/2019/3/6/18249290/child-poverty-american-family-act-sherrod-brown-michael-bennet&quot;&gt;many US lawmakers&lt;/a&gt;.
Here we explore which mix of these two approaches reduces poverty and inequality most effectively.&lt;/p&gt;

&lt;p&gt;In a &lt;a href=&quot;https://blog.ubicenter.org/20200707/adult_child_ubi.html&quot;&gt;July 2020 post&lt;/a&gt;, we found that a child allowance would be more effective at reducing poverty than an adult UBI, for spending levels up to $500 billion, at which point a UBI for both children and adults becomes more effective; adult-only UBI was never the best option.
But those three options—adults only, kids only, and equal for adults and kids—aren’t the only ones available.
In this post, we calculate the optimal ratios of adult to child UBIs, depending on the total spending and objective.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button1&quot; onclick=&quot;f1()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_1&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# Turn off display bar
CONFIG = {&quot;displayModeBar&quot;: False}

# Define UBI Center colors
BLUE = &quot;#1976D2&quot;
DARK_BLUE = &quot;#1565C0&quot;
LIGHT_BLUE = &quot;#90CAF9&quot;
GRAY = &quot;#BDBDBD&quot;
BARELY_BLUE = &quot;#E3F2FD&quot;

july_post = pd.read_csv(&quot;https://github.com/ngpsu22/blog/raw/master/july_2020.csv&quot;)

colors = {0: DARK_BLUE, 1: LIGHT_BLUE, 2: GRAY}

fig = px.line(
    july_post,
    x=&quot;spending_in_billions&quot;,
    y=&quot;poverty_rate&quot;,
    color=&quot;ubi_type&quot;,
    color_discrete_map={
        &quot;Child allowance&quot;: DARK_BLUE,
        &quot;Adult UBI&quot;: LIGHT_BLUE,
        &quot;All UBI&quot;: GRAY,
    },
)
fig.update_layout(
    title=&quot;Overall poverty rate and spending on cash transfer programs&quot;,
    xaxis_title=&quot;Spending in billions&quot;,
    yaxis_title=&quot;SPM poverty rate&quot;,
    yaxis_ticksuffix=&quot;%&quot;,
    font=dict(family=&quot;Roboto&quot;),
    hovermode=&quot;x&quot;,
    xaxis_tickprefix=&quot;$&quot;,
    xaxis_ticksuffix=&quot;B&quot;,
    plot_bgcolor=&quot;white&quot;,
    legend_title_text=&quot;&quot;,
)

fig.update_traces(mode=&quot;markers+lines&quot;, hovertemplate=None)

fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f1() {
  var x = document.getElementById(&quot;asset_code_1&quot;);
  var b = document.getElementById(&quot;button1&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset1&quot;).load(&quot;/assets/markdown_assets/child-ubi-share/2021-01-20-child-ubi-share-asset-1.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset1&quot;&gt;&lt;/div&gt;

&lt;p&gt;To start, we modeled how different UBI amounts (funded by a flat tax on taxable income) would impact the poverty rate if children were excluded, received half the UBI, or received the full benefit.
Our model simulated up until $3 trillion in total UBI spending and found that including children further reduces poverty at every level.
For example, at $1.5 trillion in spending, excluding children would give each adult about $500 a month and reduce the overall poverty rate from 11.7 percent to 4.5 percent.
However, at the same amount of spending, including children in the full benefit would lower the poverty rate to 4 percent, lifting an additional 1.6 million people out of poverty.
Poverty is generally similar between giving children a full-size UBI or half the adult amount.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button2&quot; onclick=&quot;f2()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_2&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
summary2 = pd.read_csv(
    &quot;https://github.com/ngpsu22/blog/raw/master/child_share_ubi_summary.csv.gz&quot;,
    compression=&quot;gzip&quot;,
)
# Turn off display bar
CONFIG = {&quot;displayModeBar&quot;: False}

# Define UBI Center colors
BLUE = &quot;#1976D2&quot;
DARK_BLUE = &quot;#1565C0&quot;
LIGHT_BLUE = &quot;#90CAF9&quot;
GRAY = &quot;#BDBDBD&quot;
BARELY_BLUE = &quot;#E3F2FD&quot;

# Create figure
fig = px.line()

names = {
    0: &quot;No UBI for children&quot;,
    1: &quot;Half-sized UBI for children&quot;,
    2: &quot;Full-sized UBI for children&quot;,
}

colors = {0: GRAY, 1: LIGHT_BLUE, 2: DARK_BLUE}

percent_steps = [0, 50, 100]

zero = summary2[summary2[&quot;child_percent_ubi&quot;] == 0]
fifty = summary2[summary2[&quot;child_percent_ubi&quot;] == 50]
hundred = summary2[summary2[&quot;child_percent_ubi&quot;] == 100]

dfs = [zero, fifty, hundred]

for i, df in enumerate(dfs):
    # add trace for optimal poverty df
    fig.add_trace(
        go.Scatter(
            x=df[&quot;funding_billions&quot;],
            y=df[&quot;poverty_rate&quot;],
            mode=&quot;markers+lines&quot;,
            name=names[i],
            # assign numpy array with child &amp;amp; adult ubi to customdata argument
            customdata=np.stack(
                (df[&quot;monthly_child_ubi&quot;], df[&quot;monthly_adult_ubi&quot;]), axis=-1
            ),
            # add customdata to hovertemplate
            hovertemplate=(
                &quot;&lt;i&gt;Poverty rate&lt;/i&gt;: %{y:.1f}%&lt;br /&gt;&quot;
                + &quot;&lt;br /&gt;&lt;b&gt;Child UBI/mo&lt;/b&gt;: $%{customdata[0]: .0f}&quot;
                + &quot;&lt;br /&gt;&lt;b&gt;Adult UBI/mo &lt;/b&gt;: $%{customdata[1]: .0f}&lt;br /&gt;&quot;
            ),
            line=dict(color=colors[i]),
        )
    )
fig.update_layout(
    title=&quot;Poverty by proportion of adult benefit paid to children&quot;,
    xaxis_title=&quot;Funding in billions&quot;,
    yaxis_title=&quot;SPM poverty rate&quot;,
    yaxis_ticksuffix=&quot;%&quot;,
    font=dict(family=&quot;Roboto&quot;),
    hovermode=&quot;x&quot;,
    xaxis_tickprefix=&quot;$&quot;,
    xaxis_ticksuffix=&quot;B&quot;,
    plot_bgcolor=&quot;white&quot;,
    height=600,
    width=1000,
    margin_b=90,  # add bottom margin for caption
    legend=dict(yanchor=&quot;top&quot;, y=0.99, xanchor=&quot;left&quot;, x=0.7)
)

fig.add_layout_image(
    dict(
        source=&quot;https://raw.githubusercontent.com/UBICenter/blog/master/jb/_static/ubi_center_logo_wide_blue.png&quot;,
        # See https://github.com/plotly/plotly.py/issues/2975.
        # source=&quot;../_static/ubi_center_logo_wide_blue.png&quot;,
        xref=&quot;paper&quot;,
        yref=&quot;paper&quot;,
        x=1,
        y=-0.15,
        sizex=0.12,
        sizey=0.12,
        xanchor=&quot;right&quot;,
        yanchor=&quot;bottom&quot;,
    )
)

fig.update_traces(mode=&quot;markers+lines&quot;)

fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f2() {
  var x = document.getElementById(&quot;asset_code_2&quot;);
  var b = document.getElementById(&quot;button2&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset2&quot;).load(&quot;/assets/markdown_assets/child-ubi-share/2021-01-20-child-ubi-share-asset-2.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset2&quot;&gt;&lt;/div&gt;

&lt;p&gt;Still, the results above only model three scenarios.
In our next simulation, we examined the optimal share of spending that should go to children in order to minimize poverty or reduce inequality.
For each spending level, we simulated 101 scenarios that range from 0 percent of the overall funding going to children to 100 percent.
As a benchmark, we show a line at 22%, which corresponds to equal UBI levels for adults and children (since children comprise 22% of the US population).&lt;/p&gt;

&lt;p&gt;The simplest case is inequality reduction, for which optimal policy would give vast majorities of funds to children.
In fact, an annual child allowance should reach over $17,000 per child before any spending goes towards adults.
Even at $3 trillion in new spending, over half of the money would go towards children, resulting in $1,743 a month for kids and $648 per adult.
This is, to some degree, by construction, as our inequality metric considers per-capita resources; other inequality measures may produce different results.&lt;/p&gt;

&lt;p&gt;If the goal is to minimize the poverty rate, the story is a bit more complicated.
For spending levels below $1 trillion, children should receive more than adults; for spending levels above $2 trillion, children should receive less; for spending levels in between, it varies.
Because many people have incomes just below or above their poverty threshold, the poverty rate responds to transfer policy in a volatile way.&lt;/p&gt;

&lt;p&gt;Finally, we examined the effect of UBI design on the  poverty gap, the summation of the distance poor families are from their poverty threshold.
The 2019 poverty gap is $153 billion.
To optimize its reduction, adults should receive more than children at every level above $150 billion in new spending.
With $2 trillion in funding, the poverty gap could be reduced to $45 billion by sending every adult $628 per month and parents $114 per month per child.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button3&quot; onclick=&quot;f3()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_3&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
summary = pd.read_csv(
    &quot;https://github.com/ngpsu22/blog/raw/master/children_share_funding_summary%20(4).csv.gz&quot;,
    compression=&quot;gzip&quot;,
)

optimal_poverty_gap = summary.sort_values(&quot;poverty_gap&quot;).drop_duplicates(
    &quot;funding_billions&quot;, keep=&quot;first&quot;
)
# Drop rows where funding level is 0
optimal_poverty_gap = optimal_poverty_gap.drop(
    optimal_poverty_gap[optimal_poverty_gap.funding_billions == 0].index
)

optimal_poverty_rate = summary.sort_values(&quot;poverty_rate&quot;).drop_duplicates(
    &quot;funding_billions&quot;, keep=&quot;first&quot;
)
# Drop rows where funding level is 0
optimal_poverty_rate = optimal_poverty_rate.drop(
    optimal_poverty_rate[optimal_poverty_rate.funding_billions == 0].index
)

optimal_inequality = summary.sort_values(&quot;gini&quot;).drop_duplicates(
    &quot;funding_billions&quot;, keep=&quot;first&quot;
)
# Drop rows where funding level is 0
optimal_inequality = optimal_inequality.drop(
    optimal_inequality[optimal_inequality.funding_billions == 0].index
)

optimal_winners = summary.sort_values(&quot;percent_better_off&quot;).drop_duplicates(
    &quot;funding_billions&quot;, keep=&quot;last&quot;
)
optimal_winners = optimal_winners.drop(
    optimal_winners[optimal_winners.funding_billions == 0].index
)

# Define adult population size, as determined in data preprocessing
adult_pop = 252117111.14000002
# Define child population size
child_pop = 73151070.56999998
# Calculate total population
pop = child_pop + adult_pop

# Create figure
fig = px.line()

# Add inequality trace
fig.add_trace(
    go.Scatter(
        x=optimal_inequality[&quot;funding_billions&quot;],
        y=optimal_inequality[&quot;child_percent_funding&quot;],
        mode=&quot;markers+lines&quot;,
        name=&quot;Gini index&quot;,
        # assign numpy array with child &amp;amp; adult ubi to customdata argument
        customdata=np.stack(
            (
                optimal_inequality[&quot;monthly_child_ubi&quot;],
                optimal_inequality[&quot;monthly_adult_ubi&quot;],
                optimal_inequality[&quot;gini&quot;],
            ),
            axis=-1,
        ),
        # add customdata to hovertemplate
        hovertemplate=(
            &quot;&lt;i&gt;Children's share of spending&lt;/i&gt;: %{y:.0f}%&lt;br /&gt;&quot;
            + &quot;&lt;br /&gt;&lt;b&gt;Child UBI/mo&lt;/b&gt;: $%{customdata[0]: .0f}&quot;
            + &quot;&lt;br /&gt;&lt;b&gt;Adult UBI/mo &lt;/b&gt;: $%{customdata[1]: .0f}&lt;br /&gt;&quot;
            &quot;&lt;br /&gt;&lt;b&gt;Gini index &lt;/b&gt;: %{customdata[2]: .3f}&lt;br /&gt;&quot;
        ),
        line=dict(color=&quot;#499167&quot;),
    )
)

# Add poverty gap trace
fig.add_trace(
    go.Scatter(
        x=optimal_poverty_gap[&quot;funding_billions&quot;],
        y=optimal_poverty_gap[&quot;child_percent_funding&quot;],
        mode=&quot;markers+lines&quot;,
        name=&quot;Poverty gap&quot;,
        # assign numpy array with child &amp;amp; adult ubi to customdata argument
        customdata=np.stack(
            (
                optimal_poverty_gap[&quot;monthly_child_ubi&quot;],
                optimal_poverty_gap[&quot;monthly_adult_ubi&quot;],
                optimal_poverty_gap[&quot;poverty_gap&quot;] / 1e9,
            ),
            axis=-1,
        ),
        # add customdata to hovertemplate
        hovertemplate=(
            &quot;&lt;i&gt;Children's share of spending&lt;/i&gt;: %{y:.0f}%&lt;br /&gt;&quot;
            + &quot;&lt;br /&gt;&lt;b&gt;Child UBI/mo&lt;/b&gt;: $%{customdata[0]: .0f}&quot;
            + &quot;&lt;br /&gt;&lt;b&gt;Adult UBI/mo &lt;/b&gt;: $%{customdata[1]: .0f}&lt;br /&gt;&quot;
            &quot;&lt;br /&gt;&lt;b&gt;Poverty gap &lt;/b&gt;: $%{customdata[2]: .0f} billion&lt;br /&gt;&quot;
        ),
        line=dict(color=DARK_BLUE),
    )
)

# Add poverty gap trace
fig.add_trace(
    go.Scatter(
        x=optimal_poverty_rate[&quot;funding_billions&quot;],
        y=optimal_poverty_rate[&quot;child_percent_funding&quot;],
        mode=&quot;markers+lines&quot;,
        name=&quot;Poverty rate&quot;,
        # assign numpy array with child &amp;amp; adult ubi to customdata argument
        customdata=np.stack(
            (
                optimal_poverty_rate[&quot;monthly_child_ubi&quot;],
                optimal_poverty_rate[&quot;monthly_adult_ubi&quot;],
                optimal_poverty_rate[&quot;poverty_rate&quot;],
            ),
            axis=-1,
        ),
        # add customdata to hovertemplate
        hovertemplate=(
            &quot;&lt;i&gt;Children's share of spending&lt;/i&gt;: %{y:.0f}%&lt;br /&gt;&quot;
            + &quot;&lt;br /&gt;&lt;b&gt;Child UBI/mo&lt;/b&gt;: $%{customdata[0]: .0f}&quot;
            + &quot;&lt;br /&gt;&lt;b&gt;Adult UBI/mo &lt;/b&gt;: $%{customdata[1]: .0f}&lt;br /&gt;&quot;
            &quot;&lt;br /&gt;&lt;b&gt;Poverty rate &lt;/b&gt;: %{customdata[2]: .0f}%&lt;br /&gt;&quot;
        ),
        line=dict(color=LIGHT_BLUE),
    )
)


ratio = (child_pop / pop) * 100

fig.add_shape(
    type=&quot;line&quot;, line=dict(dash=&quot;dot&quot;, color=GRAY), x0=-1, x1=3000, y0=ratio, y1=ratio
)

# plot line where adult benefit is same size as child benefit
fig.add_annotation(
    text=&quot;Adult UBI = Child UBI&quot;,
    xref=&quot;paper&quot;,
    yref=&quot;paper&quot;,
    x=0.98,
    y=0.22,
    showarrow=False,
    font=dict(color=GRAY, size=12),
)

fig.update_xaxes(
    tickangle=0,
    title_text=&quot;Funding in billions&quot;,
    tickfont={&quot;size&quot;: 14},
    title_standoff=25,
    ticksuffix=&quot;B&quot;,
    tickprefix=&quot;$&quot;,
    range=[0, 3050],
)

fig.update_yaxes(
    title_text=&quot;Children's share of UBI spending&quot;,
    ticksuffix=&quot;%&quot;,
    tickfont={&quot;size&quot;: 14},
    title_standoff=25,
    range=[0, 105],
)

fig.update_layout(
    title_text=&quot;Optimal share of UBI spending on children by optimization criterion&quot;,
    hoverlabel_align=&quot;right&quot;,
    margin_b=90,
    legend=dict(yanchor=&quot;top&quot;, y=0.99, xanchor=&quot;left&quot;, x=0.7),
    font=dict(family=&quot;Roboto&quot;),
    plot_bgcolor=&quot;white&quot;,
    height=600,
    width=1000,
    hovermode=&quot;x&quot;,
)

fig.add_layout_image(
    dict(
        source=&quot;https://raw.githubusercontent.com/UBICenter/blog/master/jb/_static/ubi_center_logo_wide_blue.png&quot;,
        # See https://github.com/plotly/plotly.py/issues/2975.
        # source=&quot;../_static/ubi_center_logo_wide_blue.png&quot;,
        xref=&quot;paper&quot;,
        yref=&quot;paper&quot;,
        x=1,
        y=-0.15,
        sizex=0.12,
        sizey=0.12,
        xanchor=&quot;right&quot;,
        yanchor=&quot;bottom&quot;,
    )
)

fig.update_traces(mode=&quot;markers+lines&quot;,)

fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f3() {
  var x = document.getElementById(&quot;asset_code_3&quot;);
  var b = document.getElementById(&quot;button3&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset3&quot;).load(&quot;/assets/markdown_assets/child-ubi-share/2021-01-20-child-ubi-share-asset-3.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset3&quot;&gt;&lt;/div&gt;

&lt;p&gt;The next chart shows the monthly amount given to children and adults under each optimization (you can hover over points in the prior chart to view this information as well).
Because the poverty gap is less volatile to changes at the margin, the UBI amounts increases are nearly linear. At the highest level of spending in our model, $3 trillion, adults would receive $942 per month and children would receive $171 while optimizing for poverty gap reduction.
Poverty rate amounts are more erratic, while inequality-minimizing amounts are roughly linear with a kink at the point where optimal adult amounts exceed $0.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button4&quot; onclick=&quot;f4()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_4&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# Create UBI amount figure
fig = px.line()

fig.add_trace(
    go.Scatter(
        x=optimal_poverty_gap[&quot;funding_billions&quot;],
        y=optimal_poverty_gap[&quot;monthly_child_ubi&quot;],
        mode=&quot;markers+lines&quot;,
        name=&quot;Poverty gap - child&quot;,
        # assign numpy array with child &amp;amp; adult ubi to customdata argument
        customdata=np.stack(
            (
                optimal_poverty_gap[&quot;monthly_child_ubi&quot;],
                optimal_poverty_gap[&quot;poverty_gap&quot;] / 1e9,
            ),
            axis=-1,
        ),
        # add customdata to hovertemplate
        hovertemplate=(
            &quot;&lt;b&gt;Child UBI/mo&lt;/b&gt;: $%{customdata[0]: .0f}&quot;
            + &quot;&lt;br /&gt;&lt;b&gt;Poverty gap &lt;/b&gt;: $%{customdata[1]: .0f} billion&lt;br /&gt;&quot;
        ),
        line=dict(color=DARK_BLUE),
    )
)

fig.add_trace(
    go.Scatter(
        x=optimal_poverty_gap[&quot;funding_billions&quot;],
        y=optimal_poverty_gap[&quot;monthly_adult_ubi&quot;],
        mode=&quot;markers+lines&quot;,
        name=&quot;Poverty gap - adult&quot;,
        # assign numpy array with child &amp;amp; adult ubi to customdata argument
        customdata=np.stack(
            (
                optimal_poverty_gap[&quot;monthly_adult_ubi&quot;],
                optimal_poverty_gap[&quot;poverty_gap&quot;] / 1e9,
            ),
            axis=-1,
        ),
        # add customdata to hovertemplate
        hovertemplate=(
            &quot;&lt;b&gt;Adult UBI/mo&lt;/b&gt;: $%{customdata[0]: .0f}&quot;
            + &quot;&lt;br /&gt;&lt;b&gt;Poverty gap &lt;/b&gt;: %{customdata[1]: .0f} billion&quot;
        ),
        line=dict(color=LIGHT_BLUE),
    )
)

fig.add_trace(
    go.Scatter(
        x=optimal_poverty_rate[&quot;funding_billions&quot;],
        y=optimal_poverty_rate[&quot;monthly_child_ubi&quot;],
        mode=&quot;markers+lines&quot;,
        name=&quot;Poverty rate - child&quot;,
        # assign numpy array with child &amp;amp; adult ubi to customdata argument
        customdata=np.stack(
            (
                optimal_poverty_rate[&quot;monthly_child_ubi&quot;],
                optimal_poverty_rate[&quot;poverty_rate&quot;],
            ),
            axis=-1,
        ),
        # add customdata to hovertemplate
        hovertemplate=(
            &quot;&lt;b&gt;Child UBI/mo&lt;/b&gt;: $%{customdata[0]: .0f}&quot;
            + &quot;&lt;br /&gt;&lt;b&gt;Poverty rate &lt;/b&gt;: %{customdata[1]: .0f}%&lt;br /&gt;&quot;
        ),
        line=dict(color=&quot;#484848&quot;),
    )
)

fig.add_trace(
    go.Scatter(
        x=optimal_poverty_rate[&quot;funding_billions&quot;],
        y=optimal_poverty_rate[&quot;monthly_adult_ubi&quot;],
        mode=&quot;markers+lines&quot;,
        name=&quot;Poverty rate - adult&quot;,
        # assign numpy array with child &amp;amp; adult ubi to customdata argument
        customdata=np.stack(
            (
                optimal_poverty_rate[&quot;monthly_adult_ubi&quot;],
                optimal_poverty_rate[&quot;poverty_rate&quot;],
            ),
            axis=-1,
        ),
        # add customdata to hovertemplate
        hovertemplate=(
            &quot;&lt;b&gt;Adult UBI/mo&lt;/b&gt;: $%{customdata[0]: .0f}&quot;
            + &quot;&lt;br /&gt;&lt;b&gt;Poverty rate &lt;/b&gt;: %{customdata[1]: .0f}%&quot;
        ),
        line=dict(color=GRAY),
    )
)


fig.add_trace(
    go.Scatter(
        x=optimal_inequality[&quot;funding_billions&quot;],
        y=optimal_inequality[&quot;monthly_child_ubi&quot;],
        mode=&quot;markers+lines&quot;,
        name=&quot;Inequality - child&quot;,
        # assign numpy array with child &amp;amp; adult ubi to customdata argument
        customdata=np.stack(
            (optimal_inequality[&quot;monthly_child_ubi&quot;], optimal_inequality[&quot;gini&quot;]),
            axis=-1,
        ),
        # add customdata to hovertemplate
        hovertemplate=(
            &quot;&lt;b&gt;Child UBI/mo&lt;/b&gt;: $%{customdata[0]: .0f}&quot;
            + &quot;&lt;br /&gt;&lt;b&gt;Gini &lt;/b&gt;: %{customdata[1]: .3f}&lt;br /&gt;&quot;
        ),
        line=dict(color=&quot;#499167&quot;),
    )
)

fig.add_trace(
    go.Scatter(
        x=optimal_inequality[&quot;funding_billions&quot;],
        y=optimal_inequality[&quot;monthly_adult_ubi&quot;],
        mode=&quot;markers+lines&quot;,
        name=&quot;Inequality - adult&quot;,
        # assign numpy array with child &amp;amp; adult ubi to customdata argument
        customdata=np.stack(
            (optimal_inequality[&quot;monthly_adult_ubi&quot;], optimal_inequality[&quot;gini&quot;]),
            axis=-1,
        ),
        # add customdata to hovertemplate
        hovertemplate=(
            &quot;&lt;b&gt;Adult UBI/mo&lt;/b&gt;: $%{customdata[0]: .0f}&quot;
            + &quot;&lt;br /&gt;&lt;b&gt;Gini &lt;/b&gt;: %{customdata[1]: .3f}&lt;br /&gt;&quot;
        ),
        line=dict(color=&quot;#5FDD9D&quot;),
    )
)

fig.update_xaxes(
    tickangle=0,
    title_text=&quot;Funding in billions&quot;,
    tickfont={&quot;size&quot;: 14},
    title_standoff=25,
    ticksuffix=&quot;B&quot;,
    tickprefix=&quot;$&quot;,
    range=[0, 3050],
)

fig.update_yaxes(
    title_text=&quot;Monthly UBI amount&quot;,
    tickprefix=&quot;$&quot;,
    tickfont={&quot;size&quot;: 14},
    title_standoff=25,
)

fig.update_xaxes(title_font=dict(size=14, color=&quot;black&quot;))
fig.update_yaxes(title_font=dict(size=14, color=&quot;black&quot;))
fig.update_layout(
    title_text=&quot;UBI amounts for each optimization&quot;,
    hoverlabel_align=&quot;right&quot;,
    margin_b=90,
    legend=dict(yanchor=&quot;top&quot;, y=1, xanchor=&quot;left&quot;, x=1.03),
    font=dict(family=&quot;Roboto&quot;),
    plot_bgcolor=&quot;white&quot;,
    height=600,
    width=1000,
    hovermode=&quot;x&quot;,
)

fig.update_traces(mode=&quot;markers+lines&quot;)

hide_line = [
    &quot;Poverty rate - child&quot;,
    &quot;Poverty rate - adult&quot;,
    &quot;Inequality - child&quot;,
    &quot;Inequality - adult&quot;,
]
fig.for_each_trace(
    lambda trace: trace.update(visible=&quot;legendonly&quot;) if trace.name in hide_line else ()
)

fig.add_layout_image(
    dict(
        source=&quot;https://raw.githubusercontent.com/UBICenter/blog/master/jb/_static/ubi_center_logo_wide_blue.png&quot;,
        # See https://github.com/plotly/plotly.py/issues/2975.
        # source=&quot;../_static/ubi_center_logo_wide_blue.png&quot;,
        xref=&quot;paper&quot;,
        yref=&quot;paper&quot;,
        x=1,
        y=-0.15,
        sizex=0.12,
        sizey=0.12,
        xanchor=&quot;right&quot;,
        yanchor=&quot;bottom&quot;,
    )
)

fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f4() {
  var x = document.getElementById(&quot;asset_code_4&quot;);
  var b = document.getElementById(&quot;button4&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset4&quot;).load(&quot;/assets/markdown_assets/child-ubi-share/2021-01-20-child-ubi-share-asset-4.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset4&quot;&gt;&lt;/div&gt;

&lt;p&gt;Our research shows that different policy objectives and funding levels may lead to starkly different amounts of cash transfer funding going towards children.
Each optimization, however, called for children to receive a nonzero share of UBI spending, and often a larger monthly amount than adults, especially with small budgets and when minimizing inequality.
These results underline the importance of including children in UBI conversations and policy analysis.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>[&quot;nate&quot;, &quot;will&quot;]</name>
        
        
      </author>

      

      
        <category term="us" />
      
        <category term="child allowance" />
      

      
        <summary type="html">At least some, but it depends on the measurement.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Basic income would shrink racial poverty disparities</title>
      <link href="/racial-poverty-disparities-mlk-day-2021" rel="alternate" type="text/html" title="Basic income would shrink racial poverty disparities" />
      <published>2021-01-18T00:00:00+00:00</published>
      <updated>2021-01-18T00:00:00+00:00</updated>
      <id>/racial-poverty-disparities-mlk-day-2021</id>
      <content type="html" xml:base="/racial-poverty-disparities-mlk-day-2021">&lt;head&gt;
  &lt;script src=&quot;https://cdn.plot.ly/plotly-latest.min.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;p&gt;Dr. Martin Luther King Jr. is remembered chiefly for his leadership of the civil rights movement,
but toward the end of his life, King extended this leadership to the cause of poverty.
In his &lt;a href=&quot;http://www.thekinglegacy.org/books/where-do-we-go-here-chaos-or-community&quot;&gt;final book&lt;/a&gt;,
he wrote:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-{epigraph}&quot;&gt;The time has come for us to civilize ourselves by the total, direct and immediate abolition of poverty [...] 
I'm now convinced that the simplest approach will prove to be the most effective — the solution to poverty is to abolish it directly by a now widely discussed measure: the guaranteed income.

-- Dr. Martin Luther King, Jr., *Where Do We Go From Here: Chaos or Community?* (1967)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We honor King’s call by showing how a universal basic income (UBI), funded by a flat income tax, would not only reduce overall poverty, but also shrink the poverty disparities between Black and White people. &lt;sup id=&quot;fnref:modeling&quot;&gt;&lt;a href=&quot;#fn:modeling&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Black Americans today are 75 percent more likely to be in poverty than White Americans, with a rate of 18.4 percent compared to 10.5 percent.
A $250 monthly UBI would cut both Black and White poverty roughly in half (this is similar to what we found in a &lt;a href=&quot;https://medium.com/ubicenter/how-universal-basic-income-would-affect-the-black-white-poverty-and-wealth-gaps-452e2af1497b&quot;&gt;July 2020 post&lt;/a&gt;, which used older data and did not simulate taxes to fund the UBI).
A $1,000 monthly UBI funded by a flat income tax would reduce poverty for both White and Black people to about 1 percent.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button1&quot; onclick=&quot;f1()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_1&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
import pandas as pd
import numpy as np
import microdf as mdf
import plotly.express as px

SPM_COLS = [
    &quot;spm_&quot; + i for i in [&quot;id&quot;, &quot;weight&quot;, &quot;povthreshold&quot;, &quot;resources&quot;, &quot;numper&quot;]
]
raw = pd.read_csv(
    &quot;https://github.com/MaxGhenis/datarepo/raw/master/pppub20.csv.gz&quot;,
    usecols=[&quot;PRDTRACE&quot;, &quot;MARSUPWT&quot;, &quot;AGI&quot;] + [i.upper() for i in SPM_COLS],
)
person = raw.copy(deep=True)
person.columns = person.columns.str.lower()
person[&quot;weight&quot;] = person.marsupwt / 100
person.spm_weight /= 100
person = person.rename(columns={&quot;prdtrace&quot;: &quot;race&quot;})
# Add indicators for white only and black only (not considering other races).
person[&quot;white&quot;] = person.race == 1
person[&quot;black&quot;] = person.race == 2
# Limit to positive AGI.
person[&quot;agi_pos&quot;] = np.maximum(person.agi, 0)
# Need total population to calculate UBI and total AGI for required tax rate.
total_population = person.weight.sum()
total_agi = mdf.weighted_sum(person, &quot;agi_pos&quot;, &quot;weight&quot;)
# Sum up AGI for each SPM unit and merge that back to person level.
spm = person.groupby(SPM_COLS)[[&quot;agi_pos&quot;, &quot;white&quot;, &quot;black&quot;]].sum()
spm.columns = [&quot;spm_&quot; + i for i in spm.columns]
# Merge these back to person to calculate population in White and Black spmus.
person = person.merge(spm, on=&quot;spm_id&quot;)
pop_in_race_spmu = pd.Series(
    {
        &quot;Black&quot;: person[person.spm_black &amp;gt; 0].weight.sum(),
        &quot;White&quot;: person[person.spm_white &amp;gt; 0].weight.sum(),
    }
)
spm.reset_index(inplace=True)


def pov_gap(df, resources, threshold, weight):
    # df: Should be SPM-unit level.
    gaps = np.maximum(df[threshold] - df[resources], 0)
    return (gaps * df[weight]).sum()


def pov(race, monthly_ubi):
    # Total cost and associated tax rate.
    cost = monthly_ubi * total_population * 12
    tax_rate = cost / total_agi
    # Calculate new tax, UBI and resources per SPM unit.
    spm[&quot;new_spm_resources&quot;] = (
        spm.spm_resources - 
        (tax_rate * spm.spm_agi_pos) +  # New tax
        (12 * monthly_ubi * spm.spm_numper))  # UBI
    # Merge back to person.
    person2 = person.merge(spm[[&quot;spm_id&quot;, &quot;new_spm_resources&quot;]], on=&quot;spm_id&quot;)
    # Based on new resources, calculate
    person2[&quot;new_poor&quot;] = person2.new_spm_resources &amp;lt; person2.spm_povthreshold
    # Calculate poverty rate for specified race.
    poverty_rate = mdf.weighted_mean(
        person2[person2[race.lower()]], &quot;new_poor&quot;, &quot;weight&quot;
    )
    # Calculate poverty gap for specified race.
    poverty_gap = pov_gap(
        spm[spm[&quot;spm_&quot; + race.lower()] &amp;gt; 0], &quot;new_spm_resources&quot;,
        &quot;spm_povthreshold&quot;, &quot;spm_weight&quot;
    )
    poverty_gap_per_capita = (poverty_gap / pop_in_race_spmu[race])

    return pd.Series({
        &quot;poverty_rate&quot;: poverty_rate,
        &quot;poverty_gap_per_capita&quot;: poverty_gap_per_capita
    })


def pov_row(row):
    return pov(row.race, row.monthly_ubi)


summary = mdf.cartesian_product(
    {&quot;race&quot;: [&quot;White&quot;, &quot;Black&quot;], &quot;monthly_ubi&quot;: np.arange(0, 1001, 50)}
)
summary = pd.concat([summary, summary.apply(pov_row, axis=1)], axis=1)
# Format results.
summary.poverty_rate = 100 * summary.poverty_rate.round(3)
summary.poverty_gap_per_capita = summary.poverty_gap_per_capita.round(0)
wide = summary.pivot_table(
    [&quot;poverty_rate&quot;, &quot;poverty_gap_per_capita&quot;], &quot;monthly_ubi&quot;, &quot;race&quot;
)
wide.columns = [&quot;pg_black&quot;, &quot;pg_white&quot;, &quot;pr_black&quot;, &quot;pr_white&quot;]
wide[&quot;pg_ratio&quot;] = (wide.pg_black / wide.pg_white).round(2)
wide[&quot;pr_ratio&quot;] = (wide.pr_black / wide.pr_white).round(2)
wide.reset_index(inplace=True)
ratios = wide.melt(id_vars=&quot;monthly_ubi&quot;, value_vars=[&quot;pr_ratio&quot;, &quot;pg_ratio&quot;])
# Change for chart.
ratios.variable.replace({&quot;pr_ratio&quot;: &quot;Poverty rate&quot;,
                         &quot;pg_ratio&quot;: &quot;Poverty gap per capita&quot;},
                        inplace=True)


def add_ubi_center_logo(fig, x=0.98, y=-0.14):
    fig.add_layout_image(
        dict(
            source=&quot;https://raw.githubusercontent.com/UBICenter/blog/master/jb/_static/ubi_center_logo_wide_blue.png&quot;,
            # See https://github.com/plotly/plotly.py/issues/2975.
            # source=&quot;../_static/ubi_center_logo_wide_blue.png&quot;,
            xref=&quot;paper&quot;, yref=&quot;paper&quot;,
            x=x, y=y,
            sizex=0.12, sizey=0.12,
            xanchor=&quot;right&quot;, yanchor=&quot;bottom&quot;
        )
    )


def line_graph(
    df,
    x,
    y,
    color,
    title,
    xaxis_title,
    yaxis_title,
    color_discrete_map,
    yaxis_ticksuffix,
    yaxis_tickprefix,
):
    &quot;&quot;&quot;Style for line graphs.
    
    Arguments
    df: DataFrame with data to be plotted.
    x: The string representing the column in df that holds the new spending in billions.
    y: The string representing the column in df that holds the poverty rate.
    color: The string representing the UBI type.
    xaxis_title: The string represnting the xaxis-title.
    yaxis_title: The string representing the yaxis-title.
    
    Returns
    Nothing. Shows the plot.
    &quot;&quot;&quot;
    fig = px.line(
        df, x=x, y=y, color=color, color_discrete_map=color_discrete_map
    )
    fig.update_layout(
        title=title,
        xaxis_title=xaxis_title,
        yaxis_title=yaxis_title,
        yaxis_ticksuffix=yaxis_ticksuffix,
        yaxis_tickprefix=yaxis_tickprefix,
        font=dict(family=&quot;Roboto&quot;),
        hovermode=&quot;x&quot;,
        xaxis_tickprefix=&quot;$&quot;,
        plot_bgcolor=&quot;white&quot;,
        legend_title_text=&quot;&quot;,
        height=600,
        width=1000,
    )

    fig.update_layout(
        legend=dict(yanchor=&quot;top&quot;, y=0.99, xanchor=&quot;left&quot;, x=0.9)
    )

    fig.update_traces(mode=&quot;markers+lines&quot;, hovertemplate=None)
    
    add_ubi_center_logo(fig)

    return fig
    

DARK_BLUE = &quot;#1565C0&quot;
GRAY = &quot;#9E9E9E&quot;
DARK_GREEN = &quot;#388E3C&quot;
LIGHT_GREEN = &quot;#66BB6A&quot;
CONFIG = {&quot;displayModeBar&quot;: False}

fig = line_graph(
    df=summary,
    x=&quot;monthly_ubi&quot;,
    y=&quot;poverty_rate&quot;,
    color=&quot;race&quot;,
    title=&quot;Black and White poverty rate by UBI amount&quot;,
    xaxis_title=&quot;Monthly universal basic income funded by flat income tax&quot;,
    yaxis_title=&quot;SPM poverty rate (2019)&quot;,
    color_discrete_map={&quot;White&quot;: GRAY, &quot;Black&quot;: DARK_BLUE},
    yaxis_ticksuffix=&quot;%&quot;,
    yaxis_tickprefix=&quot;&quot;,
)
fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f1() {
  var x = document.getElementById(&quot;asset_code_1&quot;);
  var b = document.getElementById(&quot;button1&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset1&quot;).load(&quot;/assets/markdown_assets/racial-poverty-disparities-mlk-day-2021/2021-01-18-racial-poverty-disparities-mlk-day-2021-asset-1.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset1&quot;&gt;&lt;/div&gt;

&lt;p&gt;The poverty rate only tells part of the story, though.
When someone goes from deep in poverty to just below the poverty line, the poverty rate is left unchanged, despite the person’s material conditions improving.&lt;/p&gt;

&lt;p&gt;An alternative measure is the &lt;em&gt;poverty gap&lt;/em&gt;, which aggregates each household’s difference between its resources and its poverty threshold. This counts improvements of people who remain in poverty, and can be thought of as the total amount of money required to lift everyone out of poverty, if that money could be perfectly targeted.&lt;/p&gt;

&lt;p&gt;Applying this measure and adjusting for population differences, the Black poverty gap exceeds the White poverty gap by 50 percent: $654 per person, vs. $434 per person.
Given a $250 monthly UBI, which cuts poverty rates in half, poverty gaps also fall by about half, and the difference falls such that the Black poverty gap is about 36 percent higher.
For UBIs above $600 per month, the Black poverty gap even falls below the White poverty gap, likely due to Black people living in areas with lower-cost housing.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button2&quot; onclick=&quot;f2()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_2&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
fig = line_graph(
    df=summary,
    x=&quot;monthly_ubi&quot;,
    y=&quot;poverty_gap_per_capita&quot;,
    color=&quot;race&quot;,
    title=&quot;Black and White poverty gap per capita by UBI amount&quot;,
    xaxis_title=&quot;Monthly universal basic income funded by flat income tax&quot;,
    yaxis_title=&quot;Poverty gap per capita (2019)&quot;,
    color_discrete_map={&quot;White&quot;: GRAY, &quot;Black&quot;: DARK_BLUE},
    yaxis_ticksuffix=&quot;&quot;,
    yaxis_tickprefix=&quot;$&quot;,
)
fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f2() {
  var x = document.getElementById(&quot;asset_code_2&quot;);
  var b = document.getElementById(&quot;button2&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset2&quot;).load(&quot;/assets/markdown_assets/racial-poverty-disparities-mlk-day-2021/2021-01-18-racial-poverty-disparities-mlk-day-2021-asset-2.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset2&quot;&gt;&lt;/div&gt;

&lt;p&gt;Viewing these together, it’s clear that UBIs don’t only reduce poverty rates and poverty gaps for both races, but also bring them closer together, reducing racial disparities in poverty.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button3&quot; onclick=&quot;f3()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_3&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
fig = line_graph(
    df=ratios,
    x=&quot;monthly_ubi&quot;,
    y=&quot;value&quot;,
    color=&quot;variable&quot;,
    title=&quot;Black poverty relative to White poverty by UBI amount&quot;,
    xaxis_title=&quot;Monthly universal basic income funded by flat income tax&quot;,
    yaxis_title=&quot;Ratio of Black to White poverty measure (2019)&quot;,
    color_discrete_map={&quot;Poverty rate&quot;: LIGHT_GREEN,
                        &quot;Poverty gap per capita&quot;: DARK_GREEN},
    yaxis_ticksuffix=&quot;&quot;,
    yaxis_tickprefix=&quot;&quot;,
)
fig.add_hline(1, line_dash=&quot;dot&quot;)
fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f3() {
  var x = document.getElementById(&quot;asset_code_3&quot;);
  var b = document.getElementById(&quot;button3&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset3&quot;).load(&quot;/assets/markdown_assets/racial-poverty-disparities-mlk-day-2021/2021-01-18-racial-poverty-disparities-mlk-day-2021-asset-3.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset3&quot;&gt;&lt;/div&gt;

&lt;p&gt;Dr. King didn’t live to see today’s renaissance of guaranteed income, with pandemic responses including &lt;a href=&quot;https://www.cbsnews.com/news/stimulus-check-600-2000-dollars-eligibility-2021-1-1/&quot;&gt;generous unconditional cash transfers&lt;/a&gt;, &lt;a href=&quot;http://mayorsforagi.org&quot;&gt;mayors across America&lt;/a&gt; calling for pilots, and &lt;a href=&quot;https://www.express.co.uk/news/politics/1316702/nicola-sturgeon-news-scotland-ubi-Universal-Basic-Income-SNP-latest-economy&quot;&gt;leaders across the world&lt;/a&gt; embracing the idea.
But our analysis validates his intuition and the intertwining of his racial justice and economic justice emphases: guaranteed income will produce not only a less impoverished world, but also a less racially disparate one.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:modeling&quot;&gt;
      &lt;p&gt;Data was gathered from the US Census Bureau’s March Supplement, which covers economic circumstances in 2019. We use the Supplemental Poverty Measure, which incorporates taxes and transfers (including in-kind benefits like SNAP), and adjusts for local housing costs. The flat income tax is applied on positive adjusted gross income. We calculate per-capita poverty gaps by race as the total poverty gap of SPM units with at least one person of that race, divided by the number of people in SPM units with at least one person of that race. &lt;a href=&quot;#fnref:modeling&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>[&quot;max&quot;, &quot;connor&quot;, &quot;nate&quot;]</name>
        
        
      </author>

      

      
        <category term="us" />
      
        <category term="race" />
      
        <category term="poverty" />
      

      
        <summary type="html">$600 per month or more would end one measure of the Black-White poverty disparity.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Basic income can make switching to a flat income tax progressive</title>
      <link href="/us-flat-tax" rel="alternate" type="text/html" title="Basic income can make switching to a flat income tax progressive" />
      <published>2020-12-30T00:00:00+00:00</published>
      <updated>2020-12-30T00:00:00+00:00</updated>
      <id>/us-flat-tax</id>
      <content type="html" xml:base="/us-flat-tax">&lt;head&gt;
  &lt;script src=&quot;https://cdn.plot.ly/plotly-latest.min.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;p&gt;The current US income tax code taxes different types of incomes at different rates, includes an array of credits and deductions that primarily benefit the &lt;a href=&quot;https://fivethirtyeight.com/features/the-tax-deductions-economists-hate/&quot;&gt;upper and middle class&lt;/a&gt;, and requires Americans to spend &lt;a href=&quot;https://www.washingtonpost.com/wp-srv/politics/documents/economy082710.pdf&quot;&gt;billions of hours and dollars&lt;/a&gt; filing taxes each year.
A &lt;a href=&quot;https://www.pewresearch.org/fact-tank/2016/04/06/the-biggest-u-s-tax-breaks/&quot;&gt;2015 Pew survey&lt;/a&gt; found that 66 percent of Republicans and 48 percent of Democrats support completely changing the tax system.
While there are many ways to reform the tax code, a simple way is taxing every dollar at the same rate; this is often called a “flat tax.”
In this paper, we examine the impact of replacing today’s system with a budget-neutral combination of flat income taxes and universal basic incomes (UBIs).&lt;/p&gt;

&lt;h2 id=&quot;us-flat-tax-simulations&quot;&gt;US flat tax simulations&lt;/h2&gt;

&lt;p&gt;We simulated the effect of replacing the current federal income tax code and employee side payroll tax with a flat tax over a range of rates.
We allocated any excess revenue to a UBI to make each reform budget-neutral, and filled budget shortfalls with a head tax (equal tax amount per person, essentially a negative UBI). &lt;sup id=&quot;fnref:modeling&quot;&gt;&lt;a href=&quot;#fn:modeling&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;A flat tax of approximately 18 percent would raise the same amount of revenue as federal income taxes and employee side payroll do today.
Each percentage point of flat tax raises enough revenue to fund a UBI of $360 per year for each adult and child.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button1&quot; onclick=&quot;f1()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_1&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import microdf as mdf
import statsmodels.api as sm
import stargazer.stargazer as sg
from pandas_datareader import wb


summary = pd.read_csv(&quot;data/summary.csv&quot;)


BLUE = &quot;#1976D2&quot;
DARK_BLUE = &quot;#1565C0&quot;
LIGHT_BLUE = &quot;#90CAF9&quot;
GRAY = &quot;#BDBDBD&quot;
CONFIG = {&quot;displayModeBar&quot;: False}

def add_ubi_center_watermark(fig, x, y=-0.14):
    fig.add_layout_image(
        dict(
            source=&quot;https://raw.githubusercontent.com/UBICenter/blog/master/jb/_static/ubi_center_logo_wide_blue.png&quot;,
            # See https://github.com/plotly/plotly.py/issues/2975.
            # source=&quot;../_static/ubi_center_logo_wide_blue.png&quot;,
            xref=&quot;paper&quot;, yref=&quot;paper&quot;,
            x=x, y=y,
            sizex=0.12, sizey=0.12,
            xanchor=&quot;right&quot;, yanchor=&quot;bottom&quot;
        )
    )

fig = px.line()

fig.add_trace(
    go.Scatter(
        x=summary.flat_tax,
        y=summary.ubi.round(),
        mode=&quot;markers+lines&quot;,
        name=&quot;UBI (head tax)&quot;,
        line=dict(color=BLUE, width=2),
    )
)

fig.add_shape(
    type=&quot;line&quot;, line=dict(dash=&quot;dot&quot;, color=&quot;gray&quot;), x0=-1, x1=50, y0=0, y1=0
)

fig.update_xaxes(
    tickangle=0,
    title_text=&quot;Flat tax rate&quot;,
    tickfont={&quot;size&quot;: 14},
    title_standoff=25,
    ticksuffix=&quot;%&quot;,
    tickprefix=&quot;&quot;,
)

fig.update_yaxes(
    title_text=&quot;Budget-neutral annual UBI (head tax)&quot;,
    tickprefix=&quot;$&quot;,
    tickfont={&quot;size&quot;: 14},
    title_standoff=25,
)

fig.update_xaxes(title_font=dict(size=16, color=&quot;black&quot;))
fig.update_yaxes(title_font=dict(size=16, color=&quot;black&quot;))
fig.update_layout(
    title_text=&quot;Budget-neutral UBI (head tax) by flat tax rate&quot;,
    hoverlabel_align=&quot;right&quot;,
    font_family=&quot;Roboto&quot;,
    title_font_size=20,
)

add_ubi_center_watermark(fig, 0.98)

fig.update_layout(plot_bgcolor=&quot;white&quot;, hovermode=&quot;x&quot;)
fig.update_layout(legend=dict(yanchor=&quot;top&quot;, y=0.99, xanchor=&quot;left&quot;, x=0.8))
fig.update_traces(mode=&quot;markers+lines&quot;)

fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f1() {
  var x = document.getElementById(&quot;asset_code_1&quot;);
  var b = document.getElementById(&quot;button1&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset1&quot;).load(&quot;/assets/markdown_assets/us-flat-tax/2020-12-30-us-flat-tax-asset-1.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset1&quot;&gt;&lt;/div&gt;

&lt;p&gt;This replacement would increase the poverty rate by 37 percent, increase the poverty gap (the dollar amount needed to lift everyone above the poverty line) by 23 percent, and increase inequality (as measured by the Gini index of resources per person) by 7 percent.&lt;/p&gt;

&lt;p&gt;Maintaining current levels of poverty and inequality requires a higher tax rate to raise funds for a UBI.
A 21 percent flat tax, which would give each person $1,200 per year, would maintain the current poverty gap; a rate and poverty gap; a 22 percent tax giving each person about $1,600 per year would maintain the current poverty rate; a 23 percent tax giving each person about $1,900 would maintain current inequality.&lt;/p&gt;

&lt;p&gt;Higher taxes funding more generous UBIs reduce poverty and inequality to a greater degree.
A flat tax of 30 percent would fund a UBI (including children) of nearly $4,500—cutting poverty in half and inequality by 9 percent.
Going up to 50 percent funds a $1,000 monthly UBI, leaving the poverty rate at a tenth of its currently level and cutting inequality by a third.&lt;/p&gt;

&lt;p&gt;The chart below shows how different flat tax rates up to 50 percent would impact poverty and inequality (the hover function shows the corresponding head tax or UBI for each reform).&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button2&quot; onclick=&quot;f2()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_2&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
def trace(col, chg_col, name, string, color):
    &quot;&quot;&quot;
    Args:
        col: Column name.
        chg_col: Column name of change.
        name: Name of column for printing.
        string: Formatting of customdata[1].
        color: Line color.
    &quot;&quot;&quot;
    fig.add_trace(
        go.Scatter(
            x=summary.flat_tax,
            y=summary[chg_col],
            mode=&quot;markers+lines&quot;,
            name=name,
            line=dict(color=color, width=2),
            customdata=np.stack((summary.ubi, summary[col]), axis=-1),
            hovertemplate=&quot;&lt;br /&gt;Flat tax: %{x}&lt;br /&gt;&quot;
            + &quot;UBI (head tax): $%{customdata[0]: .0f}&lt;br /&gt;&quot;
            + name
            + &quot;: &quot;
            + string
            + &quot;&lt;br /&gt;&quot;
            + &quot;Percent change: %{y:.0f}%&lt;br /&gt;&quot;,
            marker=dict(size=5),
        )
    )


fig = px.line()
trace(
    &quot;poverty_rate&quot;,
    &quot;change_poverty_rate&quot;,
    &quot;Poverty rate&quot;,
    &quot;%{customdata[1]: .1f}%&quot;,
    DARK_BLUE,
)
trace(
    &quot;poverty_gap_billions&quot;,
    &quot;change_poverty_gap&quot;,
    &quot;Poverty gap&quot;,
    &quot;$%{customdata[1]: .0f}B&quot;,
    LIGHT_BLUE,
)
trace(&quot;gini&quot;, &quot;change_gini&quot;, &quot;Gini index&quot;, &quot;%{customdata[1]}&quot;, GRAY)


fig.update_xaxes(
    tickangle=0,
    title_text=&quot;Flat tax rate&quot;,
    tickfont={&quot;size&quot;: 14},
    title_standoff=25,
    ticksuffix=&quot;%&quot;,
    tickprefix=&quot;&quot;,
    range=[-2, 51],
)

fig.update_yaxes(
    title_text=&quot;Percent change&quot;,
    ticksuffix=&quot;%&quot;,
    tickfont={&quot;size&quot;: 14},
    title_standoff=25,
    range=[-101, 301],
)

fig.update_xaxes(title_font=dict(size=16, color=&quot;black&quot;))
fig.update_yaxes(title_font=dict(size=16, color=&quot;black&quot;))
fig.update_layout(
    title_text=(
        &quot;Replacing employee side FICA and federal income taxes with &quot;
        &quot;a flat tax and UBI (head tax)&quot;
    ),
    title_font_size=20,
    hoverlabel_align=&quot;right&quot;,
    font_family=&quot;Roboto&quot;,
)

add_ubi_center_watermark(fig, 1.01)

fig.update_layout(plot_bgcolor=&quot;white&quot;, hovermode=&quot;x&quot;)
fig.update_yaxes(zeroline=True, zerolinewidth=2, zerolinecolor=&quot;black&quot;)
fig.update_layout(legend=dict(yanchor=&quot;top&quot;, y=0.99, xanchor=&quot;left&quot;, x=0.75))

fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f2() {
  var x = document.getElementById(&quot;asset_code_2&quot;);
  var b = document.getElementById(&quot;button2&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset2&quot;).load(&quot;/assets/markdown_assets/us-flat-tax/2020-12-30-us-flat-tax-asset-2.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset2&quot;&gt;&lt;/div&gt;

&lt;p&gt;From the point of the flat tax producing a UBI (18 percent), higher rates lead to more Americans benefiting on a net basis.
Replacing today’s taxes on individual income with a 28 percent flat tax would give each person about $3,700 per year, benefiting the majority of Americans.
The share that come out ahead levels off around 60 percent, with flat taxes of 40 percent or more.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button3&quot; onclick=&quot;f3()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_3&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
fig = px.line()

fig.add_trace(
    go.Scatter(
        x=summary.flat_tax,
        y=summary.percent_better_off,
        mode=&quot;markers+lines&quot;,
        name=&quot;&quot;,
        line=dict(color=BLUE, width=2),
        customdata=np.stack(
            (summary.ubi, summary.percent_better_off), axis=-1
        ),
        hovertemplate=&quot;&lt;br /&gt;Flat tax: %{x}&lt;br /&gt;&quot;
        # TODO: Adapt &quot;UBI&quot; vs &quot;head tax&quot; for value.
        + &quot;UBI (head tax): $%{customdata[0]: .0f}&lt;br /&gt;&quot;
        + &quot;Share better off: %{y:.0f}%&lt;br /&gt;&quot;,
        marker=dict(size=5),
    )
)

fig.add_shape(
    type=&quot;line&quot;,
    line=dict(dash=&quot;dot&quot;, color=&quot;gray&quot;),
    x0=-1,
    x1=50,
    y0=50,
    y1=50,
)

fig.update_xaxes(
    tickangle=0,
    title_text=&quot;Flat tax rate&quot;,
    tickfont={&quot;size&quot;: 14},
    title_standoff=25,
    ticksuffix=&quot;%&quot;,
    tickprefix=&quot;&quot;,
)

fig.update_yaxes(
    title_text=&quot;&quot;,
    ticksuffix=&quot;%&quot;,
    tickfont={&quot;size&quot;: 14},
    title_standoff=25,
    tickvals=[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],
    range=[20, 80],
)

fig.update_xaxes(title_font=dict(size=16, color=&quot;black&quot;))
fig.update_yaxes(title_font=dict(size=16, color=&quot;black&quot;))
fig.update_layout(
    title_text=(
        &quot;Share of people who gain from switching to a flat tax and &quot;
        &quot;UBI (head tax)&quot;
    ),
    title_font_size=20,
    hoverlabel_align=&quot;right&quot;,
    font_family=&quot;Roboto&quot;,
)

add_ubi_center_watermark(fig, 0.98)

fig.update_layout(plot_bgcolor=&quot;white&quot;, height=600, width=1000, hovermode=&quot;x&quot;)
fig.update_layout(legend=dict(yanchor=&quot;top&quot;, y=0.99, xanchor=&quot;left&quot;, x=0.8))
fig.update_traces(mode=&quot;markers+lines&quot;)

fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f3() {
  var x = document.getElementById(&quot;asset_code_3&quot;);
  var b = document.getElementById(&quot;button3&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset3&quot;).load(&quot;/assets/markdown_assets/us-flat-tax/2020-12-30-us-flat-tax-asset-3.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset3&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;generous-transfers-are-the-key-to-inequality-reduction&quot;&gt;Generous transfers are the key to inequality reduction&lt;/h2&gt;

&lt;p&gt;Labor markets don’t explain the unusually high level of inequality in the United States, third only to Chile and Mexico among developed countries.
For example, the US has similar “market income” inequality as France, Germany, and Finland—each with Gini indexes of 0.50 to 0.51, as shown in the right bars of this graph from &lt;a href=&quot;https://ourworldindata.org/income-inequality&quot;&gt;Our World In Data&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/inequality-of-incomes-before-and-after-taxes-and-transfers.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What’s unusual about the US is how little its government reduces inequality through redistribution.
While France, Germany, and Finland reduce inequality by 0.21, 0.22, and 0.24 on the Gini scale, the US only reduces it by 0.12.&lt;/p&gt;

&lt;p&gt;What mechanisms do these other countries utilize to cut inequality twice as much as the US?
Counterintuitively, it’s not progressive taxation—the US actually has the most progressive tax code in the OECD,&lt;sup id=&quot;fnref:progressive-tax&quot;&gt;&lt;a href=&quot;#fn:progressive-tax&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; and tax progressivity does not correlate significantly to inequality reduction (if anything the relationship is slightly negative).&lt;sup id=&quot;fnref:inequality-data&quot;&gt;&lt;a href=&quot;#fn:inequality-data&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button4&quot; onclick=&quot;f4()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_4&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# Get data.
pop = wb.download(indicator=&quot;SP.POP.TOTL&quot;,
                  country='all', start=2014, 
                  end=2014).reset_index().drop('year', axis=1)
pop.rename({&quot;SP.POP.TOTL&quot;: &quot;population&quot;}, axis=1, inplace=True)
# Align countries with Our World In Data and current convention.
pop.country.replace({&quot;Czech Republic&quot;: &quot;Czech Rep.&quot;,
                     &quot;Slovak Republic&quot;: &quot;Slovakia&quot;,
                     &quot;Korea, Rep.&quot;: &quot;South Korea&quot;},
                     inplace=True)

oecd_raw = pd.read_csv(&quot;data/oecd_growing_unequal_2008_table_4_6.csv&quot;)
# Align countries with Our World In Data and current convention.
oecd_raw.country.replace({&quot;Korea&quot;: &quot;South Korea&quot;,
                          &quot;Slovak Rep.&quot;: &quot;Slovakia&quot;},
                         inplace=True)
owid = pd.read_csv(&quot;data/inequality_pre_post_redistribution.csv&quot;)
owid[&quot;gini_diff&quot;] = owid.gini_market - owid.gini_disposable
oecd = oecd_raw.merge(owid, on=&quot;country&quot;).merge(pop, on=&quot;country&quot;)
oecd[&quot;sqrt_pop&quot;] = np.sqrt(oecd.population)

LABELS = {&quot;gini_diff&quot;:
          &quot;Gini reduction via taxes and transfers&quot;,
          &quot;household_taxes_concentration&quot;:
          &quot;Household tax concentration index&quot;,
          &quot;public_cash_transfers_income_share&quot;:
          &quot;Cash transfer share of household income&quot;,
          &quot;population&quot;:
          &quot;Population&quot;,
          &quot;household_taxes_income_share&quot;:
          &quot;Tax share of household income&quot;
         }

# Make plot.
def ineq_scatter(x, xtitle, title, logo_x=1):
    fig = px.scatter(oecd, x=x, y=&quot;gini_diff&quot;, hover_name=&quot;country&quot;,
                     size=&quot;sqrt_pop&quot;, #trendline=&quot;ols&quot;,
                     labels=LABELS,
                     size_max=30)
    # Remove sqrt_pop from hover template.
    hovertemplate = (&quot;&lt;b&gt;%{hovertext}&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&quot; +
                     LABELS[x] + &quot;=%{x}&lt;br /&gt;&quot;
                     &quot;Gini reduction via taxes and transfers=%{y}&quot;)
    fig.update_traces(hovertemplate=hovertemplate)
    fig.update_layout(
        title_text=title,
        title_font_size=20,
        font_family=&quot;Roboto&quot;,
    )

    fig.update_xaxes(
        tickangle=0,
        title_text=xtitle,
        tickfont={&quot;size&quot;: 14},
        title_standoff=25,
        ticksuffix=&quot;&quot;,
        tickprefix=&quot;&quot;,
    )

    fig.update_yaxes(
        title_text=&quot;Difference between market and disposable income Gini index&quot;,
        ticksuffix=&quot;&quot;,
        tickfont={&quot;size&quot;: 14},
        title_standoff=25,
    )
    if x == &quot;public_cash_transfers_income_share&quot;:
        fig.update_xaxes(ticksuffix=&quot;%&quot;)

    fig.update_xaxes(title_font=dict(size=16, color=&quot;black&quot;))
    fig.update_yaxes(title_font=dict(size=16, color=&quot;black&quot;))

    add_ubi_center_watermark(fig, x=logo_x, y=-0.17)

    fig.update_layout(plot_bgcolor=&quot;white&quot;)

    return fig
    
fig = ineq_scatter(x=&quot;household_taxes_concentration&quot;,
             xtitle=&quot;Household tax concentration index&quot;,
             title=&quot;Tax progressivity and inequality reduction in the OECD&quot;)
fig.show()
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f4() {
  var x = document.getElementById(&quot;asset_code_4&quot;);
  var b = document.getElementById(&quot;button4&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset4&quot;).load(&quot;/assets/markdown_assets/us-flat-tax/2020-12-30-us-flat-tax-asset-4.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset4&quot;&gt;&lt;/div&gt;

&lt;p&gt;A stronger correlate of inequality reduction is the generosity of public cash transfers.
The countries that distribute a higher share of household income as cash transfers generally cut inequality more.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button5&quot; onclick=&quot;f5()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_5&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
fig = ineq_scatter(x=&quot;public_cash_transfers_income_share&quot;,
             xtitle=&quot;Public cash transfers / household disposable income&quot;,
             title=&quot;Cash transfer generosity and inequality reduction in the OECD&quot;,
             logo_x=0.95)
fig.show()
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f5() {
  var x = document.getElementById(&quot;asset_code_5&quot;);
  var b = document.getElementById(&quot;button5&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset5&quot;).load(&quot;/assets/markdown_assets/us-flat-tax/2020-12-30-us-flat-tax-asset-5.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset5&quot;&gt;&lt;/div&gt;

&lt;p&gt;While overall tax levels also significantly correlate with inequality reduction, the effect vanishes when controlling for cash transfers, as shown in column 4 of the regression table below.
Cash transfers are consistently the dominant predictor of the extent to which governments reduce inequality.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button6&quot; onclick=&quot;f6()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_6&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
oecd = sm.add_constant(oecd)

def gini_reg(x, weighted=True):
    if weighted:
        m = sm.WLS(oecd.gini_diff, oecd[x + [&quot;const&quot;]], oecd.population)
    else:
        m = sm.WLS(oecd.gini_diff, oecd[x + [&quot;const&quot;]])
    return m.fit(cov_type=&quot;HC1&quot;)  # Robust standard errors.

cash_m = gini_reg([&quot;public_cash_transfers_income_share&quot;])
tax_prog_m = gini_reg([&quot;household_taxes_concentration&quot;])
tax_level_m = gini_reg([&quot;household_taxes_income_share&quot;])
combined_m = gini_reg([&quot;household_taxes_concentration&quot;,
                       &quot;household_taxes_income_share&quot;,
                       &quot;public_cash_transfers_income_share&quot;])

def starg(models, covariate_order=None):
    &quot;&quot;&quot; Creates formatted Stargazer object.
    &quot;&quot;&quot;
    star = sg.Stargazer(models)
    if covariate_order is not None:
        star.covariate_order(covariate_order)
    star.rename_covariates(LABELS)
    star.show_adj_r2 = False
    star.show_residual_std_err = False
    star.show_f_statistic = False
    return star


star = starg([cash_m, tax_level_m, tax_prog_m, combined_m],
             [&quot;public_cash_transfers_income_share&quot;,
              &quot;household_taxes_income_share&quot;,
              &quot;household_taxes_concentration&quot;,
              ])
star.add_custom_notes([&quot;Weighted by population. Robust SEs.&quot;])
star.title(&quot;Inequality reduction and tax levels, tax progressivity, and cash &quot;
           &quot;transfers&quot;)
star
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f6() {
  var x = document.getElementById(&quot;asset_code_6&quot;);
  var b = document.getElementById(&quot;button6&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset6&quot;).load(&quot;/assets/markdown_assets/us-flat-tax/2020-12-30-us-flat-tax-asset-6.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset6&quot;&gt;&lt;/div&gt;

&lt;p&gt;This cross-country picture aligns with our simulations: larger UBIs cut inequality more, and even if the tax system that funds those larger UBIs isn’t progressive, ability to fund the UBI is what matters.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Beyond their simplicity, flat taxes have a number of theoretical advantages.
Progressive tax structures necessarily encourage shifting income from one year to the next as well as &lt;a href=&quot;https://www.cbo.gov/sites/default/files/105th-congress-1997-1998/reports/marriage.pdf&quot;&gt;marriage, divorce, or both&lt;/a&gt;.&lt;sup id=&quot;fnref:marriage&quot;&gt;&lt;a href=&quot;#fn:marriage&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;
Flat taxes treat income neutrally, regardless of when it was earned, by whom, or earners’ family choices.
And because they align marginal tax rates (which determine labor incentives) with effective tax rates (which determine revenue), they raise revenue with relatively little work disincentive.
For example, a &lt;a href=&quot;https://www.nber.org/papers/w27622&quot;&gt;2020 paper&lt;/a&gt; from the National Bureau of Economic Research found that “a uniform flat tax on capital and labor income combined with a lump-sum transfer is nearly optimal.”&lt;/p&gt;

&lt;p&gt;Our simulations and cross-country comparisons show that these advantages don’t need to come at the cost of progressivity; if anything, they may enhance progressivity.
Even a 30 percent flat income tax, with excess revenue distributed as UBI, could cut poverty in half, reduce inequality by 10 percent, and leave most Americans better off.
To achieve the egalitarianism of other developed countries, the US should focus less on progressive taxation, and more on how to raise enough revenue to distribute it broadly, effectively, and generously.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:modeling&quot;&gt;
      &lt;p&gt;We replaced all elements of the personal income tax code, including refundable tax credits, but we retained benefit programs. The analysis is fully static; we did not model changes to labor supply resulting from the changes to marginal tax rates and incomes. We used the Current Population Survey (CPS) March Supplement reflecting income from 2019. The Census Bureau estimates tax liabilities using a microsimulation model, but income and taxes are known to be under-reported in the CPS. &lt;a href=&quot;#fnref:modeling&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:progressive-tax&quot;&gt;
      &lt;p&gt;As of 2005, the US had the most progressive tax code of any OECD country according to the concentration index (as shown in the graph), as well as two alternative measures: the ratio of concentration coefficients of household taxes to the Gini index of market income, and the ratio of the richest decile’s tax share to its market income share (&lt;a href=&quot;https://read.oecd-ilibrary.org/social-issues-migration-health/growing-unequal_9789264044197-en#page108&quot;&gt;Table 4.5&lt;/a&gt; of &lt;em&gt;Growing Unequal?&lt;/em&gt;). &lt;a href=&quot;#fnref:progressive-tax&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:inequality-data&quot;&gt;
      &lt;p&gt;Data on inequality reduction comes from Our World In Data’s analysis of OECD data reflecting the period 2012 to 2014. Data on the concentration index and income shares of household taxes and cash transfers come from Table 4.6 of the OECD’s 2008 report, &lt;a href=&quot;https://read.oecd-ilibrary.org/social-issues-migration-health/growing-unequal_9789264044197-en#page109&quot;&gt;&lt;em&gt;Growing Unequal?&lt;/em&gt;&lt;/a&gt;, which uses data from around 2005. Country population is as of 2014 from the World Bank. Taxes include income taxes and employee social security contributions, not consumption taxes; however, per &lt;a href=&quot;https://read.oecd-ilibrary.org/social-issues-migration-health/growing-unequal_9789264044197-en#page296&quot;&gt;Figure 11.2&lt;/a&gt; in &lt;em&gt;Growing Unequal?&lt;/em&gt;, consumption taxes have a small effect on relative levels of inequality across OECD countries. &lt;a href=&quot;#fnref:inequality-data&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:marriage&quot;&gt;
      &lt;p&gt;Consider, for example, two couples: one with $30,000 earnings each, and another with one earning $60,000 and the spouse earning $0. And consider a progressive tax policy with two rates: 0% (a standard deduction) and 50%. If the standard deduction is $30,000, the first couple has a total tax liability of $15,000 if filing as a couple, but $0 if filing separately—a large marriage bonus (the second couple’s tax liability is $15,000 whether married or separate). If the standard deduction instead varies with marital status, e.g. $15,000 for singles and $30,000 for couples, then the first couple will be treated neutrally, paying $15,000 whether filing separate or married. But now the second couple faces a marriage &lt;em&gt;bonus&lt;/em&gt;, paying $22,500 in taxes if filing separately, but only $15,000  if married. This can be partly remedied by moving to an individualized tax system, as the United Kingdom does, where earnings are taxed independently of a spouse’s earnings. But couples will still have joint assets, and therefore face marriage penalties or bonuses on their capital income if capital income is taxed progressively. Only a flat tax avoids marriage penalties or bonuses. &lt;a href=&quot;#fnref:marriage&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>[&quot;nate&quot;, &quot;max&quot;]</name>
        
        
      </author>

      

      
        <category term="us" />
      
        <category term="tax" />
      

      
        <summary type="html">Flat tax rates of 25 percent or more would reduce poverty and inequality.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Our new child allowance project</title>
      <link href="/child-allowance-project" rel="alternate" type="text/html" title="Our new child allowance project" />
      <published>2020-11-25T00:00:00+00:00</published>
      <updated>2020-11-25T00:00:00+00:00</updated>
      <id>/child-allowance-project</id>
      <content type="html" xml:base="/child-allowance-project">&lt;head&gt;
  &lt;script src=&quot;https://cdn.plot.ly/plotly-latest.min.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;p&gt;&lt;em&gt;See the full project at &lt;a href=&quot;https://child-allowance.ubicenter.org&quot;&gt;child-allowance.ubicenter.org&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;1 in 7 children in the United States lives in poverty, &lt;a href=&quot;https://heckmanequation.org/resource/invest-in-early-childhood-development-reduce-deficits-strengthen-the-economy/&quot;&gt;raising&lt;/a&gt; stress and crime rates, &lt;a href=&quot;https://www.sciencedirect.com/science/article/abs/pii/S1876285915003836&quot;&gt;worsening&lt;/a&gt; educational outcomes, and &lt;a href=&quot;https://www.nap.edu/catalog/25246/a-roadmap-to-reducing-child-poverty&quot;&gt;shrinking&lt;/a&gt; the economy by up to $1 trillion annually. Research shows that giving money to families with children, as &lt;a href=&quot;https://www.vox.com/future-perfect/2019/3/6/18249290/child-poverty-american-family-act-sherrod-brown-michael-bennet&quot;&gt;most developed countries do&lt;/a&gt;, reduces each of these issues. A child allowance is a policy that gives families an equal amount for each child.&lt;/p&gt;

&lt;p&gt;This project examines child allowances through various lenses:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;2020-11-25-child-allowance-state-simulation&quot;&gt;&lt;strong&gt;Simulations&lt;/strong&gt;&lt;/a&gt; quantifying the effects of child allowance policies (deficit- and tax-funded) on poverty and inequality across US states.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://child-allowance.ubicenter.org/empirical&quot;&gt;&lt;strong&gt;Research&lt;/strong&gt;&lt;/a&gt; on the effects of child allowances and similar policies on children, based on randomized controlled trials and other empirical techniques.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://child-allowance.ubicenter.org/policies&quot;&gt;&lt;strong&gt;Policy context&lt;/strong&gt;&lt;/a&gt; of existing US child benefits and child allowances in other countries.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, this interactive map is one of several visualizations in our &lt;a href=&quot;2020-11-25-child-allowance-state-simulation&quot;&gt;simulations page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button1&quot; onclick=&quot;f1()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_1&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# TODO: Add tax reforms as a drop-down (mirrored from simulation.ipynb).

# Imports.
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# Load data.
summary = pd.read_csv('https://github.com/ngpsu22/Child_Allowance_States/raw/main/poverty_gini_tax_child_allowance')

# General configs.
LABELS = {'monthly_ca': 'Monthly child allowance',
          'decile': 'Decile',
          'net_chg': 'Net change',
          'pct_chg': 'Net change',
          'child_allowance':'Monthly child allowance',
          'code': 'State',
          'state': 'State',
          'fed_tax_rate': 'Tax rate',
          'state_tax_rate': 'Tax rate',
          'non_funded_poverty_rate': 'Poverty rate',
          'fed_poverty_rate': 'Poverty rate',
          'state_poverty_rate': 'Poverty rate',
          'non_funded_gini': 'Gini index',
          'fed_gini': 'Gini index',
          'state_gini': 'Gini index'}

CONFIG = {'displayModeBar': False}

# Preprocess data.
summary.drop('Unnamed: 0', 1, inplace = True)
state_dict = summary[['code', 'state']].set_index('code').to_dict()['state']

# data labels
FUNDING = {'fed_poverty_rate': 'Federal tax',
           'state_poverty_rate': 'State tax',
           'non_funded_poverty_rate': 'No funding'}

ca_amts = summary.child_allowance.unique()
child_poverty = summary[(summary['age_group'] == 'child') &amp;amp;
                        (summary['race'] == 'All')]

# create figure dictionary
fig_dict = {
    'data': [],
    'layout': {},
    'frames': []
}

# fill in most of layout
fig_dict['layout'] = {
    'plot_bgcolor': 'white',
    'font': dict(family = 'Roboto'),
    'height': 600,
    'margin': dict(t=100, b=0, l=0, r=10)
}
fig_dict['layout']['title'] = {
    'text': ('Child poverty by state and child allowance amount'),
    'y': 0.97,
    'x': 0.05,
    'xanchor': 'left',
    'yanchor': 'top'
}

# add slider specifications
slidermenu =  {
    'buttons': [
        {
            'args': [None, {'frame': {'duration': 500, 'redraw': True},
                            'fromcurrent': True,
                            'transition': {'duration': 300,
                                           'easing': 'quadratic-in-out'}}],
            'label': '&amp;#9654;',
            'method': 'animate'
        },
        {
            &quot;args&quot;: [[None], {&quot;frame&quot;: {&quot;duration&quot;: 0, &quot;redraw&quot;: True},
                              &quot;mode&quot;: &quot;immediate&quot;,
                              &quot;transition&quot;: {&quot;duration&quot;: 0}}],
            &quot;label&quot;: &quot;&amp;#9724;&quot;,
            &quot;method&quot;: &quot;animate&quot;
        }
    ],
    'direction': 'left',
    'pad': {'r': 15, 't': 75},
    'showactive': True,
    'type': 'buttons',
    'x': 0.1,
    'xanchor': 'right',
    'y': 0,
    'yanchor': 'top'
}
    
sliders_dict = {
    'active': 0,
    'yanchor': 'top',
    'xanchor': 'left',
    'currentvalue': {
        'font': {'size': 20},
        'prefix': 'Monthly child allowance: ',
        'visible': True,
        'xanchor': 'right'
    },
    'transition': {'duration': 300, 'easing': 'cubic-in-out'},
    'pad': {'b': 10, 't': 50},
    'len': 0.9,
    'x': 0.1,
    'y': 0,
    'steps': []
}

steps = []
for ca in ca_amts:
    slider_step = {
        'args': [
            [ca],
            {'frame': {'duration': 300, 'redraw': True},
             'mode': 'immediate',
             'transition': {'duration': 300}}
        ],
        'label': '$' + str(ca),
        'method': 'animate'
    }
    steps.append(slider_step)
sliders_dict['steps'] = steps

# generate frames
frames = []
locations = child_poverty.code
zero_poverty = child_poverty[child_poverty.child_allowance == 0]
for ca in ca_amts:
    data_list = []
    ca_data = child_poverty[child_poverty.child_allowance == ca]
    for funding in FUNDING:
        data_list.append({
            'hovertemplate': 
                '&lt;b&gt;%{customdata[1]}&lt;/b&gt;' + 
                '&lt;br /&gt;Child poverty rate: %{z}%&lt;br /&gt;' + 
                'Poverty reduction: %{customdata[0]}%' +
                '&lt;extra&gt;&lt;/extra&gt;',
            'locationmode': 'USA-states',
            'locations': child_poverty.code.unique(),
            'z': ca_data[funding].tolist(),
            'type': 'choropleth',
            'customdata': list(map(lambda x, y, z: (round(100 * (1 - y / x)), state_dict[z]),
                                   zero_poverty[funding], ca_data[funding], state_dict))
        })
    
    frame = {'data': data_list, 'name': str(ca), 'traces': [0,1,2]}
    frames.append(frame)
    
# add frames to figure dictionary
fig_dict['frames'] = frames

# add traces to figure dictionary
for i in (range(len(FUNDING))):
    fig_dict['data'].append(frames[0]['data'][0])

# generate figure
fig = go.Figure(fig_dict)

# generate dropdown menu buttons
buttons = []
for funding in FUNDING:
    new_button = {'method': 'update',
                  'label': FUNDING[funding],
                  'args': [{'visible': [f == funding for f in FUNDING.keys()]}
                          ]}
    buttons.append(new_button)
    
# construct button menu
updatemenu = {'buttons': buttons,
              'direction': 'down',
              'showactive': True,
              'pad':{&quot;r&quot;: 10, 't': 20, 'l': 50},
              'xanchor': 'left',
              'yanchor': 'top',
              'x': 0,
              'y': 1.2
             }

# add slider, dropdown menu, and set geo scope
fig.update_layout(
    geo_scope='usa', # limite map scope to USA
    sliders=[sliders_dict],
    updatemenus=[slidermenu, updatemenu]
)

# update visual attributes
fig.update_traces(showscale=False, colorscale='Reds', zmin=0, zmax=22)
fig.update_layout(
    hoverlabel=dict(
        bgcolor=&quot;white&quot;,
        font=dict(family='Roboto')
    ),
    title_font_size=20,
)
fig.update(layout_showlegend=False)

fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f1() {
  var x = document.getElementById(&quot;asset_code_1&quot;);
  var b = document.getElementById(&quot;button1&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset1&quot;).load(&quot;/assets/markdown_assets/index/2020-11-25-index-asset-1.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset1&quot;&gt;&lt;/div&gt;

&lt;p&gt;We also review the evidence around child allowances from the United States and Canada, and a special deep dive into research from sub-Saharan Africa, where randomized cash transfer rollouts produce particularly high-quality estimates. For example, cash transfer programs consistently reduced consumption poverty (below). See the &lt;a href=&quot;https://child-allowance.ubicenter.org/empirical&quot;&gt;&lt;strong&gt;full paper&lt;/strong&gt;&lt;/a&gt; for evidence across other outcomes like education and health.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button2&quot; onclick=&quot;f2()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_2&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
pov = pd.DataFrame({
    &quot;effect_pp&quot;: [-2.1, -3.9, 3.8, -14.9, -8.3, -4.1, -0.5],
    &quot;baseline_pp&quot;: [93, 88, 68, 82, 44, 94, 92],
    &quot;stars&quot;: [2, 0, 0, 3, 1, 2, 0]
}, index=['Ghana LEAP', 'Kenya HSNP', 'Lesotho CGP', 'Malawi SCTP',
          'Uganda SAGE', 'Zambia CGP', 'Zimbabwe HSCT']
)
pov['pct_effect'] = 100 * pov.effect_pp / pov.baseline_pp
pov['significance'] = pov.stars.map({0: '&amp;gt;10%',
                                     1: '5-10%',
                                     2: '1-5%',
                                     3: '&amp;lt;1%'})
# Sort by stars for proper legend ordering.
pov.sort_values('stars', ascending=False, inplace=True)

DARK_BLUE = '#0D47A1'
BLUE = '#2196F3'
BARELY_BLUE = '#BBDEFB'
GRAY = '#E0E0E0'

fig = px.bar(pov, 'pct_effect', color='significance',
             labels={'pct_effect': 'Poverty change',
                     'index': 'Program',
                     'significance': 'Significance'},
             title='Poverty reductions across cash transfer RCTs in SSA',
             color_discrete_map={'&amp;gt;10%': GRAY,
                                 '5-10%': BARELY_BLUE,
                                 '1-5%': BLUE,
                                 '&amp;lt;1%': DARK_BLUE},
)

fig.update_layout(font=dict(family='Roboto'),
                  plot_bgcolor='white',
                  yaxis_title='Cash transfer program',
                  legend_title='Statistical significance',
                  xaxis_title='Percent change in poverty headcount rate',
                  xaxis_ticksuffix='%',
                  # Sort by effect size
                  # (since data is sorted by stars for legend order)
                  yaxis={'categoryorder':'total descending'},
                  title_font_size=20,
                 )

fig.show(config={'displayModeBar': False})
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f2() {
  var x = document.getElementById(&quot;asset_code_2&quot;);
  var b = document.getElementById(&quot;button2&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset2&quot;).load(&quot;/assets/markdown_assets/index/2020-11-25-index-asset-2.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset2&quot;&gt;&lt;/div&gt;

&lt;p&gt;Finally, we consider the political state of child allowances, such as the &lt;a href=&quot;https://www.bennet.senate.gov/public/index.cfm/american-family-act&quot;&gt;American Family Act&lt;/a&gt;, which would ensure all low-income children in the US receive the full benefits of the Child Tax Credit, and how such a policy would align US child benefits with those from other developed countries.&lt;/p&gt;

&lt;p&gt;By efficiently reducing child poverty, child allowances provide kids with basic needs, improve access to opportunity, and invest in our future.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>[&quot;nate&quot;, &quot;john&quot;, &quot;matt&quot;, &quot;max&quot;]</name>
        
        
      </author>

      

      
        <category term="us" />
      
        <category term="child allowance" />
      

      
        <summary type="html">We're examining universal payments to parents across multiple angles.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">The effect of child allowances across US states</title>
      <link href="/child-allowance-state-simulation" rel="alternate" type="text/html" title="The effect of child allowances across US states" />
      <published>2020-11-25T00:00:00+00:00</published>
      <updated>2020-11-25T00:00:00+00:00</updated>
      <id>/child-allowance-state-simulation</id>
      <content type="html" xml:base="/child-allowance-state-simulation">&lt;head&gt;
  &lt;script src=&quot;https://cdn.plot.ly/plotly-latest.min.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;p&gt;Poverty has a lasting impact on children.  Growing up in poverty increases &lt;a href=&quot;https://heckmanequation.org/resource/invest-in-early-childhood-development-reduce-deficits-strengthen-the-economy/&quot;&gt;stress&lt;/a&gt; and &lt;a href=&quot;https://heckmanequation.org/resource/invest-in-early-childhood-development-reduce-deficits-strengthen-the-economy/&quot;&gt;incarceration rates&lt;/a&gt; and decreases &lt;a href=&quot;https://www.sciencedirect.com/science/article/abs/pii/S1876285915003836&quot;&gt;educational&lt;/a&gt; and &lt;a href=&quot;https://www.aeaweb.org/articles?id=10.1257/app.2.1.86&quot;&gt;health&lt;/a&gt; outcomes.  These negative consequences not only impact the nation’s poor, but the entire economy as well–child poverty shrinks GDP by more than &lt;a href=&quot;https://www.nap.edu/read/25246/chapter/1&quot;&gt;$1 trillion annually&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Research has shown that giving money to families with children, as most developed countries do, can reduce each of these issues.  Programs that provide cash to families with children are called a &lt;em&gt;child allowance&lt;/em&gt;, and are typically paid out on a monthly basis.&lt;/p&gt;

&lt;p&gt;Here you can explore the impact of a potential child allowance of various amounts in each state.
We show impacts across three funding mechanisms:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Federal tax&lt;/strong&gt; as a flat rate on taxable income. For each child allowance amount the total cost is calculated by multiplying the annual child allowance by the total number of children.  To calculate the revenue neutral tax rate, the total cost is divided by the nation’s total taxable income.  For example, a child allowance of $100 per month would cost about $88 billion annually and require a new flat tax of 1.1 percent.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;State tax&lt;/strong&gt; as a flat rate on taxable income. The state tax is calculated in the same manner as the federal tax, but at the state level. This shows how states can fund their own child allowances. Because states vary in child population and income, different states have different tax rates. A $100 monthly child allowance in DC is offset by a 0.5 percent tax on taxable income while the same amount requires a 1.3 percent tax in Alabama.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;No funding&lt;/strong&gt; does not impose any new taxes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These static analyses (they do not consider labor supply effects) are based on data from the Current Population Survey March Supplement representing income from 2017 to 2019, and preserve existing benefits such as the Child Tax Credit.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button1&quot; onclick=&quot;f1()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_1&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# Imports.
import pandas as pd
import numpy as np
import math
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import copy

# Load data.
summary = pd.read_csv('https://github.com/ngpsu22/Child_Allowance_States/raw/main/poverty_gini_tax_child_allowance')

deciles = pd.read_csv('data/deciles.csv')

deciles.funding = deciles.funding.map({'deficit': 'No funding',
                                       'fed': 'Federal tax',
                                       'state': 'State tax'})

# General configs.
LABELS = {'monthly_ca': 'Monthly child allowance',
          'decile': 'Decile',
          'net_chg': 'Net change',
          'pct_chg': 'Net change',
          'child_allowance':'Monthly child allowance',
          'code': 'State',
          'state': 'State',
          'fed_tax_rate': 'Tax rate',
          'state_tax_rate': 'Tax rate',
          'non_funded_poverty_rate': 'Poverty rate',
          'fed_poverty_rate': 'Poverty rate',
          'state_poverty_rate': 'Poverty rate',
          'non_funded_gini': 'Gini index',
          'fed_gini': 'Gini index',
          'state_gini': 'Gini index'}

CONFIG = {'displayModeBar': False}

# Preprocess data.
summary.drop('Unnamed: 0', 1, inplace = True)
tax = summary[(summary.race == 'All') &amp;amp; (summary.age_group == 'all')]

state_names = tax.state.unique()
state_names = np.insert(state_names[:-1], 0, 'US')
default_state = 'US'
state_dict = summary[['code', 'state']].set_index('code').to_dict()['state']

# Colors from https://material.io/design/color/the-color-system.html
DARK_BLUE = '#1565C0'
LIGHT_BLUE = '#42A5F5'
GRAY = '#BDBDBD'
GRAY_SHADOW = '#EEEEEE'
COLOR_MAP = {
    'Federal tax rate': DARK_BLUE,
    'State tax rate': LIGHT_BLUE,
    'Federal tax': DARK_BLUE,
    'State tax': LIGHT_BLUE,
    'No funding': GRAY,
    'No funding, out of poverty': GRAY_SHADOW
}

# data labels
REFORM = {'state_tax_rate': 'State tax rate', 
          'fed_tax_rate': 'Federal tax rate'}

# reformat data
data_list = []
for state in state_names:
    state_data = tax[tax.state == state]
    state_list = []
    for reform in REFORM:
        state_list.append(state_data[reform])
    data_list.append(state_list)

# generate first graph
data_columns = list(REFORM.keys())
data = pd.DataFrame(data_list, columns = data_columns)
data['State'] = state_names
data = data.set_index('State')

def getDataList(state):
    data_list = []
    for dc in data_columns:
        data_list.append(data.loc[state][dc])
    return data_list

# initialize figure
fig = go.Figure()

# add traces
x = tax.child_allowance.unique()
for reform in REFORM:
    fig.add_trace(go.Scatter(
        x=x, 
        y=data[reform][default_state],
        name=REFORM[reform],
        marker = dict(color = COLOR_MAP[REFORM[reform]]),
        hoverlabel = dict(namelength = -1)
#         hovertemplate=
#                 REFORM[reform] + ': %{y}' + 
#                 '&lt;extra&gt;&lt;/extra&gt;',
    ))

# generate buttons
buttons = []
for state in state_names:
    new_button = {'method': 'update',
                  'label': state,
                  'args': [{'y': getDataList(state), 
                            'visible': ['legendonly' if state == 'US' 
                                        else True, True]}
                          ]}
    buttons.append(new_button)
    
# construct menus
updatemenus = [{'buttons': buttons,
                'direction': 'down',
                'showactive': True,
                'pad':{'l': 10, 'r': 25},
               }]

# update layout with buttons, and show the figure
fig.update_layout(updatemenus=updatemenus)

fig.update_xaxes(title_text='Monthly child allowance')

tax_values = tax.state_tax_rate.tolist() + tax.fed_tax_rate.tolist() 
ymin = math.floor(min(tax_values) * 100) / 100 - 0.1
ymax = math.ceil(max(tax_values) * 100) / 100
fig.update_yaxes(title_text='Tax rate on taxable income', range=[ymin, ymax])

fig.update_layout(height=600, 
                  margin=dict(l=0, r=0, t=80, b=0),
                  yaxis_ticksuffix='%',
                  font=dict(family='Roboto'),
                  hovermode='x', 
                  xaxis_tickprefix='$',
                  xaxis_ticksuffix='',
                  plot_bgcolor='white',
                  legend_title_text='',
                  title={
                    'text': 'Income tax required to fund child allowances',
                    'y':0.95,
                    'x':0.01,
                    'xanchor': 'left',
                    'yanchor': 'top'},
                  title_font_size=20,
                 )

fig.update_layout(hovermode=&quot;x unified&quot;)

# hide state tax rate for US only
hide_line = ['State tax rate']
fig.for_each_trace(lambda trace: trace.update(visible=&quot;legendonly&quot;)
                   if trace.name in hide_line else ())

fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f1() {
  var x = document.getElementById(&quot;asset_code_1&quot;);
  var b = document.getElementById(&quot;button1&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset1&quot;).load(&quot;/assets/markdown_assets/simulation/2020-11-25-simulation-asset-1.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset1&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;distributional-effects&quot;&gt;Distributional effects&lt;/h2&gt;

&lt;p&gt;While the new tax would hit most Americans, save the very poorest who earn less than the standard deduction, the overall distributional consequences would be positive.
For instance, the bottom decile would see their average annual resources rise by about $3,700 per person with a federal $300 per month child allowance, while the top 10 percent would see their average resources per person fall by about double, $6,400.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button2&quot; onclick=&quot;f2()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_2&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# make chart symmetric with boundary at the maximum.
boundary = deciles.net_chg.agg([min, max]).abs().max()

# initial data set-up 
x = deciles.decile.unique()
ca_amts = deciles.monthly_ca.unique()
state_names = deciles.state.unique()
state_names = np.insert(state_names[:-1], 0, 'US')
fundings = ['Federal tax', 'State tax', 'No funding']

# get list of bar colors
colors = [COLOR_MAP[i] for i in fundings]

# create figure dictionary
fig_dict = {
    'data': [],
    'layout': {},
    'frames': []
}

# fill in most of layout
fig_dict['layout'] = {
    'plot_bgcolor': 'white',
    'font': dict(family = 'Roboto'),
    'showlegend': True,
    'height': 600,
    'margin': dict(t=100, b=0, l=0, r=0)
}
fig_dict['layout']['title'] = {
    'text': 'Average net change to household income by decile', 
    'y': 0.97,
    'x': 0.05,
    'xanchor': 'left',
    'yanchor': 'top'
}
fig_dict['layout']['xaxis'] = {
    'title': 'Decile of resources per person', 
    'dtick': 1,
    'type': 'category'
}
fig_dict['layout']['yaxis'] = {
    'title': 'Average annual net change per SPM unit', 
    'tickprefix': '$',
    'range': [-boundary, boundary]
}

# add slider specifications
slider_menu =  {
    'buttons': [
        {
            'args': [None, {'frame': {'duration': 500, 'redraw': True},
                            'fromcurrent': True,
                            'transition': {'duration': 300,
                                           'easing': 'quadratic-in-out'}}],
            'label': '&amp;#9654;',
            'method': 'animate'
        },
        {
            &quot;args&quot;: [[None], {&quot;frame&quot;: {&quot;duration&quot;: 0, &quot;redraw&quot;: True},
                              &quot;mode&quot;: &quot;immediate&quot;,
                              &quot;transition&quot;: {&quot;duration&quot;: 0}}],
            &quot;label&quot;: &quot;&amp;#9724;&quot;,
            &quot;method&quot;: &quot;animate&quot;
        }
    ],
    'direction': 'left',
    'pad': {'r': 15, 't': 75},
    'showactive': False,
    'type': 'buttons',
    'x': 0.1,
    'xanchor': 'right',
    'y': 0,
    'yanchor': 'top'
}

sliders_dict = {
    'active': 20,
    'yanchor': 'top',
    'xanchor': 'left',
    'currentvalue': {
        'font': {'size': 20},
        'prefix': 'Monthly child allowance: ',
        'visible': True,
        'xanchor': 'right'
    },
    'transition': {'duration': 300, 'easing': 'cubic-in-out'},
    'pad': {'b': 10, 't': 50},
    'len': 0.9,
    'x': 0.1,
    'y': 0,
    'steps': []
}

steps = []
for ca in ca_amts:
    slider_step = {
        'args': [
            [ca],
            {'frame': {'duration': 300, 'redraw': True},
             'mode': 'immediate',
             'transition': {'duration': 300}}
        ],
        'label': '$' + str(ca),
        'method': 'animate'
    }
    steps.append(slider_step)
sliders_dict['steps'] = steps

# create frames for a given state and funding method
def make_frames(state, funding):
    raw_data = deciles[(deciles.state == state) &amp;amp;
                       (deciles.funding == funding)].round()
    frames = {}
    for ca in ca_amts:
        frames[str(ca)] = list(raw_data[raw_data.monthly_ca == ca].net_chg)
    return frames

# create dataframe of booleans to determine trace visibility
# separating funding mechanisms is currently redundant but can 
#    in theory be used to add another dropdown menu
n = len(state_names) * len(fundings)
frames_list = []
count = 0
visible = []
for state in state_names:
    vis_list = []
    for funding in fundings:
        frames_list.append(make_frames(state, funding))
        v = np.array([False] * n)
        v[count] = True
        vis_list.append(v)
        count += 1
    visible.append(vis_list)
visible = pd.DataFrame(visible, columns = fundings, index = state_names)

# add traces to figure dictionary
for i in range(n):
    data_dict = {
        'x': x,
        'y': frames_list[i]['500'],
        'type': 'bar',
        # Only show the Federal tax line (index 0) when first loading chart.
        'visible': True if i == 0 else ('legendonly' if i &amp;lt; 3 else False),
        'name': fundings[i % 3],
        'marker_color':  colors[i % 3],
        'hovertemplate': 
                '&lt;b&gt;' + fundings[i % 3] + '&lt;/b&gt;' + 
                '&lt;br /&gt;Change in resources: %{y}&lt;br /&gt;' + 
                '&lt;extra&gt;&lt;/extra&gt;'
    }
    fig_dict['data'].append(data_dict)

# reorder existing frames
frames = []
for ca in ca_amts:
    data_list = []
    for f in frames_list:
        data_list.append({'y': f[str(ca)], 'type': 'bar'})
    frame = {'data': data_list, 'name': str(ca), 'traces': list(range(n))}
    frames.append(frame)

# add additional features to figure dictionary
fig_dict['frames'] = frames
fig_dict['layout']['sliders'] = [sliders_dict]

# generate plotly figure
fig = go.Figure(fig_dict)

# generate dropdown menu buttons
buttons = []
for state in state_names:
    new_button = {'method': 'update',
                  'label': state,
                  'args': [{'visible': (visible[fundings[0]][state] | 
                                        visible[fundings[1]][state] |
                                        visible[fundings[2]][state])}
                          ]}
    buttons.append(new_button)
    
# construct button menu
updatemenus = {'buttons': buttons,
               'direction': 'down',
               'showactive': True,
               'pad':{&quot;r&quot;: 10, 't': 20},
               'xanchor': 'left',
               'yanchor': 'top',
               'x': 0,
               'y': 1.2
               }

# add slider and button menus
fig.update_layout(updatemenus=[slider_menu, updatemenus],
                  title_font_size=20,)

# display figure
fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f2() {
  var x = document.getElementById(&quot;asset_code_2&quot;);
  var b = document.getElementById(&quot;button2&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset2&quot;).load(&quot;/assets/markdown_assets/simulation/2020-11-25-simulation-asset-2.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset2&quot;&gt;&lt;/div&gt;

&lt;p&gt;This $300-per-month child allowance would raise the bottom decile’s income by 33 percent, while lowering the top decile’s income by 4 percent.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button3&quot; onclick=&quot;f3()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_3&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# make chart symmetric with boundary at the maximum.
boundary = deciles.pct_chg.agg([min, max]).abs().max()

# initial data set-up 
x = deciles.decile.unique()
ca_amts = deciles.monthly_ca.unique()
state_names = deciles.state.unique()
state_names = np.insert(state_names[:-1], 0, 'US')
fundings = ['Federal tax', 'State tax', 'No funding']

# get list of bar colors
colors = [COLOR_MAP[i] for i in fundings]

# create figure dictionary
fig_dict = {
    'data': [],
    'layout': {},
    'frames': []
}

# fill in most of layout
fig_dict['layout'] = {
    'plot_bgcolor': 'white',
    'font': dict(family = 'Roboto'),
    'showlegend': True,
    'height': 600,
    'margin': dict(t=100, b=0, l=0, r=0)
}
fig_dict['layout']['title'] = {
    'text': 'Average percent change to household income by decile', 
    'y': 0.97,
    'x': 0.05,
    'xanchor': 'left',
    'yanchor': 'top'
}
fig_dict['layout']['xaxis'] = {
    'title': 'Decile of resources per person', 
    'dtick': 1,
    'type': 'category'
}
fig_dict['layout']['yaxis'] = {
    'title': 'Average percent change to SPM unit resources', 
    'ticksuffix': '%',
    'range': [-boundary, boundary]
}

# add slider specifications
slider_menu =  {
    'buttons': [
        {
            'args': [None, {'frame': {'duration': 500, 'redraw': True},
                            'fromcurrent': True,
                            'transition': {'duration': 300,
                                           'easing': 'quadratic-in-out'}}],
            'label': '&amp;#9654;',
            'method': 'animate'
        },
        {
            &quot;args&quot;: [[None], {&quot;frame&quot;: {&quot;duration&quot;: 0, &quot;redraw&quot;: True},
                              &quot;mode&quot;: &quot;immediate&quot;,
                              &quot;transition&quot;: {&quot;duration&quot;: 0}}],
            &quot;label&quot;: &quot;&amp;#9724;&quot;,
            &quot;method&quot;: &quot;animate&quot;
        }
    ],
    'direction': 'left',
    'pad': {'r': 15, 't': 75},
    'showactive': False,
    'type': 'buttons',
    'x': 0.1,
    'xanchor': 'right',
    'y': 0,
    'yanchor': 'top'
}

sliders_dict = {
    'active': 20,
    'yanchor': 'top',
    'xanchor': 'left',
    'currentvalue': {
        'font': {'size': 20},
        'prefix': 'Monthly child allowance: ',
        'visible': True,
        'xanchor': 'right'
    },
    'transition': {'duration': 300, 'easing': 'cubic-in-out'},
    'pad': {'b': 10, 't': 50},
    'len': 0.9,
    'x': 0.1,
    'y': 0,
    'steps': []
}

steps = []
for ca in ca_amts:
    slider_step = {
        'args': [
            [ca],
            {'frame': {'duration': 300, 'redraw': True},
             'mode': 'immediate',
             'transition': {'duration': 300}}
        ],
        'label': '$' + str(ca),
        'method': 'animate'
    }
    steps.append(slider_step)
sliders_dict['steps'] = steps

# create frames for a given state and funding method
def make_frames(state, funding):
    raw_data = deciles[(deciles.state == state) &amp;amp;
                       (deciles.funding == funding)].round()
    frames = {}
    for ca in ca_amts:
        frames[str(ca)] = list(raw_data[raw_data.monthly_ca == ca].pct_chg)
    return frames

# create dataframe of booleans to determine trace visibility
# separating funding mechanisms is currently redundant but can 
#    in theory be used to add another dropdown menu
n = len(state_names) * len(fundings)
frames_list = []
count = 0
visible = []
for state in state_names:
    vis_list = []
    for funding in fundings:
        frames_list.append(make_frames(state, funding))
        v = np.array([False] * n)
        v[count] = True
        vis_list.append(v)
        count += 1
    visible.append(vis_list)
visible = pd.DataFrame(visible, columns = fundings, index = state_names)

# add traces to figure dictionary
for i in range(n):
    data_dict = {
        'x': x,
        'y': frames_list[i]['500'],
        'type': 'bar',
        # Only show the Federal tax line (index 0) when first loading chart.
        'visible': True if i == 0 else ('legendonly' if i &amp;lt; 3 else False),
        'name': fundings[i % 3],
        'marker_color':  colors[i % 3],
        'hovertemplate': 
                '&lt;b&gt;' + fundings[i % 3] + '&lt;/b&gt;' + 
                '&lt;br /&gt;Change in resources: %{y}&lt;br /&gt;' + 
                '&lt;extra&gt;&lt;/extra&gt;'
    }
    fig_dict['data'].append(data_dict)

# reorder existing frames
frames = []
for ca in ca_amts:
    data_list = []
    for f in frames_list:
        data_list.append({'y': f[str(ca)], 'type': 'bar'})
    frame = {'data': data_list, 'name': str(ca), 'traces': list(range(n))}
    frames.append(frame)

# add additional features to figure dictionary
fig_dict['frames'] = frames
fig_dict['layout']['sliders'] = [sliders_dict]

# generate plotly figure
fig = go.Figure(fig_dict)

# generate dropdown menu buttons
buttons = []
for state in state_names:
    new_button = {'method': 'update',
                  'label': state,
                  'args': [{'visible': (visible[fundings[0]][state] | 
                                        visible[fundings[1]][state] |
                                        visible[fundings[2]][state])}
                          ]}
    buttons.append(new_button)
    
# construct button menu
updatemenus = {'buttons': buttons,
               'direction': 'down',
               'showactive': True,
               'pad':{&quot;r&quot;: 10, 't': 20},
               'xanchor': 'left',
               'yanchor': 'top',
               'x': 0,
               'y': 1.2
               }

# add slider and button menus
fig.update_layout(updatemenus=[slider_menu, updatemenus],
                  title_font_size=20,)

# display figure
fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f3() {
  var x = document.getElementById(&quot;asset_code_3&quot;);
  var b = document.getElementById(&quot;button3&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset3&quot;).load(&quot;/assets/markdown_assets/simulation/2020-11-25-simulation-asset-3.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset3&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;inequality&quot;&gt;Inequality&lt;/h2&gt;

&lt;p&gt;The progressive benefits by decile demonstrate that child allowances would reduce inequality.
Measures of inequality can formalize this result.
For example, the Gini index lies between 0 and 1, with 0 indicating that everyone has the exact same income, and 1 indicating that one person possesses all the income.&lt;/p&gt;

&lt;p&gt;Across funding strategies, child allowances reduce inequality as measured by the Gini index, with larger child allowances producing larger inequality reductions.
Nationally, a $500 monthly child allowance shrinks the Gini index nine percent, from 0.446 to 0.406.
While states vary in their levels of current inequality, a $200 monthly child allowance cuts the measure of inequality consistently between 4 and 5 percent across them.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button4&quot; onclick=&quot;f4()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_4&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# data labels
GINI = {'fed_gini': 'Federal tax',
        'state_gini': 'State tax',
        'non_funded_gini': 'No funding'}

# reformat data
data_list = []
for state in state_names:
    state_data = tax[tax.state == state]
    state_list = []
    for gini in GINI:
        state_list.append(state_data[gini])
    data_list.append(state_list)

data_columns = list(GINI.keys())
data = pd.DataFrame(data_list, columns = data_columns)
data['State'] = state_names
data = data.set_index('State')

def getDataList(state):
    data_list = []
    for dc in data_columns:
        data_list.append(data.loc[state][dc])
    return data_list

# initialize figure
fig = go.Figure()

# add traces
x = tax.child_allowance.unique()
for gini in GINI:
    fig.add_trace(go.Scatter(
        x=x, 
        y=tax[tax.state == default_state][gini],
        name=GINI[gini],
        marker = dict(color = COLOR_MAP[GINI[gini]]),
#         hovertemplate=
#                 GINI[gini] + ': %{y}' + 
#                 '&lt;extra&gt;&lt;/extra&gt;'
    ))

# generate buttons
buttons = []
for state in state_names:
    new_button = {'method': 'update',
                  'label': state,
                  'args': [{'y': getDataList(state),
                           'visible': [True,
                                       'legendonly' if state == 'US' else True,
                                       True]},
                          ]}
    buttons.append(new_button)
    
# construct menus
updatemenus = [{'buttons': buttons,
                'direction': 'down',
                'showactive': True,
                'pad':{'l': 10, 'r': 25},
               }]

# update layout with buttons, and show the figure
fig.update_layout(updatemenus=updatemenus)

fig.update_xaxes(title_text='Monthly child allowance')

gini_values = tax.non_funded_gini.tolist() + tax.fed_gini.tolist() + tax.state_gini.tolist()
ymin = math.floor(min(gini_values) * 100) / 100
ymax = math.ceil(max(gini_values) * 100) / 100
fig.update_yaxes(title_text='Gini index of per-capita income, 2017-2019',
                 range=[ymin, ymax])

fig.update_layout(height=600, 
                  margin=dict(l=0, r=0, t=80, b=0),
                  font=dict(family='Roboto'),
                  hovermode='x', 
                  xaxis_tickprefix='$',
                  xaxis_ticksuffix='',
                  plot_bgcolor='white',
                  legend_title_text='',
                  title={
                    'text': 'Income inequality by child allowance amount',
                    'y':0.95,
                    'x':0.01,
                    'xanchor': 'left',
                    'yanchor': 'top'},
                  title_font_size=20,
                 )

fig.update_layout(hovermode=&quot;x unified&quot;)

# hide state tax rate for US only
hide_line = ['State tax']
fig.for_each_trace(lambda trace: trace.update(visible=&quot;legendonly&quot;)
                   if trace.name in hide_line else ())

fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f4() {
  var x = document.getElementById(&quot;asset_code_4&quot;);
  var b = document.getElementById(&quot;button4&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset4&quot;).load(&quot;/assets/markdown_assets/simulation/2020-11-25-simulation-asset-4.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset4&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;poverty&quot;&gt;Poverty&lt;/h2&gt;
&lt;p&gt;A child allowance can also substantially cut poverty.  In this example, a person is said to be in poverty if their household’s total post tax and transfer income is less than their poverty threshold.
Poverty thresholds are determined by the Census Bureau’s Supplemental Poverty Measure (SPM), which considers a medley of factors including household size, housing status, and local housing costs.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button5&quot; onclick=&quot;f5()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_5&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# data labels
FUNDING = {'fed_poverty_rate': 'Federal tax',
           'state_poverty_rate': 'State tax',
           'non_funded_poverty_rate': 'No funding'}

ca_amts = summary.child_allowance.unique()
child_poverty = summary[(summary['age_group'] == 'child') &amp;amp;
                        (summary['race'] == 'All')]

# create figure dictionary
fig_dict = {
    'data': [],
    'layout': {},
    'frames': []
}

# fill in most of layout
fig_dict['layout'] = {
    'plot_bgcolor': 'white',
    'font': dict(family = 'Roboto'),
    'height': 600,
    'margin': dict(t=100, b=0, l=0, r=10)
}
fig_dict['layout']['title'] = {
    'text': ('Child poverty by state and child allowance amount'),
    'y': 0.97,
    'x': 0.05,
    'xanchor': 'left',
    'yanchor': 'top'
}

# add slider specifications
slidermenu =  {
    'buttons': [
        {
            'args': [None, {'frame': {'duration': 500, 'redraw': True},
                            'fromcurrent': True,
                            'transition': {'duration': 300,
                                           'easing': 'quadratic-in-out'}}],
            'label': '&amp;#9654;',
            'method': 'animate'
        },
        {
            &quot;args&quot;: [[None], {&quot;frame&quot;: {&quot;duration&quot;: 0, &quot;redraw&quot;: True},
                              &quot;mode&quot;: &quot;immediate&quot;,
                              &quot;transition&quot;: {&quot;duration&quot;: 0}}],
            &quot;label&quot;: &quot;&amp;#9724;&quot;,
            &quot;method&quot;: &quot;animate&quot;
        }
    ],
    'direction': 'left',
    'pad': {'r': 15, 't': 75},
    'showactive': True,
    'type': 'buttons',
    'x': 0.1,
    'xanchor': 'right',
    'y': 0,
    'yanchor': 'top'
}
    
sliders_dict = {
    'active': 0,
    'yanchor': 'top',
    'xanchor': 'left',
    'currentvalue': {
        'font': {'size': 20},
        'prefix': 'Monthly child allowance: ',
        'visible': True,
        'xanchor': 'right'
    },
    'transition': {'duration': 300, 'easing': 'cubic-in-out'},
    'pad': {'b': 10, 't': 50},
    'len': 0.9,
    'x': 0.1,
    'y': 0,
    'steps': []
}

steps = []
for ca in ca_amts:
    slider_step = {
        'args': [
            [ca],
            {'frame': {'duration': 300, 'redraw': True},
             'mode': 'immediate',
             'transition': {'duration': 300}}
        ],
        'label': '$' + str(ca),
        'method': 'animate'
    }
    steps.append(slider_step)
sliders_dict['steps'] = steps

# generate frames
frames = []
locations = child_poverty.code
zero_poverty = child_poverty[child_poverty.child_allowance == 0]
for ca in ca_amts:
    data_list = []
    ca_data = child_poverty[child_poverty.child_allowance == ca]
    for funding in FUNDING:
        data_list.append({
            'hovertemplate': 
                '&lt;b&gt;%{customdata[1]}&lt;/b&gt;' + 
                '&lt;br /&gt;Child poverty rate: %{z}%&lt;br /&gt;' + 
                'Poverty reduction: %{customdata[0]}%' +
                '&lt;extra&gt;&lt;/extra&gt;',
            'locationmode': 'USA-states',
            'locations': child_poverty.code.unique(),
            'z': ca_data[funding].tolist(),
            'type': 'choropleth',
            'customdata': list(map(lambda x, y, z: (round(100 * (1 - y / x)), state_dict[z]),
                                   zero_poverty[funding], ca_data[funding], state_dict))
        })
    
    frame = {'data': data_list, 'name': str(ca), 'traces': [0,1,2]}
    frames.append(frame)
    
# add frames to figure dictionary
fig_dict['frames'] = frames

# add traces to figure dictionary
for i in (range(len(FUNDING))):
    fig_dict['data'].append(frames[0]['data'][0])

# generate figure
fig = go.Figure(fig_dict)

# generate dropdown menu buttons
buttons = []
for funding in FUNDING:
    new_button = {'method': 'update',
                  'label': FUNDING[funding],
                  'args': [{'visible': [f == funding for f in FUNDING.keys()]}
                          ]}
    buttons.append(new_button)
    
# construct button menu
updatemenu = {'buttons': buttons,
              'direction': 'down',
              'showactive': True,
              'pad':{&quot;r&quot;: 10, 't': 20, 'l': 50},
              'xanchor': 'left',
              'yanchor': 'top',
              'x': 0,
              'y': 1.2
             }

# add slider, dropdown menu, and set geo scope
fig.update_layout(
    geo_scope='usa', # limite map scope to USA
    sliders=[sliders_dict],
    updatemenus=[slidermenu, updatemenu]
)

# update visual attributes
fig.update_traces(showscale=False, colorscale='Reds', zmin=0, zmax=22)
fig.update_layout(
    hoverlabel=dict(
        bgcolor=&quot;white&quot;,
        font=dict(family='Roboto')
    ),
    title_font_size=20,
)
fig.update(layout_showlegend=False)

fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f5() {
  var x = document.getElementById(&quot;asset_code_5&quot;);
  var b = document.getElementById(&quot;button5&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset5&quot;).load(&quot;/assets/markdown_assets/simulation/2020-11-25-simulation-asset-5.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset5&quot;&gt;&lt;/div&gt;

&lt;p&gt;A child allowance of $300 per month, funded by a federal income tax, would cut US child poverty by 52 percent, and also cut adult poverty by 13 percent.
Overall poverty would fall 22 percent.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button6&quot; onclick=&quot;f6()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_6&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
FUNDING = {'fed_poverty_rate': 'Federal tax',
           'state_poverty_rate': 'State tax',
           'non_funded_poverty_rate': 'No funding'}

# initial data set-up
age = summary[summary['race'] == 'All'].copy(deep=True)
age.age_group = age.age_group.str.capitalize()
x = ['Child', 'Adult', 'All']
ca_amts = age.child_allowance.unique()
state_names = age.state.unique()
state_names = np.insert(state_names[:-1], 0, 'US')

# create figure dictionary
fig_dict = {
    'data': [],
    'layout': {},
    'frames': []
}

# fill in most of layout
fig_dict['layout'] = {
    'plot_bgcolor': 'white',
    'font': dict(family = 'Roboto'),
    'showlegend': True,
    'height': 600,
    'margin': dict(t=100, b=0, l=0, r=0)
}
fig_dict['layout']['title'] = {
    'text': 'Poverty by age and child allowance amount',
    'y': 0.97,
    'x': 0.05,
    'xanchor': 'left',
    'yanchor': 'top'
}
fig_dict['layout']['xaxis'] = {
    'type': 'category'
}
fig_dict['layout']['yaxis'] = {
    'title': 'SPM poverty rate, 2017-2019',
    'ticksuffix': '%',
    'range': [0, 25]
}

# add slider specifications
slider_menu =  {
    'buttons': [
        {
            'args': [None, {'frame': {'duration': 500, 'redraw': True},
                            'fromcurrent': True, 
                            &quot;mode&quot;: &quot;immediate&quot;,
                            'transition': {'duration': 300,
                                           'easing': 'quadratic-in-out'}}],
            'label': '&amp;#9654;',
            'method': 'animate'
        },
        {
            &quot;args&quot;: [[None], {&quot;frame&quot;: {&quot;duration&quot;: 0, &quot;redraw&quot;: True},
                              &quot;mode&quot;: &quot;immediate&quot;,
                              &quot;transition&quot;: {&quot;duration&quot;: 0}}],
            &quot;label&quot;: &quot;&amp;#9724;&quot;,
            &quot;method&quot;: &quot;animate&quot;
        }
    ],
    'direction': 'left',
    'pad': {'r': 15, 't': 75},
    'showactive': False,
    'type': 'buttons',
    'x': 0.1,
    'xanchor': 'right',
    'y': 0,
    'yanchor': 'top'
}

sliders_dict = {
    'active': 0,
    'yanchor': 'top',
    'xanchor': 'left',
    'currentvalue': {
        'font': {'size': 20},
        'prefix': 'Monthly child allowance: ',
        'visible': True,
        'xanchor': 'right'
    },
    'transition': {'duration': 300, 'easing': 'cubic-in-out'},
    'pad': {'b': 10, 't': 50},
    'len': 0.9,
    'x': 0.1,
    'y': 0,
    'steps': []
}

steps = []
for ca in ca_amts:
    slider_step = {
        'args': [
            [ca],
            {'frame': {'duration': 300, 'redraw': True},
             'mode': 'immediate',
             'transition': {'duration': 300}}
        ],
        'label': '$' + str(ca),
        'method': 'animate'
    }
    steps.append(slider_step)
sliders_dict['steps'] = steps

# create frames for a given state and funding method
def make_frames(state, funding):
    raw_data = age[(age.state == state)]
    frames = {}
    for ca in ca_amts:
        frames[str(ca)] = list(raw_data[raw_data.child_allowance == ca].set_index(
            'age_group').loc[x][funding])
    return frames

# create dataframe of booleans to determine trace visibility
n = len(state_names) * len(FUNDING)
frames_list = []
count = 0
visible = {}
for state in state_names:
    v = [False] * n
    for funding in FUNDING:
        frames_list.append(make_frames(state, funding))
        v[count] = True
        count += 1
    visible[state] = v + v
v = [False] * n
v[0] = True
v[1] = 'legendonly'
v[2] = 'legendonly'
visible['US'] = v + v

# reorder existing frames
frames = []
for ca in ca_amts:
    data_list = []
    count = 0
    for f in frames_list:
        data_list.append({
            'y': f['0'], 
            'x': x,
            'type': 'bar', 
            'offsetgroup': count, 
            'showlegend': False,
            'legendgroup': count,
            'marker_color': GRAY_SHADOW,
            'name': 'No child allowance',
            'hovertemplate': 
                'Current poverty rate: %{y}' + 
                '&lt;extra&gt;&lt;/extra&gt;'
        })
        count += 1
    count = 0
    for f in frames_list:
        data_list.append({
            'y': f[str(ca)], 
            'x': x,
            'type': 'bar', 
            'offsetgroup': count,
            'legendgroup': count,
            'name': list(FUNDING.values())[count % 3],
            'marker_color': COLOR_MAP[list(FUNDING.values())[count % 3]],
            'hovertemplate': 
                '&lt;b&gt;' + list(FUNDING.values())[count % 3] + '&lt;/b&gt;' + 
                '&lt;br /&gt;Poverty rate: %{y}&lt;br /&gt;' + 
                'Poverty reduction: %{customdata}%'
                '&lt;extra&gt;&lt;/extra&gt;',
            'customdata': list(map(lambda x, y: (round(100 * (1 - y / x))),
                                   f['0'], f[str(ca)]))
        })
        count += 1
    frame = {'data': data_list, 'name': str(ca), 'traces': list(range(n*2))}
    frames.append(frame)

# add additional features to figure dictionary
fig_dict['frames'] = frames
fig_dict['layout']['sliders'] = [sliders_dict]

for i in range(n):
    data_dict = copy.deepcopy(frames[0]['data'][i])
    if i == 0:
        data_dict['visible'] = True
    elif i &amp;lt; 3:
        data_dict['visible'] = 'legendonly'
    else:
        data_dict['visible'] = False
    fig_dict['data'].append(data_dict)
for i in range(n):
    data_dict = copy.deepcopy(frames[0]['data'][n + i])
    if i == 0:
        data_dict['visible'] = True
    elif i &amp;lt; 3:
        data_dict['visible'] = 'legendonly'
    else:
        data_dict['visible'] = False
    fig_dict['data'].append(data_dict)

# generate plotly figure
fig = go.Figure(fig_dict)

# generate dropdown menu buttons
buttons = []
for state in state_names:
    new_button = {'method': 'update',
                  'label': state,
                  'args': [{'visible': (visible[state])},
                          ]}
    buttons.append(new_button)
    
# construct button menu
updatemenus = {'buttons': buttons,
               'direction': 'down',
               'showactive': True,
               'pad':{&quot;r&quot;: 10, 't': 20},
               'xanchor': 'left',
               'yanchor': 'top',
               'x': 0,
               'y': 1.2
              }

# add slider and button menus
fig.update_layout(
    updatemenus=[slider_menu, updatemenus],
    hoverlabel=dict(
        font=dict(family='Roboto')
    ),
    title_font_size=20,)

# display figure
fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f6() {
  var x = document.getElementById(&quot;asset_code_6&quot;);
  var b = document.getElementById(&quot;button6&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset6&quot;).load(&quot;/assets/markdown_assets/simulation/2020-11-25-simulation-asset-6.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset6&quot;&gt;&lt;/div&gt;

&lt;p&gt;That same $300-per-month federally-funded child allowance would cut child poverty fairly consistently across races: 51 percent among White children and 54 percent among Black children.
But because Black children are currently about twice as likely to be in poverty, it also cuts the percentage-point racial gaps in half.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button7&quot; onclick=&quot;f7()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_7&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
FUNDING = {'fed_poverty_rate': 'Federal tax',
           'state_poverty_rate': 'State tax',
           'non_funded_poverty_rate': 'No funding'}

# initial data set-up 
race = summary[summary['age_group'] == 'child']
x = ['Black', 'White', 'Other', 'All']
ca_amts = race.child_allowance.unique()
state_names = race.state.unique()
state_names = np.insert(state_names[:-1], 0, 'US')

# create figure dictionary
fig_dict = {
    'data': [],
    'layout': {},
    'frames': []
}

# fill in most of layout
fig_dict['layout'] = {
    'plot_bgcolor': 'white',
    'font': dict(family = 'Roboto'),
    'showlegend': True,
    'height': 600,
    'margin': dict(t=100, b=0, l=0, r=0)
}
fig_dict['layout']['title'] = {
    'text': 'Child poverty by race and child allowance amount',
    'y': 0.97,
    'x': 0.05,
    'xanchor': 'left',
    'yanchor': 'top'
}
fig_dict['layout']['xaxis'] = {
    'type': 'category'
}
fig_dict['layout']['yaxis'] = {
    'title': 'Child SPM poverty rate, 2017-2019',
    'ticksuffix': '%',
    'range': [0, 25]
}

# add slider specifications
slider_menu =  {
    'buttons': [
        {
            'args': [None, {'frame': {'duration': 500, 'redraw': True},
                            'fromcurrent': True, 
                            &quot;mode&quot;: &quot;immediate&quot;,
                            'transition': {'duration': 300,
                                           'easing': 'quadratic-in-out'}}],
            'label': '&amp;#9654;',
            'method': 'animate'
        },
        {
            &quot;args&quot;: [[None], {&quot;frame&quot;: {&quot;duration&quot;: 0, &quot;redraw&quot;: True},
                              &quot;mode&quot;: &quot;immediate&quot;,
                              &quot;transition&quot;: {&quot;duration&quot;: 0}}],
            &quot;label&quot;: &quot;&amp;#9724;&quot;,
            &quot;method&quot;: &quot;animate&quot;
        }
    ],
    'direction': 'left',
    'pad': {'r': 15, 't': 75},
    'showactive': False,
    'type': 'buttons',
    'x': 0.1,
    'xanchor': 'right',
    'y': 0,
    'yanchor': 'top'
}

sliders_dict = {
    'active': 0,
    'yanchor': 'top',
    'xanchor': 'left',
    'currentvalue': {
        'font': {'size': 20},
        'prefix': 'Monthly child allowance: ',
        'visible': True,
        'xanchor': 'right'
    },
    'transition': {'duration': 300, 'easing': 'cubic-in-out'},
    'pad': {'b': 10, 't': 50},
    'len': 0.9,
    'x': 0.1,
    'y': 0,
    'steps': []
}

steps = []
for ca in ca_amts:
    slider_step = {
        'args': [
            [ca],
            {'frame': {'duration': 300, 'redraw': True},
             'mode': 'immediate',
             'transition': {'duration': 300}}
        ],
        'label': '$' + str(ca),
        'method': 'animate'
    }
    steps.append(slider_step)
sliders_dict['steps'] = steps

# create frames for a given state and funding method
def make_frames(state, funding):
    raw_data = race[(race.state == state)]
    frames = {}
    for ca in ca_amts:
        frames[str(ca)] = list(raw_data[raw_data.child_allowance == ca].set_index('race').loc[x][funding])
    return frames

# create dataframe of booleans to determine trace visibility
n = len(state_names) * len(FUNDING)
frames_list = []
count = 0
visible = {}
for state in state_names:
    v = [False] * n
    for funding in FUNDING:
        frames_list.append(make_frames(state, funding))
        v[count] = True
        count += 1
    visible[state] = v + v
v = [False] * n
v[0] = True
v[1] = 'legendonly'
v[2] = 'legendonly'
visible['US'] = v + v

# reorder existing frames
frames = []
for ca in ca_amts:
    data_list = []
    count = 0
    for f in frames_list:
        data_list.append({
            'y': f['0'], 
            'x': x,
            'type': 'bar', 
            'offsetgroup': count, 
            'showlegend': False,
            'legendgroup': count,
            'marker_color': GRAY_SHADOW,
            'name': 'No child allowance',
            'hovertemplate': 
                'Current poverty rate: %{y}' + 
                '&lt;extra&gt;&lt;/extra&gt;'
        })
        count += 1
    count = 0
    for f in frames_list:
        data_list.append({
            'y': f[str(ca)], 
            'x': x,
            'type': 'bar', 
            'offsetgroup': count,
            'legendgroup': count,
            'name': list(FUNDING.values())[count % 3],
            'marker_color': COLOR_MAP[list(FUNDING.values())[count % 3]],
            'hovertemplate': 
                '&lt;b&gt;' + list(FUNDING.values())[count % 3] + '&lt;/b&gt;' + 
                '&lt;br /&gt;Child poverty rate: %{y}&lt;br /&gt;' + 
                'Poverty reduction: %{customdata}%'
                '&lt;extra&gt;&lt;/extra&gt;',
            'customdata': list(map(lambda x, y: (round(100 * (1 - y / x))),
                                   f['0'], f[str(ca)]))
        })
        count += 1
    frame = {'data': data_list, 'name': str(ca), 'traces': list(range(n*2))}
    frames.append(frame)

# add additional features to figure dictionary
fig_dict['frames'] = frames
fig_dict['layout']['sliders'] = [sliders_dict]

for i in range(n):
    data_dict = copy.deepcopy(frames[0]['data'][i])
    if i == 0:
        data_dict['visible'] = True
    elif i &amp;lt; 3:
        data_dict['visible'] = 'legendonly'
    else:
        data_dict['visible'] = False
    fig_dict['data'].append(data_dict)
for i in range(n):
    data_dict = copy.deepcopy(frames[0]['data'][n + i])
    if i == 0:
        data_dict['visible'] = True
    elif i &amp;lt; 3:
        data_dict['visible'] = 'legendonly'
    else:
        data_dict['visible'] = False
    fig_dict['data'].append(data_dict)

# generate plotly figure
fig = go.Figure(fig_dict)

# generate dropdown menu buttons
buttons = []
for state in state_names:
    new_button = {'method': 'update',
                  'label': state,
                  'args': [{'visible': (visible[state])}]
                 }
    buttons.append(new_button)
    
# construct button menu
updatemenus = {'buttons': buttons,
               'direction': 'down',
               'showactive': True,
               'pad':{&quot;r&quot;: 10, 't': 20},
               'xanchor': 'left',
               'yanchor': 'top',
               'x': 0,
               'y': 1.2
              }

# add slider and button menus
fig.update_layout(
    updatemenus=[slider_menu, updatemenus],
    hoverlabel=dict(
        font=dict(family='Roboto')
    ),
    title_font_size=20,)

# display figure
fig.show(config=CONFIG)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f7() {
  var x = document.getElementById(&quot;asset_code_7&quot;);
  var b = document.getElementById(&quot;button7&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset7&quot;).load(&quot;/assets/markdown_assets/simulation/2020-11-25-simulation-asset-7.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset7&quot;&gt;&lt;/div&gt;

&lt;p&gt;Beyond reducing child poverty, child allowances would decrease adult poverty and abate inequality.
These effects are consistent across states, races, and the funding mechanisms.&lt;/p&gt;

&lt;p&gt;Read on to our &lt;a href=&quot;https://child-allowance.ubicenter.org/empirical&quot;&gt;Empirical studies&lt;/a&gt; page for more research on the (often causal) links between child poverty and outcomes like health, education, and income.
For more information on how a child allowance would compare to existing policies like the Child Tax Credit, visit our &lt;a href=&quot;https://child-allowance.ubicenter.org/policies&quot;&gt;Policies&lt;/a&gt; page.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>[&quot;nate&quot;, &quot;matt&quot;, &quot;max&quot;]</name>
        
        
      </author>

      

      
        <category term="us" />
      
        <category term="child allowance" />
      

      
        <summary type="html">How different forms of cash grants to parents would affect poverty and inequality.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Student debt cancellation is less progressive than universal payments</title>
      <link href="/student-debt" rel="alternate" type="text/html" title="Student debt cancellation is less progressive than universal payments" />
      <published>2020-11-17T00:00:00+00:00</published>
      <updated>2020-11-17T00:00:00+00:00</updated>
      <id>/student-debt</id>
      <content type="html" xml:base="/student-debt">&lt;head&gt;
  &lt;script src=&quot;https://cdn.plot.ly/plotly-latest.min.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;p&gt;Over 40 million Americans possess over $1.5 trillion in student debt. And as new borrowers take out loans faster than old borrowers pay them back, that number is &lt;a href=&quot;https://www.newyorkfed.org/microeconomics/hhdc.html&quot;&gt;increasing with time&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This problem has led to Democrats across the ideological spectrum to advocate for student debt relief. In the 2020 primary, Bernie Sanders had the most generous &lt;a href=&quot;https://berniesanders.com/issues/free-college-cancel-debt/&quot;&gt;plan&lt;/a&gt;, calling for the cancellation of all outstanding student debt regardless of a person’s income. Also in the primary, Elizabeth Warren &lt;a href=&quot;https://elizabethwarren.com/plans/affordable-higher-education&quot;&gt;proposed&lt;/a&gt; cancelling up to $50,000 in student debt, phasing out for households with income above $100,000; in September 2020, she and Senate Minority Leader Chuck Schumer &lt;a href=&quot;https://www.politico.com/f/?id=00000174-9b5b-d59c-a174-df5f0b960000&quot;&gt;introduced a resolution&lt;/a&gt; calling on Biden to cancel $50,000 in debt per person through executive order (the resolution didn’t mention phasing out the cancellation with income).   Back in April, President-elect Joe Biden &lt;a href=&quot;https://medium.com/@JoeBiden/joe-biden-outlines-new-steps-to-ease-economic-burden-on-working-people-e3e121037322&quot;&gt;recommended&lt;/a&gt; forgiving a minimum of $10,000 of student debt per person.&lt;/p&gt;

&lt;p&gt;In this paper, I analyze which Americans would benefit the most from student debt cancellation and examine how it compares to budget-equivalent universal payments. I find that, across a range of distributional outcomes, each student debt cancellation plan would be less progressive than a universal payment of the same total cost.&lt;/p&gt;

&lt;h2 id=&quot;who-holds-the-debt&quot;&gt;Who holds the debt?&lt;/h2&gt;

&lt;p&gt;First, a caveat: data on student debt is incomplete. The Federal Reserve’s Survey of Consumer Finances (SCF) is the primary source of wealth microdata, powering inequality statistics, detailed breakdowns of assets and liabilities, and microsimulations like mine. However, it only counts people in a household’s “Primary Economic Unit,” meaning economically independent young adults living with parents are excluded. As a result, the SCF understates total student debt by about a third, compared to aggregate data sources like the &lt;a href=&quot;https://www.federalreserve.gov/releases/g19/current/&quot;&gt;G.19&lt;/a&gt; and &lt;a href=&quot;https://www.newyorkfed.org/medialibrary/interactives/householdcredit/data/pdf/hhdc_2019q4.pdf&quot;&gt;Consumer Credit Panel&lt;/a&gt;. The missing student debt is disproportionately held by &lt;a href=&quot;https://www.peoplespolicyproject.org/2019/06/27/low-income-people-have-more-student-debt-than-realized/&quot;&gt;young people&lt;/a&gt; and people in the &lt;a href=&quot;https://www.brookings.edu/blog/up-front/2019/06/28/who-owes-the-most-student-debt/&quot;&gt;bottom and top income quintiles&lt;/a&gt;. While my colleagues and I aim to refine the data, the SCF is currently the best available source for this sort of analysis, so I use it here while acknowledging its limitations.&lt;/p&gt;

&lt;p&gt;That said, the 2019 SCF reports $1.1 trillion of total student debt,&lt;sup id=&quot;fnref:debt&quot;&gt;&lt;a href=&quot;#fn:debt&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; held by households representing one in four Americans. Some demographics are more likely to hold debt than others:&lt;sup id=&quot;fnref:hhdemo&quot;&gt;&lt;a href=&quot;#fn:hhdemo&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Black Americans are the most likely to have student debt, while Hispanic Americans are the least likely, with 33 percent and 18 percent of people possessing student debt respectively.&lt;/li&gt;
  &lt;li&gt;Young people are more likely to hold student debt than any other age group: 40 percent of people under 35 have student debt compared to just 2 percent of those who are 75 or older.&lt;/li&gt;
  &lt;li&gt;Income quintiles&lt;sup id=&quot;fnref:quintiles&quot;&gt;&lt;a href=&quot;#fn:quintiles&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; follow a bell curve, with the highest amount of debt held by the middle class and smaller amounts held by the lowest and highest quintile.&lt;/li&gt;
  &lt;li&gt;Americans living in poverty&lt;sup id=&quot;fnref:poverty&quot;&gt;&lt;a href=&quot;#fn:poverty&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; are less likely to possess student debt than Americans living above the poverty line.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The chart below (and others like it included in this paper) allow you to compare the results across race, education level, age groups, income quintiles, net worth quintiles, and poverty status.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button1&quot; onclick=&quot;f1()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_1&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# Import libraries
import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import microdf as mdf
import plotly.graph_objects as go

race = pd.read_csv('https://github.com/UBICenter/ed_debt_vs_ubi/raw/main/race_debt_ubi%20(1).csv')
education = pd.read_csv('https://github.com/UBICenter/ed_debt_vs_ubi/raw/main/education_debt_ubi.csv')
age = pd.read_csv('https://github.com/UBICenter/ed_debt_vs_ubi/raw/main/age_debt_ubi.csv')
income = pd.read_csv('https://github.com/UBICenter/ed_debt_vs_ubi/raw/main/income_debt_ubi%20(1).csv')
networth = pd.read_csv('https://github.com/UBICenter/ed_debt_vs_ubi/raw/main/networth_debt_ubi%20(1).csv')
poor = pd.read_csv('https://github.com/UBICenter/ed_debt_vs_ubi/raw/main/poor_debt_ubi.csv')
all2 = pd.read_csv('https://github.com/UBICenter/ed_debt_vs_ubi/raw/main/all2.csv')
racial_wealth_gap = pd.read_csv('https://github.com/UBICenter/ed_debt_vs_ubi/raw/main/racial_wealth_gap%20(2)')
scf = pd.read_csv('https://github.com/UBICenter/ed_debt_vs_ubi/raw/main/scf_raw2')

race2 = race.drop([4])
education2 = education.drop([4])
age2 = age.drop([6])
income2 = income.drop([5])
networth2 = networth.drop([5])
poor2 = poor.drop([2])

# Colors from https://material.io/design/color/the-color-system.html
BLUE = '#1976D2'
DARK_BLUE = '#1565C0'
LIGHT_BLUE = '#90CAF9'
GRAY = '#BDBDBD'

colors = [GRAY,] * 5

colors2 = [GRAY,] * 7

colors3 = [GRAY,] * 6

colors4 = [GRAY,] * 3

fig = go.Figure()

fig.add_trace(go.Bar(x=race2['race'], y=race2['percent_has_debt'], 
                     text=race2['percent_has_debt'], name='race',
                     showlegend=False, marker_color=colors))

fig.add_trace(go.Bar(x=education2['edcl'], y=education2['percent_has_debt'],
                     text=education2['percent_has_debt'], name='education',
                     visible = False, showlegend=False, marker_color=colors))

fig.add_trace(go.Bar(x=age2['agecl'], y=age2['percent_has_debt'], name='age',
                     text=age2['percent_has_debt'], visible = False,
                     showlegend=False, marker_color=colors2))

fig.add_trace(go.Bar(x=income2['income_pp_quintile'], y=income2['percent_has_debt'],
                     text=income2['percent_has_debt'], name='income', visible = False,
                     showlegend=False, marker_color=colors3))

fig.add_trace(go.Bar(x=networth2['networth_pp_quintile2'],
                     text=networth2['percent_has_debt'], y=networth2['percent_has_debt'],
                     name='networth', visible = False, showlegend=False, marker_color=colors3))

fig.add_trace(go.Bar(x=poor2['original_poor'], y=poor2['percent_has_debt'],
                     text=poor2['percent_has_debt'], name='poor',
                     visible = False, showlegend=False, marker_color=colors4))


fig.update_layout(uniformtext_minsize=13, uniformtext_mode='hide', plot_bgcolor='white')
fig.update_traces(texttemplate='%{text}%', textposition='outside')

fig.update_xaxes(
        tickangle = 0,
        title_text = &quot;Demographic of head of household&quot;,
        tickfont = {&quot;size&quot;: 14},
        title_standoff = 25)

fig.update_yaxes(
        title_text = &quot;Share of people in households with student debt&quot;,
        ticksuffix =&quot;%&quot;,
        tickfont = {'size':14},
        title_standoff = 25,
        range=[0,50])

fig.update_xaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_yaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_layout(title_text='Population share with student debt by race')

fig.update_layout(
    updatemenus=[go.layout.Updatemenu(
        active=0,
        buttons=list([
            dict(label=&quot;Race&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[True,False,False,False,False,False]},
                       {'title':'Population share with student debt by race',
                        'showlegend':True}]),
            dict(label=&quot;Education&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,True,False, False,False, False]},
                       {'title':'Population share with student debt by education level',
                        'showlegend':True}]),
            dict(label=&quot;Age&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,True, False, False, False]},
                       {'title':'Population share with student debt by age',
                        'showlegend':True}]),
            dict(label=&quot;Income&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False, True, False, False]},
                       {'title':'Population share with student debt by income quintile',
                        'showlegend':True}]),
            dict(label=&quot;Networth&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False, False, True, False]},
                       {'title':'Population share with student debt by net worth quintile',
                        'showlegend':True}]),
            dict(label=&quot;Poverty Status&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False, False, False, True]},
                       {'title':'Population share with student debt by poverty status',
                        'showlegend':True}]), 
            ]),
            direction=&quot;down&quot;,
            pad={&quot;r&quot;: 10, &quot;t&quot;: 10},
            showactive=True,
            x=-0.35,
            xanchor=&quot;left&quot;,
            y=1.1,
            yanchor=&quot;top&quot;
    
    )])

config = {'displayModeBar': False}

fig.show(config=config)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f1() {
  var x = document.getElementById(&quot;asset_code_1&quot;);
  var b = document.getElementById(&quot;button1&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset1&quot;).load(&quot;/assets/markdown_assets/student-debt/2020-11-17-student-debt-asset-1.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset1&quot;&gt;&lt;/div&gt;

&lt;p&gt;The average person holds about $3,700 in student debt, including those who have no debt at all, with demographic trends similar to the share of households holding debt.  As expected, households headed by college graduates possess the most debt, holding 18 times the amount of debt for those headed by people without a high school diploma (whose student debt is ostensibly held by a spouse or child).  Those at the bottom of the net worth distribution have more student debt than those at the top. This too is unsurprising as younger people hold a disproportionate amount of debt and the student debt itself decreases one’s net worth.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button2&quot; onclick=&quot;f2()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_2&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# Average debt by demographic

fig = go.Figure()

fig.add_trace(go.Bar(x=race2['race'], y=race2['mean_debt'], 
                     text=race2['mean_debt'], name='race',
                     showlegend=False, marker_color=colors))

fig.add_trace(go.Bar(x=education2['edcl'], y=education2['mean_debt'],
                     text=education2['mean_debt'], name='education',
                     visible = False, showlegend=False, marker_color=colors))

fig.add_trace(go.Bar(x=age2['agecl'], y=age2['mean_debt'], name='age',
                     text=age2['mean_debt'], visible = False,
                     showlegend=False, marker_color=colors2))

fig.add_trace(go.Bar(x=income2['income_pp_quintile'], y=income2['mean_debt'],
                     text=income2['mean_debt'], name='income', visible = False,
                     showlegend=False, marker_color=colors3))

fig.add_trace(go.Bar(x=networth2['networth_pp_quintile2'],
                     text=networth2['mean_debt'], y=networth2['mean_debt'],
                     name='networth', visible = False, showlegend=False, marker_color=colors3))

fig.add_trace(go.Bar(x=poor2['original_poor'], y=poor2['mean_debt'],
                     text=poor2['mean_debt'], name='poor',
                     visible = False, showlegend=False, marker_color=colors4))


fig.update_layout(uniformtext_minsize=11, uniformtext_mode='hide', plot_bgcolor='white')
fig.update_traces(texttemplate='$%{text}', textposition='outside')

fig.update_xaxes(
        tickangle = 0,
        title_text = &quot;Demographic of head of household&quot;,
        tickfont = {&quot;size&quot;: 14},
        title_standoff = 25)

fig.update_yaxes(
        title_text = &quot;Average student debt per person&quot;,
        tickprefix =&quot;$&quot;,
        tickfont = {'size':14},
        title_standoff = 25,
        range=[0,12_000])

fig.update_xaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_yaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_layout(title_text='Average student debt by race')

fig.update_layout(
    updatemenus=[go.layout.Updatemenu(
        active=0,
        buttons=list([
            dict(label=&quot;Race&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[True,False,False,False,False,False]},
                       {'title':'Average student debt by race',
                        'showlegend':True}]),
            dict(label=&quot;Education&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,True,False, False,False, False]},
                       {'title':'Average student debt by education level',
                        'showlegend':True}]),
            dict(label=&quot;Age&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,True, False, False, False]},
                       {'title':'Average student debt by age',
                        'showlegend':True}]),
            dict(label=&quot;Income&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False, True, False, False]},
                       {'title':'Average student debt by income quintile',
                        'showlegend':True}]),
            dict(label=&quot;Networth&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False, False, True, False]},
                       {'title':'Average student debt by net worth quintile',
                        'showlegend':True}]),
            dict(label=&quot;Poverty Status&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False, False, False, True]},
                       {'title':'Average student debt by poverty status',
                        'showlegend':True}]), 
            ]),
            direction=&quot;down&quot;,
            pad={&quot;r&quot;: 10, &quot;t&quot;: 10},
            showactive=True,
            x=-0.35,
            xanchor=&quot;left&quot;,
            y=1.1,
            yanchor=&quot;top&quot;
    
    )])

fig.show(config=config)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f2() {
  var x = document.getElementById(&quot;asset_code_2&quot;);
  var b = document.getElementById(&quot;button2&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset2&quot;).load(&quot;/assets/markdown_assets/student-debt/2020-11-17-student-debt-asset-2.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset2&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;comparing-50000-debt-cancellation-to-a-budget-equivalent-universal-payment&quot;&gt;Comparing $50,000 debt cancellation to a budget-equivalent universal payment&lt;/h2&gt;

&lt;p&gt;According to the 2019 SCF, the Warren-Schumer proposal to cancel $50,000 in student debt would cost approximately $700 billion, or about $2,300 for every adult and child. What if that $2,300 was given directly as a universal payment?&lt;/p&gt;

&lt;p&gt;On average, groups that would receive more money from student debt cancellation include the top two income quintiles, Black Americans, college graduates, and people not in poverty; other groups would receive more from the universal payment.&lt;/p&gt;

&lt;h3 id=&quot;average-benefit-per-policy&quot;&gt;Average benefit per policy&lt;/h3&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button3&quot; onclick=&quot;f3()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_3&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
## Average Benefit by reform ##

fig = go.Figure()

fig.add_trace(go.Bar(
    x=race2.race,
    y=race2.ed_debt_change_50,
    text=race2.ed_debt_change_50,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE
))


fig.add_trace(go.Bar(
    x=race2.race,
    y=race2.ubi_change_50,
    text= race2.ubi_change_50,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE
))


fig.add_trace(go.Bar(
    x=education2.edcl,
    y=education2.ed_debt_change_50,
    text=education2.ed_debt_change_50,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=education2.edcl,
    y=education2.ubi_change_50,
    text=education2.ubi_change_50,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))


fig.add_trace(go.Bar(
    x=age2.agecl,
    y=age2.ed_debt_change_50,
    text=age2.ed_debt_change_50,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=age2.agecl,
    y=age2.ubi_change_50,
    text=age2.ubi_change_50,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))


fig.add_trace(go.Bar(
    x=income2.income_pp_quintile,
    y=income2.ed_debt_change_50,
    text=income2.ed_debt_change_50,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=income2.income_pp_quintile,
    y=income2.ubi_change_50,
    text=income2.ubi_change_50,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=networth2.networth_pp_quintile2,
    y=networth2.ed_debt_change_50,
    text=networth2.ed_debt_change_50,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=networth2.networth_pp_quintile2,
    y=networth2.ubi_change_50,
    text=networth2.ubi_change_50,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))


fig.add_trace(go.Bar(
    x=poor2.original_poor,
    y=poor2.ed_debt_change_50,
    text=poor2.ed_debt_change_50,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=poor2.original_poor,
    y=poor2.ubi_change_50,
    text=poor2.ubi_change_50,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))


fig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide', plot_bgcolor='white')
fig.update_traces(texttemplate='$%{text}', textposition='outside')

fig.update_xaxes(
        tickangle = 0,
        title_text = &quot;Demographic of head of household&quot;,
        tickfont = {&quot;size&quot;: 14},
        title_standoff = 25)

fig.update_yaxes(
        title_text = &quot;Average benefit per person&quot;,
        ticksuffix =&quot;&quot;,
        tickprefix =&quot;$&quot;,
        tickfont = {'size':14},
        title_standoff = 25,
        range=[0,12_000])

fig.update_xaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_yaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_layout(title_text='Average benefit by race')

fig.update_layout(barmode='group')

fig.update_layout(
    updatemenus=[go.layout.Updatemenu(
        active=0,
        buttons=list([
            dict(label=&quot;Race&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[True,True,False,False,False,False,False,False,False,False,False,False]},
                       {'title':'Average benefit of reform by race',
                        'showlegend':True}]),
            
            dict(label=&quot;Education&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,True,True, False, False,False,False,False,False,False,False]},
                       {'title':'Average benefit of reform by education level',
                        'showlegend':True}]),
            
            dict(label=&quot;Age&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, True, True,False,False,False,False,False,False]},
                       {'title':'Average benefit of reform by age level',
                        'showlegend':True}]),
            
            dict(label=&quot;Income&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False,False,False,False,True,True,False,False,False,False]},
                       {'title':'Average benefit of reform by income quintile',
                        'showlegend':True}]),
            
            dict(label=&quot;Networth&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, False, False,False,False,True,True,False,False]},
                       {'title':'Average benefit of reform by net worth quintile',
                        'showlegend':True}]),
            
            dict(label=&quot;Poverty Status&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, False, False,False,False,False,False,True,True]},
                       {'title':'Average benefit of reform by poverty status',
                        'showlegend':True}])
                        ]),
        
            direction=&quot;down&quot;,
            pad={&quot;r&quot;: 10, &quot;t&quot;: 10},
            showactive=True,
            x=-0.35,
            xanchor=&quot;left&quot;,
            y=1.1,
            yanchor=&quot;top&quot;
    
    )])


fig.show(config=config)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f3() {
  var x = document.getElementById(&quot;asset_code_3&quot;);
  var b = document.getElementById(&quot;button3&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset3&quot;).load(&quot;/assets/markdown_assets/student-debt/2020-11-17-student-debt-asset-3.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset3&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;share-better-off-in-each-policy&quot;&gt;Share better off in each policy&lt;/h3&gt;

&lt;p&gt;While Black Americans on the whole receive more under student debt cancellation, 74 percent of Black Americans would be better off with the universal payment.  For those at the bottom quintile of the net worth distribution, 65 percent would receive more money with the universal payment.  88 percent of people living in poverty would receive a larger benefit with the universal payment.  In total, 82 percent of Americans would be better off with a budget-equivalent universal payment compared to $50,000 in student debt cancellation.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button4&quot; onclick=&quot;f4()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_4&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
## Percent better off with universal payment ##
fig = go.Figure()

fig.add_trace(go.Bar(x=race2['race'], y=race2['percent_better_off_with_ubi_50'], 
                     text=race2['percent_better_off_with_ubi_50'], name='race',
                     showlegend=False, marker_color=DARK_BLUE))

fig.add_trace(go.Bar(x=education2['edcl'], y=education2['percent_better_off_with_ubi_50'],
                     text=education2['percent_better_off_with_ubi_50'], name='education',
                     visible = False, showlegend=False, marker_color=DARK_BLUE))

fig.add_trace(go.Bar(x=age2['agecl'], y=age2['percent_better_off_with_ubi_50'], name='age',
                     text=age2['percent_better_off_with_ubi_50'], visible = False,
                     showlegend=False, marker_color=DARK_BLUE))

fig.add_trace(go.Bar(x=income2['income_pp_quintile'], y=income2['percent_better_off_with_ubi_50'],
                     text=income2['percent_better_off_with_ubi_50'], name='income', visible = False,
                     showlegend=False, marker_color=DARK_BLUE))

fig.add_trace(go.Bar(x=networth2['networth_pp_quintile2'],
                     text=networth2['percent_better_off_with_ubi_50'], y=networth2['percent_better_off_with_ubi_50'],
                     name='networth', visible = False, showlegend=False, marker_color=DARK_BLUE))

fig.add_trace(go.Bar(x=poor2['original_poor'], y=poor2['percent_better_off_with_ubi_50'],
                     text=poor2['percent_better_off_with_ubi_50'], name='poor',
                     visible = False, showlegend=False, marker_color=DARK_BLUE))


fig.update_layout(uniformtext_minsize=13, uniformtext_mode='hide', plot_bgcolor='white')
fig.update_traces(texttemplate='%{text}%', textposition='outside')

fig.update_xaxes(
        tickangle = 0,
        title_text = &quot;Demographic of head of household&quot;,
        tickfont = {&quot;size&quot;: 14},
        title_standoff = 25)

fig.update_yaxes(
        title_text = &quot;Percent better off with universal payment&quot;,
        ticksuffix =&quot;%&quot;,
        tickfont = {'size':14},
        title_standoff = 25,
        range=[0,110])

fig.update_xaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_yaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_layout(title_text='Percent better off with universal payments by race')

fig.update_layout(
    updatemenus=[go.layout.Updatemenu(
        active=0,
        buttons=list([
            dict(label=&quot;Race&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[True,False,False,False,False,False]},
                       {'title':'Share better off with universal payment by race',
                        'showlegend':True}]),
            dict(label=&quot;Education&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,True,False, False,False, False]},
                       {'title':'Share better off with universal payment by education level',
                        'showlegend':True}]),
            dict(label=&quot;Age&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,True, False, False, False]},
                       {'title':'Share better off with universal payment by age',
                        'showlegend':True}]),
            dict(label=&quot;Income&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False, True, False, False]},
                       {'title':'Share better off with universal payment by income quintile',
                        'showlegend':True}]),
            dict(label=&quot;Networth&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False, False, True, False]},
                       {'title':'Share better off with universal payment by net worth quintile',
                        'showlegend':True}]),
            dict(label=&quot;Poverty Status&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False, False, False, True]},
                       {'title':'Share better off with universal payment by poverty status',
                        'showlegend':True}]), 
            ]),
            direction=&quot;down&quot;,
            pad={&quot;r&quot;: 10, &quot;t&quot;: 10},
            showactive=True,
            x=-0.35,
            xanchor=&quot;left&quot;,
            y=1.1,
            yanchor=&quot;top&quot;
    
    )])


fig.show(config=config)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f4() {
  var x = document.getElementById(&quot;asset_code_4&quot;);
  var b = document.getElementById(&quot;button4&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset4&quot;).load(&quot;/assets/markdown_assets/student-debt/2020-11-17-student-debt-asset-4.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset4&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;reduction-in-net-debt-rates&quot;&gt;Reduction in net debt rates&lt;/h3&gt;

&lt;p&gt;Cancelling $50,000 in student debt would lift more Americans out of total debt (negative net worth) than a budget-equivalent universal payment.&lt;sup id=&quot;fnref:static&quot;&gt;&lt;a href=&quot;#fn:static&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; In total, the student debt cancellation would reduce the number of Americans in debt by 44 percent while the universal payment plan would reduce it by 30 percent. This overall trend is mostly consistent across demographic groups. Exceptions include Hispanics, people with no education beyond high school, people at the bottom quintile of the income distribution, and those living in poverty.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button5&quot; onclick=&quot;f5()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_5&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
## Percent decrease of people in debt by reform ##

fig = go.Figure()


fig.add_trace(go.Bar(
    x=race2.race,
    y=race2.ed_debt_debt_reduction_50,
    text=race2.ed_debt_debt_reduction_50,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE
))

fig.add_trace(go.Bar(
    x=race2.race,
    y=race2.ubi_debt_reduction_50,
    text= race2.ubi_debt_reduction_50,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE
))

fig.add_trace(go.Bar(
    x=education2.edcl,
    y=education2.ed_debt_debt_reduction_50,
    text=education2.ed_debt_debt_reduction_50,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=education2.edcl,
    y=education2.ubi_debt_reduction_50,
    text=education2.ubi_debt_reduction_50,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=age2.agecl,
    y=age2.ed_debt_debt_reduction_50,
    text=age2.ed_debt_debt_reduction_50,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=age2.agecl,
    y=age2.ubi_debt_reduction_50,
    text=age2.ubi_debt_reduction_50,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=income2.income_pp_quintile,
    y=income2.ed_debt_debt_reduction_50,
    text=income2.ed_debt_debt_reduction_50,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=income2.income_pp_quintile,
    y=income2.ubi_debt_reduction_50,
    text=income2.ubi_debt_reduction_50,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=networth2.networth_pp_quintile2,
    y=networth2.ed_debt_debt_reduction_50,
    text=networth2.ed_debt_debt_reduction_50,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=networth2.networth_pp_quintile2,
    y=networth2.ubi_debt_reduction_50,
    text=networth2.ubi_debt_reduction_50,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=poor2.original_poor,
    y=poor2.ed_debt_debt_reduction_50,
    text=poor2.ed_debt_debt_reduction_50,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=poor2.original_poor,
    y=poor2.ubi_debt_reduction_50,
    text=poor2.ubi_debt_reduction_50,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))


fig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', plot_bgcolor='white')
fig.update_traces(texttemplate='%{text}%', textposition='outside')

fig.update_xaxes(
        tickangle = 0,
        title_text = &quot;Demographic of head of household&quot;,
        tickfont = {&quot;size&quot;: 14},
        title_standoff = 25)

fig.update_yaxes(
        title_text = &quot;Percent decrease of people in debt&quot;,
        ticksuffix =&quot;%&quot;,
        tickfont = {'size':14},
        title_standoff = 25,
        range=[-60,0])

fig.update_xaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_yaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_layout(title_text='Percent decrease of people in debt by race')

fig.update_layout(barmode='group')

fig.update_layout(
    updatemenus=[go.layout.Updatemenu(
        active=0,
        buttons=list([
            dict(label=&quot;Race&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[True,True,False,False,False,False,False,False,False,False,False,False]},
                       {'title':'Percent decrease of people in debt by race',
                        'showlegend':True}]),
            
            dict(label=&quot;Education&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,True,True, False, False,False,False,False,False,False,False]},
                       {'title':'Percent decrease of people in debt by education level',
                        'showlegend':True}]),
            
            dict(label=&quot;Age&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, True, True,False,False,False,False,False,False]},
                       {'title':'Percent decrease of people in debt by age level',
                        'showlegend':True}]),
            
            dict(label=&quot;Income&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False,False,False,False,True,True,False,False,False,False]},
                       {'title':'Percent decrease of people in debt by income quintile',
                        'showlegend':True}]),
            
            dict(label=&quot;Networth&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, False, False,False,False,True,True,False,False]},
                       {'title':'Percent decrease of people in debt by net worth quintile',
                        'showlegend':True}]),
            
            dict(label=&quot;Poverty Status&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, False, False,False,False,False,False,True,True]},
                       {'title':'Percent decrease of people in debt by poverty status',
                        'showlegend':True}])
                        ]),
        
            direction=&quot;down&quot;,
            pad={&quot;r&quot;: 10, &quot;t&quot;: 10},
            showactive=True,
            x=-0.35,
            xanchor=&quot;left&quot;,
            y=1.1,
            yanchor=&quot;top&quot;
    
    )])

fig.show(config=config)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f5() {
  var x = document.getElementById(&quot;asset_code_5&quot;);
  var b = document.getElementById(&quot;button5&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset5&quot;).load(&quot;/assets/markdown_assets/student-debt/2020-11-17-student-debt-asset-5.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset5&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;racial-wealth-gaps&quot;&gt;Racial wealth gaps&lt;/h3&gt;

&lt;p&gt;While much of the rhetoric surrounding student debt relief has been &lt;a href=&quot;https://www.businessinsider.com/how-eliminating-student-debt-would-close-the-racial-wealth-gap-2019-6&quot;&gt;centered&lt;/a&gt; around the racial wealth gap, a budget-equivalent universal payment would be stronger at reducing the median gap for both Black and Hispanics Americans. Considering the mean racial wealth gaps, universal payments also reduce the White/Hispanic gap more, though student debt cancellation reduces the White/Black gap more.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button6&quot; onclick=&quot;f6()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_6&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
racial_wealth_gap = (racial_wealth_gap).round(1)

fig = go.Figure()

groups = ['Hispanic mean', 'Hispanic median', 'Black mean', 'Black median']

status_quo_ratio = [racial_wealth_gap.ratios[1],
                   racial_wealth_gap.ratios[0],
                   racial_wealth_gap.ratios[2],
                   racial_wealth_gap.ratios[3],]

ubi_ratio = [racial_wealth_gap.ratios[5],
            racial_wealth_gap.ratios[4],
            racial_wealth_gap.ratios[6],
            racial_wealth_gap.ratios[7],]

ed_debt_ratio = [racial_wealth_gap.ratios[9],
                racial_wealth_gap.ratios[8],
                racial_wealth_gap.ratios[10],
                racial_wealth_gap.ratios[11],]


fig = go.Figure(data=[
    go.Bar(name='Status quo', x=groups, y=status_quo_ratio, 
                                    marker_color=GRAY,
          text=status_quo_ratio),
    
        
    go.Bar(name='$50k student&lt;br /&gt;debt cancellation', x=groups, y=ed_debt_ratio,
                                      marker_color=LIGHT_BLUE,
                                      text=ed_debt_ratio),
    
    go.Bar(name='Budget-equiavalent&lt;br /&gt;universal payment', x=groups, y=ubi_ratio, 
                                    marker_color=DARK_BLUE,
          text=ubi_ratio),
])

fig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', plot_bgcolor='white')
fig.update_traces(texttemplate='%{text}', textposition='outside')
fig.update_layout(title_text='Racial wealth gap by reform')

fig.update_xaxes(
        tickangle = 0,
        title_text = &quot;&quot;,
        tickfont = {&quot;size&quot;: 14},
        title_standoff = 25)

fig.update_yaxes(
        title_text = &quot;Ratio of white wealth statistic to demographic&quot;,
        ticksuffix =&quot;&quot;,
        tickprefix = &quot;&quot;,
        tickfont = {'size':14},
        title_standoff = 25,
        range=[0,10])

fig.update_xaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_yaxes(title_font=dict(size=14, family='Roboto', color='black'))

fig.update_layout(barmode='group')

fig.show(config=config)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f6() {
  var x = document.getElementById(&quot;asset_code_6&quot;);
  var b = document.getElementById(&quot;button6&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset6&quot;).load(&quot;/assets/markdown_assets/student-debt/2020-11-17-student-debt-asset-6.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset6&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;inequality-impacts&quot;&gt;Inequality impacts&lt;/h3&gt;

&lt;p&gt;For income inequality (and poverty), I follow &lt;a href=&quot;https://finaid.org/loans/forgivenesstaxability&quot;&gt;IRS guidelines&lt;/a&gt; in treating student loan forgiveness as income, though I do not estimate its tax liability. I calculate inequality using the Gini index, which goes from zero (perfect equality) to one (one person holds all the income/wealth). Student debt forgiveness reduces wealth inequality slightly more than a budget equivalent-universal payment; however, universal payments reduce income inequality more.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button7&quot; onclick=&quot;f7()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_7&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# Gini chart

# Calculate the change in gini index for income of each reform
start_gini = mdf.gini(scf, 'income_pp', w='wgt_numper').round(3)
ubi_gini = mdf.gini(scf, 'ubi_income_pp', w='wgt_numper').round(3)
ed_gini = mdf.gini(scf, 'no_debt_income_pp', w='wgt_numper').round(3)
ubi_gini_50 = mdf.gini(scf, 'ubi_income_pp_50', w='wgt_numper').round(3)
ubi_gini_50_phase_out = mdf.gini(scf, 'ubi_income_pp_50_phase_out', w='wgt_numper').round(3)
ubi_gini_10 = mdf.gini(scf, 'ubi_income_pp_10', w='wgt_numper').round(3)
ed_gini_10 = mdf.gini(scf, 'no_debt_income_pp_10', w='wgt_numper').round(3)
ed_gini_50 = mdf.gini(scf, 'no_debt_income_pp_50', w='wgt_numper').round(3)
ed_gini_50_phase_out = mdf.gini(scf, 'no_debt_income_pp_50_phase_out', w='wgt_numper').round(3)

change_ubi_gini = (((ubi_gini - start_gini) / start_gini) * 100).round(1)
change_ubi_gini_50 = (((ubi_gini_50 - start_gini) / start_gini) * 100).round(1)
change_ubi_gini_50_phase_out = (((ubi_gini_50_phase_out - start_gini) / start_gini) * 100).round(1)
change_ubi_gini_10 = (((ubi_gini_10 - start_gini) / start_gini) * 100).round(1)

change_ed_gini = (((ed_gini - start_gini) / start_gini) * 100).round(1)
change_ed_gini_50 = (((ed_gini_50 - start_gini) / start_gini) * 100).round(1)
change_ed_gini_50_phase_out = (((ed_gini_50_phase_out - start_gini) / start_gini) * 100).round(1)
change_ed_gini_10 = (((ed_gini_10 - start_gini) / start_gini) * 100).round(1)

# Calculate the change in gini index for networth of each reform
start_gini_networth = mdf.gini(scf, 'networth_pp', w='wgt_numper').round(3)
ubi_gini_networth = mdf.gini(scf, 'ubi_networth_pp', w='wgt_numper').round(3)
ed_gini_networth = mdf.gini(scf, 'no_debt_networth_pp', w='wgt_numper').round(3)
ubi_gini_50_networth = mdf.gini(scf, 'ubi_networth_pp_50', w='wgt_numper').round(3)
ubi_gini_50_phase_out_networth = mdf.gini(scf, 'ubi_networth_pp_50_phase_out', w='wgt_numper').round(3)
ubi_gini_10_networth = mdf.gini(scf, 'ubi_networth_pp_10', w='wgt_numper').round(3)
ed_gini_10_networth = mdf.gini(scf, 'no_debt_networth_pp_10', w='wgt_numper').round(3)
ed_gini_50_networth = mdf.gini(scf, 'no_debt_networth_pp_50', w='wgt_numper').round(3)
ed_gini_50_phase_out_networth = mdf.gini(scf, 'no_debt_networth_pp_50_phase_out', w='wgt_numper').round(3)

change_ubi_gini_networth = (((ubi_gini_networth - start_gini_networth) / start_gini_networth) * 100).round(2)
change_ubi_gini_50_networth = (((ubi_gini_50_networth - start_gini_networth) / start_gini_networth) * 100).round(2)
change_ubi_gini_50_phase_out_networth = (((ubi_gini_50_phase_out_networth - start_gini_networth) / start_gini_networth) * 100).round(2)
change_ubi_gini_10_networth = (((ubi_gini_10_networth - start_gini_networth) / start_gini_networth) * 100).round(2)

change_ed_gini_networth = (((ed_gini_networth - start_gini_networth) / start_gini_networth) * 100).round(2)
change_ed_gini_50_networth = (((ed_gini_50_networth - start_gini_networth) / start_gini_networth) * 100).round(2)
change_ed_gini_50_phase_out_networth = (((ed_gini_50_phase_out_networth - start_gini_networth) / start_gini_networth) * 100).round(2)
change_ed_gini_10_networth = (((ed_gini_10_networth - start_gini_networth) / start_gini_networth) * 100).round(2)

racial_wealth_gap = (racial_wealth_gap).round(1)

fig = go.Figure()

metric = ['Wealth', 'Income']

status_quo_gini = [start_gini_networth,
               start_gini]

ubi_gini = [ubi_gini_50_networth,
           ubi_gini_50]

ed_debt_gini = [ed_gini_50_networth,
               ed_gini_50]



fig = go.Figure(data=[
    go.Bar(name='Status quo', x=metric, y=status_quo_gini, 
                                    marker_color=GRAY,
          text=status_quo_gini),
    
        
    go.Bar(name='$50k student&lt;br /&gt;debt cancellation', x=metric, y=ed_debt_gini,
                                      marker_color=LIGHT_BLUE,
                                      text=ed_debt_gini),
    
    go.Bar(name='Budget-equivalent&lt;br /&gt;universal payment', x=metric, y=ubi_gini, 
                                    marker_color=DARK_BLUE,
          text=ubi_gini)

])

fig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', plot_bgcolor='white')
fig.update_traces(texttemplate='%{text}', textposition='outside')
fig.update_layout(title_text='Inequality by reform')

fig.update_xaxes(
        tickangle = 0,
        title_text = &quot;&quot;,
        tickfont = {&quot;size&quot;: 14},
        title_standoff = 25)

fig.update_yaxes(
        title_text = &quot;Gini index&quot;,
        ticksuffix =&quot;&quot;,
        tickprefix = &quot;&quot;,
        tickfont = {'size':14},
        title_standoff = 25,
        range=[0,1])

fig.update_xaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_yaxes(title_font=dict(size=14, family='Roboto', color='black'))

fig.update_layout(barmode='group')
config = {'displayModeBar': False}

fig.show(config=config)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f7() {
  var x = document.getElementById(&quot;asset_code_7&quot;);
  var b = document.getElementById(&quot;button7&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset7&quot;).load(&quot;/assets/markdown_assets/student-debt/2020-11-17-student-debt-asset-7.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset7&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;poverty-impacts&quot;&gt;Poverty impacts&lt;/h3&gt;

&lt;p&gt;Across every demographic and metric, universal payments would cut poverty rates at a higher rate than student debt cancellation. Overall, universal payments would cut poverty by 52 percent, while cancelling $50,000 in student debt would cut poverty by 14 percent. Hispanic and Black poverty would fall 63 percent and 47 percent under universal payments, respectively, but only 7 percent and 11 percent under student debt cancellation. Student debt cancellation would cut poverty for people in households headed by people without a high school diploma by 1 percent, while universal payments would cut it by 46 percent. Universal payments would even eliminate poverty for Americans in the second income quintile.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button8&quot; onclick=&quot;f8()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_8&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
## Percent reduction in poverty rate by reform ##

fig = go.Figure()

fig.add_trace(go.Bar(
    x=race2.race,
    y=race2.ed_debt_poverty_reduction_50	,
    text=race2.ed_debt_poverty_reduction_50	,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE
))

fig.add_trace(go.Bar(
    x=race2.race,
    y=race2.ubi_poverty_reduction_50,
    text= race2.ubi_poverty_reduction_50,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE
))

fig.add_trace(go.Bar(
    x=education2.edcl,
    y=education2.ed_debt_poverty_reduction_50	,
    text=education2.ed_debt_poverty_reduction_50	,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=education2.edcl,
    y=education2.ubi_poverty_reduction_50,
    text=education2.ubi_poverty_reduction_50,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))


fig.add_trace(go.Bar(
    x=age2.agecl,
    y=age2.ed_debt_poverty_reduction_50	,
    text=age2.ed_debt_poverty_reduction_50	,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=age2.agecl,
    y=age2.ubi_poverty_reduction_50,
    text=age2.ubi_poverty_reduction_50,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=income2.income_pp_quintile,
    y=income2.ed_debt_poverty_reduction_50,
    text=income2.ed_debt_poverty_reduction_50,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=income2.income_pp_quintile,
    y=income2.ubi_poverty_reduction_50,
    text=income2.ubi_poverty_reduction_50,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=networth2.networth_pp_quintile2,
    y=networth2.ed_debt_poverty_reduction_50,
    text=networth2.ed_debt_poverty_reduction_50,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=networth2.networth_pp_quintile2,
    y=networth2.ubi_poverty_reduction_50,
    text=networth2.ubi_poverty_reduction_50,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=poor2.original_poor,
    y=poor2.ed_debt_poverty_reduction_50,
    text=poor2.ed_debt_poverty_reduction_50,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=poor2.original_poor,
    y=poor2.ubi_poverty_reduction_50,
    text=poor2.ubi_poverty_reduction_50,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))


fig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', plot_bgcolor='white')
fig.update_traces(texttemplate='%{text}%', textposition='outside')

fig.update_xaxes(
        tickangle = 0,
        title_text = &quot;Demographic of head of household&quot;,
        tickfont = {&quot;size&quot;: 14},
        title_standoff = 25)

fig.update_yaxes(
        title_text = &quot;Poverty reduction&quot;,
        ticksuffix =&quot;&quot;,
        tickfont = {'size':14},
        title_standoff = 25,
        range=[-105,0])

fig.update_xaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_yaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_layout(title_text='Poverty reduction by race')

fig.update_layout(barmode='group')

fig.update_layout(
    updatemenus=[go.layout.Updatemenu(
        active=0,
        buttons=list([
            dict(label=&quot;Race&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[True,True,False,False,False,False,False,False,False,False,False,False]},
                       {'title':'Poverty reduction by race',
                        'showlegend':True}]),
            
            dict(label=&quot;Education&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,True,True, False, False,False,False,False,False,False,False]},
                       {'title':'Poverty reduction by education level',
                        'showlegend':True}]),
            
            dict(label=&quot;Age&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, True, True,False,False,False,False,False,False]},
                       {'title':'Poverty reduction by age group',
                        'showlegend':True}]),
            
            dict(label=&quot;Income&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False,False,False,False,True,True,False,False,False,False]},
                       {'title':'Poverty reduction by income quintile',
                        'showlegend':True}]),
            
            dict(label=&quot;Networth&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, False, False,False,False,True,True,False,False]},
                       {'title':'Poverty reduction by net worth quintile',
                        'showlegend':True}]),
            
            dict(label=&quot;Poverty Status&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, False, False,False,False,False,False,True,True]},
                       {'title':'Poverty reduction by poverty status',
                        'showlegend':True}])
                        ]),
        
            direction=&quot;down&quot;,
            pad={&quot;r&quot;: 10, &quot;t&quot;: 10},
            showactive=True,
            x=-0.35,
            xanchor=&quot;left&quot;,
            y=1.1,
            yanchor=&quot;top&quot;
    
    )])
config = {'displayModeBar': False}

fig.show(config=config)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f8() {
  var x = document.getElementById(&quot;asset_code_8&quot;);
  var b = document.getElementById(&quot;button8&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset8&quot;).load(&quot;/assets/markdown_assets/student-debt/2020-11-17-student-debt-asset-8.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset8&quot;&gt;&lt;/div&gt;

&lt;p&gt;Universal payments also outperform student debt cancellation across all demographics on poverty gap reduction.  The poverty gap is defined as the sum of the gaps between a household’s resources and its poverty threshold across all households in poverty. The poverty gap would fall 69 percent under universal payments and 15 percent under student debt cancellation.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button9&quot; onclick=&quot;f9()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_9&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
## Percent in poverty by reform ##

fig = go.Figure()

fig.add_trace(go.Bar(
    x=race2.race,
    y=race2.ed_debt_gap_reduction_50	,
    text=race2.ed_debt_gap_reduction_50	,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE
))

fig.add_trace(go.Bar(
    x=race2.race,
    y=race2.ubi_gap_reduction_50,
    text= race2.ubi_gap_reduction_50,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE
))

fig.add_trace(go.Bar(
    x=education2.edcl,
    y=education2.ed_debt_gap_reduction_50	,
    text=education2.ed_debt_gap_reduction_50	,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=education2.edcl,
    y=education2.ubi_gap_reduction_50,
    text=education2.ubi_gap_reduction_50,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=age2.agecl,
    y=age2.ed_debt_gap_reduction_50,
    text=age2.ed_debt_gap_reduction_50,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=age2.agecl,
    y=age2.ubi_gap_reduction_50,
    text=age2.ubi_gap_reduction_50,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=income2.income_pp_quintile,
    y=income2.ed_debt_gap_reduction_50,
    text=income2.ed_debt_gap_reduction_50,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=income2.income_pp_quintile,
    y=income2.ubi_gap_reduction_50,
    text=income2.ubi_gap_reduction_50,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=networth2.networth_pp_quintile2,
    y=networth2.ed_debt_gap_reduction_50,
    text=networth2.ed_debt_gap_reduction_50,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=networth2.networth_pp_quintile2,
    y=networth2.ubi_gap_reduction_50,
    text=networth2.ubi_gap_reduction_50,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=poor2.original_poor,
    y=poor2.ed_debt_gap_reduction_50	,
    text=poor2.ed_debt_gap_reduction_50	,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=poor2.original_poor,
    y=poor2.ubi_gap_reduction_50,
    text=poor2.ubi_gap_reduction_50,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))


fig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', plot_bgcolor='white')
fig.update_traces(texttemplate='%{text}%', textposition='outside')

fig.update_xaxes(
        tickangle = 0,
        title_text = &quot;Demographic of head of household&quot;,
        tickfont = {&quot;size&quot;: 14},
        title_standoff = 25)

fig.update_yaxes(
        title_text = &quot;Poverty gap reduction&quot;,
        ticksuffix =&quot;%&quot;,
        tickprefix = &quot;&quot;,
        tickfont = {'size':14},
        title_standoff = 25,
        range=[-100,0])

fig.update_xaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_yaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_layout(title_text='Poverty gap reduction by race')

fig.update_layout(barmode='group')

fig.update_layout(
    updatemenus=[go.layout.Updatemenu(
        active=0,
        buttons=list([
            dict(label=&quot;Race&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[True,True,False,False,False,False,False,False,False,False,False,False]},
                       {'title':'Poverty gap reduction by race',
                        'showlegend':True}]),
            
            dict(label=&quot;Education&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,True,True, False, False,False,False,False,False,False,False]},
                       {'title':'Poverty gap reduction by education level',
                        'showlegend':True}]),
            
            dict(label=&quot;Age&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, True, True,False,False,False,False,False,False]},
                       {'title':'Poverty gap reduction by age level',
                        'showlegend':True}]),
            
            dict(label=&quot;Income&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False,False,False,False,True,True,False,False,False,False]},
                       {'title':'Poverty gap reduction by income quintile',
                        'showlegend':True}]),
            
            dict(label=&quot;Networth&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, False, False,False,False,True,True,False,False]},
                       {'title':'Poverty gap reduction by net worth quintile',
                        'showlegend':True}]),
            
            dict(label=&quot;Poverty Status&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, False, False,False,False,False,False,True,True]},
                       {'title':'Percent reduction in poverty gap by poverty status',
                        'showlegend':True}])
                        ]),
        
            direction=&quot;down&quot;,
            pad={&quot;r&quot;: 10, &quot;t&quot;: 10},
            showactive=True,
            x=-0.35,
            xanchor=&quot;left&quot;,
            y=1.1,
            yanchor=&quot;top&quot;
    
    )])

config = {'displayModeBar': False}

fig.show(config=config)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f9() {
  var x = document.getElementById(&quot;asset_code_9&quot;);
  var b = document.getElementById(&quot;button9&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset9&quot;).load(&quot;/assets/markdown_assets/student-debt/2020-11-17-student-debt-asset-9.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset9&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;comparing-other-student-debt-proposals&quot;&gt;Comparing other student debt proposals&lt;/h2&gt;

&lt;p&gt;While this paper focuses on comparing the $50,000 forgiveness currently proposed by Senators Warren and Schumer, I found similar results comparing other proposals. Whether comparing full forgiveness to a budget-equivalent universal payment of $3,650, or Warren’s phased-out $50,000 forgiveness to $2,100 payments, or $10,000 forgiveness to $770 payments, universal payments benefit a larger share of Americans and reduce poverty and income inequality by a larger amount, while student debt cancellation reduces wealth inequality more.&lt;/p&gt;

&lt;p&gt;The charts below show how all four plans would impact each metric; for more charts on each plan, see the Appendix.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button10&quot; onclick=&quot;f10()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_10&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
comparison = race[race['race'] == 'All']

fig = go.Figure()

reform = ['All', '$50k', '$50k phase-out', '$10k']

ubi_all = [comparison.ubi_poverty_reduction[4],
           comparison.ubi_poverty_reduction_50[4],
           all2.ubi_poverty_reduction_50_phase_out[0],
           comparison.ubi_poverty_reduction_10[4]]

ed_debt_all = [comparison.ed_debt_poverty_reduction[4], 
            comparison.ed_debt_poverty_reduction_50[4],
               all2.ed_debt_poverty_reduction_50_phase_out[0],
            comparison.ed_debt_poverty_reduction_10[4]]



fig = go.Figure(data=[
    
    go.Bar(name='Student&lt;br /&gt;debt cancellation', x=reform, y=ed_debt_all,
                                      marker_color=LIGHT_BLUE,
          text=ed_debt_all),
    
    go.Bar(name='Budget-equivalent&lt;br /&gt;universal payment', x=reform, y=ubi_all, 
                                    marker_color=DARK_BLUE,
          text=ubi_all)
    
])

fig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', plot_bgcolor='white')
fig.update_traces(texttemplate='%{text}%', textposition='outside')
fig.update_layout(title_text='Poverty reduction by reform')


fig.update_xaxes(
        tickangle = 0,
        title_text = &quot;Cancellation amount&quot;,
        tickfont = {&quot;size&quot;: 14},
        title_standoff = 25)

fig.update_yaxes(
        title_text = &quot;Change to poverty rate&quot;,
        ticksuffix =&quot;%&quot;,
        tickprefix = &quot;&quot;,
        tickfont = {'size':14},
        title_standoff = 25,
        range=[-100,0])

fig.update_xaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_yaxes(title_font=dict(size=14, family='Roboto', color='black'))

fig.update_layout(barmode='group')

fig.show(config=config)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f10() {
  var x = document.getElementById(&quot;asset_code_10&quot;);
  var b = document.getElementById(&quot;button10&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset10&quot;).load(&quot;/assets/markdown_assets/student-debt/2020-11-17-student-debt-asset-10.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset10&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button11&quot; onclick=&quot;f11()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_11&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# gini_networth chart
fig = go.Figure()

ubi_all_gini_networth = [change_ubi_gini_networth,
           change_ubi_gini_50_networth,
           change_ubi_gini_50_phase_out_networth,
               change_ubi_gini_10_networth]

ed_debt_all_gini_networth = [change_ed_gini_networth,
           change_ed_gini_50_networth,
           change_ed_gini_50_phase_out_networth,
               change_ed_gini_10_networth]



fig = go.Figure(data=[
    go.Bar(name='Student&lt;br /&gt;debt cancellation', x=reform,
           y=ed_debt_all_gini_networth,
           marker_color=LIGHT_BLUE,
           text=ed_debt_all_gini_networth),
    
    go.Bar(name='Budget-equivalent&lt;br /&gt;universal payment', x=reform, y=ubi_all_gini_networth, 
                                    marker_color=DARK_BLUE,
          text=ubi_all_gini_networth)
    

])

fig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', plot_bgcolor='white')
fig.update_traces(texttemplate='%{text}%', textposition='outside')
fig.update_layout(title_text='Wealth inequality by reform')

fig.update_xaxes(
        tickangle = 0,
        title_text = &quot;Cancellation amount&quot;,
        tickfont = {&quot;size&quot;: 14},
        title_standoff = 25)

fig.update_yaxes(
        title_text = &quot;Change in Gini index of per-capita wealth&quot;,
        ticksuffix =&quot;%&quot;,
        tickprefix = &quot;&quot;,
        tickfont = {'size':14},
        title_standoff = 25,
        range=[-2,0])

fig.update_xaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_yaxes(title_font=dict(size=14, family='Roboto', color='black'))

fig.update_layout(barmode='group')
fconfig = {'displayModeBar': False}

fig.show(config=config)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f11() {
  var x = document.getElementById(&quot;asset_code_11&quot;);
  var b = document.getElementById(&quot;button11&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset11&quot;).load(&quot;/assets/markdown_assets/student-debt/2020-11-17-student-debt-asset-11.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset11&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button12&quot; onclick=&quot;f12()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_12&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# Gini chart
fig = go.Figure()

ubi_all_gini = [change_ubi_gini,
           change_ubi_gini_50,
           change_ubi_gini_50_phase_out,
               change_ubi_gini_10]

ed_debt_all_gini = [change_ed_gini,
           change_ed_gini_50,
           change_ed_gini_50_phase_out,
               change_ed_gini_10]



fig = go.Figure(data=[
    
    go.Bar(name='Student&lt;br /&gt;debt cancellation', x=reform, y=ed_debt_all_gini,
                                      marker_color=LIGHT_BLUE,
          text=ed_debt_all_gini),
    
    go.Bar(name='Budget-equivalent&lt;br /&gt;universal payment', x=reform, y=ubi_all_gini, 
                                    marker_color=DARK_BLUE,
          text=ubi_all_gini),
    
])

fig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', plot_bgcolor='white')
fig.update_traces(texttemplate='%{text}%', textposition='outside')
fig.update_layout(title_text='Income inequality by reform')

fig.update_xaxes(
        tickangle = 0,
        title_text = &quot;Cancellation amount&quot;,
        tickfont = {&quot;size&quot;: 14},
        title_standoff = 25)

fig.update_yaxes(
        title_text = &quot;Change in Gini index of per-capita income&quot;,
        ticksuffix =&quot;%&quot;,
        tickprefix = &quot;&quot;,
        tickfont = {'size':14},
        title_standoff = 25,
        range=[-10,0])

fig.update_xaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_yaxes(title_font=dict(size=14, family='Roboto', color='black'))

fig.update_layout(barmode='group')
config = {'displayModeBar': False}

fig.show(config=config)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f12() {
  var x = document.getElementById(&quot;asset_code_12&quot;);
  var b = document.getElementById(&quot;button12&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset12&quot;).load(&quot;/assets/markdown_assets/student-debt/2020-11-17-student-debt-asset-12.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset12&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button13&quot; onclick=&quot;f13()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_13&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
fig = go.Figure()

ubi_all = [comparison.percent_better_off_with_ubi[4],
           comparison.percent_better_off_with_ubi_50[4],
           all2.percent_better_off_with_ubi_50_phase_out[0],
           comparison.percent_better_off_with_ubi_10[4]]



fig = go.Figure(data=[
    go.Bar(name='Budget-equivalent&lt;br /&gt;universal payment', x=reform, y=ubi_all, 
                                    marker_color=DARK_BLUE,
          text=ubi_all)
    
])

fig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', plot_bgcolor='white')
fig.update_traces(texttemplate='%{text}%', textposition='outside')
fig.update_layout(title_text='Share better off with universal payments than student debt cancellation by reform')

fig.update_xaxes(
        tickangle = 0,
        title_text = &quot;Cancellation amount&quot;,
        tickfont = {&quot;size&quot;: 14},
        title_standoff = 25)

fig.update_yaxes(
        title_text = &quot;Share of people better off with universal payments&quot;,
        ticksuffix =&quot;%&quot;,
        tickprefix = &quot;&quot;,
        tickfont = {'size':14},
        title_standoff = 25,
        range=[0,100])

fig.update_xaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_yaxes(title_font=dict(size=14, family='Roboto', color='black'))

fig.update_layout(barmode='group')

fig.show(config=config)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f13() {
  var x = document.getElementById(&quot;asset_code_13&quot;);
  var b = document.getElementById(&quot;button13&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset13&quot;).load(&quot;/assets/markdown_assets/student-debt/2020-11-17-student-debt-asset-13.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset13&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Because the majority of Americans do not have student debt, the majority of Americans will not benefit from student debt cancellation, no matter the size of the proposal.  Student debt cancellation primarily benefits high income earners with a college degree, a demographic &lt;a href=&quot;https://fordhaminstitute.org/national/research/what-you-make-depends-on-where-you-live&quot;&gt;likely to see incomes rise over time&lt;/a&gt;, while leaving out some of the poorest Americans. Still, Senator Warren and other proponents correctly identify it as a way to &lt;a href=&quot;https://rooseveltinstitute.org/wp-content/uploads/2020/08/RI_StudentDebtForgiveness_WorkingPaper_202008.pdf&quot;&gt;cut inequality and the racial wealth gap&lt;/a&gt;. Student debt has reached enormous levels, making its cancellation a major program that would benefit tens of millions, and among degree holders, it would disproportionately benefit those from less-advantaged backgrounds.&lt;/p&gt;

&lt;p&gt;But the enormity of the endeavor justifies careful comparison to other policies. While student debt cancellation reduces wealth inequality more than universal payments, it mostly underperforms simply sending every American a check on reducing racial wealth gaps. On all other outcomes, it fares even worse: universal payments would reduce poverty and income inequality more than student debt cancellation, regardless of the particular policy design. This analysis may even understate the relative progressivity of universal payments, given it doesn’t capitalize the higher future incomes associated with college education (though limitations of the SCF data may counter that).&lt;/p&gt;

&lt;p&gt;Means-testing the student debt cancellation closes some of the gap, but introduces its own challenges. Warren’s proposal is effectively a retroactive additional marginal tax of 33 percent on student debtors’ earnings between $100,000 and $250,000. This would make this group some of the most highly taxed in the country, with total marginal tax rates likely exceeding 70 percent after considering state and federal income and payroll taxes (only &lt;a href=&quot;https://aspe.hhs.gov/system/files/aspe-files/260661/brief2-overviewmtranalyses.pdf&quot;&gt;low-income benefit recipients&lt;/a&gt; would face higher marginal taxes). Retroactive taxation may be &lt;a href=&quot;https://fas.org/sgp/crs/misc/R42791.pdf&quot;&gt;constitutional&lt;/a&gt;, but it arguably &lt;a href=&quot;https://www.cost.org/globalassets/cost/state-tax-resources-pdf-pages/cost-studies-articles-reports/law360-oped-on-retroactive-taxation-003.pdf&quot;&gt;threatens rule of law&lt;/a&gt;; people value knowing the payoff to their labor when making decisions about it.&lt;/p&gt;

&lt;p&gt;Universal payments have less quantifiable advantages, as well. A one-time debt cancellation excludes both people who recently paid off their student loans, and those about to incur it; universal payments reach all. By favoring college graduates over non-college graduates, student debt cancellation threatens to exacerbate political tensions between these demographics that &lt;a href=&quot;https://www.brookings.edu/research/2020-exit-polls-show-a-scrambling-of-democrats-and-republicans-traditional-bases/&quot;&gt;only rose in the 2020 election&lt;/a&gt;. If young people expect future rounds of student debt cancellation, they may also choose to take on more debt, which could in turn &lt;a href=&quot;http://taylornadauld.com/research/published_papers/Credit%20Supply%20and%20the%20Rise%20in%20College%20Tuition.pdf&quot;&gt;raise the cost of higher education&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While student debt cancellation makes progress toward egalitarian goals (and may have the advantage of &lt;a href=&quot;https://www.warren.senate.gov/imo/media/doc/Ltr%20to%20Warren%20re%20admin%20debt%20cancellation.pdf?fbclid=IwAR3x7goUzVOpD7vcp7XhPYPlYQPmzv7rTzfNIvwl9Y8claLM0p7fo017N-g&quot;&gt;skipping congressional approval&lt;/a&gt;), dollar-for-dollar, those goals are better achieved through universal payments.&lt;/p&gt;

&lt;h2 id=&quot;appendix&quot;&gt;Appendix&lt;/h2&gt;

&lt;h3 id=&quot;10k-relief&quot;&gt;$10k relief&lt;/h3&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button14&quot; onclick=&quot;f14()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_14&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
## Average Benefit by reform ##

fig = go.Figure()


fig.add_trace(go.Bar(
    x=race2.race,
    y=race2.ed_debt_change_10,
    text=race2.ed_debt_change_10,
    name='$10k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE
))

fig.add_trace(go.Bar(
    x=race2.race,
    y=race2.ubi_change_10,
    text= race2.ubi_change_10,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE
))


fig.add_trace(go.Bar(
    x=education2.edcl,
    y=education2.ed_debt_change_10,
    text=education2.ed_debt_change_10,
    name='$10k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=education2.edcl,
    y=education2.ubi_change_10,
    text=education2.ubi_change_10,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=age2.agecl,
    y=age2.ed_debt_change_10,
    text=age2.ed_debt_change_10,
    name='$10k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=age2.agecl,
    y=age2.ubi_change_10,
    text=age2.ubi_change_10,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=income2.income_pp_quintile,
    y=income2.ed_debt_change_10,
    text=income2.ed_debt_change_10,
    name='$10k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=income2.income_pp_quintile,
    y=income2.ubi_change_10,
    text=income2.ubi_change_10,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=networth2.networth_pp_quintile2,
    y=networth2.ed_debt_change_10,
    text=networth2.ed_debt_change_10,
    name='$10k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=networth2.networth_pp_quintile2,
    y=networth2.ubi_change_10,
    text=networth2.ubi_change_10,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=poor2.original_poor,
    y=poor2.ed_debt_change_10,
    text=poor2.ed_debt_change_10,
    name='$10k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=poor2.original_poor,
    y=poor2.ubi_change_10,
    text=poor2.ubi_change_10,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))


fig.update_layout(uniformtext_minsize=9, uniformtext_mode='hide', plot_bgcolor='white')
fig.update_traces(texttemplate='$%{text}', textposition='outside')

fig.update_xaxes(
        tickangle = 0,
        title_text = &quot;Demographic of head of household&quot;,
        tickfont = {&quot;size&quot;: 14},
        title_standoff = 25)

fig.update_yaxes(
        title_text = &quot;Average benefit&quot;,
        ticksuffix =&quot;&quot;,
        tickfont = {'size':14},
        title_standoff = 25,
        range=[0,2_000])

fig.update_xaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_yaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_layout(title_text='Average benefit by race')

fig.update_layout(barmode='group')

fig.update_layout(
    updatemenus=[go.layout.Updatemenu(
        active=0,
        buttons=list([
            dict(label=&quot;Race&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[True,True,False,False,False,False,False,False,False,False,False,False]},
                       {'title':'Average benefit of reform by race',
                        'showlegend':True}]),
            
            dict(label=&quot;Education&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,True,True, False, False,False,False,False,False,False,False]},
                       {'title':'Average benefit of reform by education level',
                        'showlegend':True}]),
            
            dict(label=&quot;Age&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, True, True,False,False,False,False,False,False]},
                       {'title':'Average benefit of reform by age level',
                        'showlegend':True}]),
            
            dict(label=&quot;Income&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False,False,False,False,True,True,False,False,False,False]},
                       {'title':'Average benefit of reform by income quintile',
                        'showlegend':True}]),
            
            dict(label=&quot;Networth&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, False, False,False,False,True,True,False,False]},
                       {'title':'Average benefit of reform by net worth quintile',
                        'showlegend':True}]),
            
            dict(label=&quot;Poverty Status&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, False, False,False,False,False,False,True,True]},
                       {'title':'Average benefit of reform by poverty status',
                        'showlegend':True}])
                        ]),
        
            direction=&quot;down&quot;,
            pad={&quot;r&quot;: 10, &quot;t&quot;: 10},
            showactive=True,
            x=-0.35,
            xanchor=&quot;left&quot;,
            y=1.1,
            yanchor=&quot;top&quot;
    
    )])

config = {'displayModeBar': False}

fig.show(config=config)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f14() {
  var x = document.getElementById(&quot;asset_code_14&quot;);
  var b = document.getElementById(&quot;button14&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset14&quot;).load(&quot;/assets/markdown_assets/student-debt/2020-11-17-student-debt-asset-14.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset14&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button15&quot; onclick=&quot;f15()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_15&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
## Percent better off with ed debt ##
fig = go.Figure()

fig.add_trace(go.Bar(x=race2['race'], y=race2['percent_better_off_with_ubi_10'], 
                     text=race2['percent_better_off_with_ubi_10'], name='race',
                     showlegend=False, marker_color=DARK_BLUE))

fig.add_trace(go.Bar(x=education2['edcl'], y=education2['percent_better_off_with_ubi_10'],
                     text=education2['percent_better_off_with_ubi_10'], name='education',
                     visible = False, showlegend=False, marker_color=DARK_BLUE))

fig.add_trace(go.Bar(x=age2['agecl'], y=age2['percent_better_off_with_ubi_10'], name='age',
                     text=age2['percent_better_off_with_ubi_10'], visible = False,
                     showlegend=False, marker_color=DARK_BLUE))

fig.add_trace(go.Bar(x=income2['income_pp_quintile'], y=income2['percent_better_off_with_ubi_10'],
                     text=income2['percent_better_off_with_ubi_10'], name='income', visible = False,
                     showlegend=False, marker_color=DARK_BLUE))

fig.add_trace(go.Bar(x=networth2['networth_pp_quintile2'],
                     text=networth2['percent_better_off_with_ubi_10'], y=networth2['percent_better_off_with_ubi_10'],
                     name='networth', visible = False, showlegend=False, marker_color=DARK_BLUE))

fig.add_trace(go.Bar(x=poor2['original_poor'], y=poor2['percent_better_off_with_ubi_10'],
                     text=poor2['percent_better_off_with_ubi_10'], name='poor',
                     visible = False, showlegend=False, marker_color=DARK_BLUE))


fig.update_layout(uniformtext_minsize=13, uniformtext_mode='hide', plot_bgcolor='white')
fig.update_traces(texttemplate='%{text}%', textposition='outside')

fig.update_xaxes(
        tickangle = 0,
        title_text = &quot;Demographic of head of household&quot;,
        tickfont = {&quot;size&quot;: 14},
        title_standoff = 25)

fig.update_yaxes(
        title_text = &quot;Share better off with universal payments&quot;,
        ticksuffix =&quot;%&quot;,
        tickfont = {'size':14},
        title_standoff = 25,
        range=[0,100])

fig.update_xaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_yaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_layout(title_text='Share better off with universal payment by race')

fig.update_layout(
    updatemenus=[go.layout.Updatemenu(
        active=0,
        buttons=list([
            dict(label=&quot;Race&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[True,False,False,False,False,False]},
                       {'title':'Share better off with universal payment by race',
                        'showlegend':True}]),
            dict(label=&quot;Education&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,True,False, False,False, False]},
                       {'title':'Share better off with universal payment by education level',
                        'showlegend':True}]),
            dict(label=&quot;Age&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,True, False, False, False]},
                       {'title':'Share better off with universal payment by age',
                        'showlegend':True}]),
            dict(label=&quot;Income&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False, True, False, False]},
                       {'title':'Share better off with universal payment by income quintile',
                        'showlegend':True}]),
            dict(label=&quot;Networth&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False, False, True, False]},
                       {'title':'Share better off with universal payment by net worth quintile',
                        'showlegend':True}]),
            dict(label=&quot;Poverty Status&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False, False, False, True]},
                       {'title':'Share better off with universal payment by poverty status',
                        'showlegend':True}]), 
            ]),
            direction=&quot;down&quot;,
            pad={&quot;r&quot;: 10, &quot;t&quot;: 10},
            showactive=True,
            x=-0.35,
            xanchor=&quot;left&quot;,
            y=1.1,
            yanchor=&quot;top&quot;
    
    )])

config = {'displayModeBar': False}

fig.show(config=config)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f15() {
  var x = document.getElementById(&quot;asset_code_15&quot;);
  var b = document.getElementById(&quot;button15&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset15&quot;).load(&quot;/assets/markdown_assets/student-debt/2020-11-17-student-debt-asset-15.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset15&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button16&quot; onclick=&quot;f16()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_16&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
## Percent decrease of people in debt by reform ##

fig = go.Figure()

fig.add_trace(go.Bar(
    x=race2.race,
    y=race2.ed_debt_debt_reduction_10,
    text=race2.ed_debt_debt_reduction_10,
    name='$10k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE
))

fig.add_trace(go.Bar(
    x=race2.race,
    y=race2.ubi_debt_reduction_10,
    text= race2.ubi_debt_reduction_10,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE
))


fig.add_trace(go.Bar(
    x=education2.edcl,
    y=education2.ed_debt_debt_reduction_10,
    text=education2.ed_debt_debt_reduction_10,
    name='$10k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=education2.edcl,
    y=education2.ubi_debt_reduction_10,
    text=education2.ubi_debt_reduction_10,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=age2.agecl,
    y=age2.ed_debt_debt_reduction_10,
    text=age2.ed_debt_debt_reduction_10,
    name='$10k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=age2.agecl,
    y=age2.ubi_debt_reduction_10,
    text=age2.ubi_debt_reduction_10,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=income2.income_pp_quintile,
    y=income2.ed_debt_debt_reduction_10,
    text=income2.ed_debt_debt_reduction_10,
    name='$10k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=income2.income_pp_quintile,
    y=income2.ubi_debt_reduction_10,
    text=income2.ubi_debt_reduction_10,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=networth2.networth_pp_quintile2,
    y=networth2.ubi_debt_reduction_10,
    text=networth2.ubi_debt_reduction_10,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=networth2.networth_pp_quintile2,
    y=networth2.ed_debt_debt_reduction_10,
    text=networth2.ed_debt_debt_reduction_10,
    name='$10k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=poor2.original_poor,
    y=poor2.ubi_debt_reduction_10,
    text=poor2.ubi_debt_reduction_10,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=poor2.original_poor,
    y=poor2.ed_debt_debt_reduction_10,
    text=poor2.ed_debt_debt_reduction_10,
    name='$10k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))


fig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', plot_bgcolor='white')
fig.update_traces(texttemplate='%{text}%', textposition='outside')


fig.update_xaxes(
        tickangle = 0,
        title_text = &quot;Demographic of head of household&quot;,
        tickfont = {&quot;size&quot;: 14},
        title_standoff = 25)

fig.update_yaxes(
        title_text = &quot;Net debt rate reduction&quot;,
        ticksuffix =&quot;%&quot;,
        tickfont = {'size':14},
        title_standoff = 25,
        range=[-40,0])

fig.update_xaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_yaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_layout(title_text='Net debt rate reduction by race')

fig.update_layout(barmode='group')

fig.update_layout(
    updatemenus=[go.layout.Updatemenu(
        active=0,
        buttons=list([
            dict(label=&quot;Race&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[True,True,False,False,False,False,False,False,False,False,False,False]},
                       {'title':'Net debt rate reduction by race',
                        'showlegend':True}]),
            
            dict(label=&quot;Education&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,True,True, False, False,False,False,False,False,False,False]},
                       {'title':'Net debt rate reduction by education level',
                        'showlegend':True}]),
            
            dict(label=&quot;Age&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, True, True,False,False,False,False,False,False]},
                       {'title':'Net debt rate reduction by age level',
                        'showlegend':True}]),
            
            dict(label=&quot;Income&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False,False,False,False,True,True,False,False,False,False]},
                       {'title':'Net debt rate reduction by income quintile',
                        'showlegend':True}]),
            
            dict(label=&quot;Networth&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, False, False,False,False,True,True,False,False]},
                       {'title':'Net debt rate reduction by net worth quintile',
                        'showlegend':True}]),
            
            dict(label=&quot;Poverty Status&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, False, False,False,False,False,False,True,True]},
                       {'title':'Net debt rate reduction by poverty status',
                        'showlegend':True}])
                        ]),
        
            direction=&quot;down&quot;,
            pad={&quot;r&quot;: 10, &quot;t&quot;: 10},
            showactive=True,
            x=-0.35,
            xanchor=&quot;left&quot;,
            y=1.1,
            yanchor=&quot;top&quot;
    
    )])

config = {'displayModeBar': False}

fig.show(config=config)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f16() {
  var x = document.getElementById(&quot;asset_code_16&quot;);
  var b = document.getElementById(&quot;button16&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset16&quot;).load(&quot;/assets/markdown_assets/student-debt/2020-11-17-student-debt-asset-16.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset16&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button17&quot; onclick=&quot;f17()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_17&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
## Percent reduction in poverty rate by reform ##

fig = go.Figure()

fig.add_trace(go.Bar(
    x=race2.race,
    y=race2.ed_debt_poverty_reduction_10	,
    text=race2.ed_debt_poverty_reduction_10	,
    name='$10k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE
))

fig.add_trace(go.Bar(
    x=race2.race,
    y=race2.ubi_poverty_reduction_10,
    text= race2.ubi_poverty_reduction_10,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE
))

fig.add_trace(go.Bar(
    x=education2.edcl,
    y=education2.ed_debt_poverty_reduction_10	,
    text=education2.ed_debt_poverty_reduction_10	,
    name='$10k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=education2.edcl,
    y=education2.ubi_poverty_reduction_10,
    text=education2.ubi_poverty_reduction_10,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=age2.agecl,
    y=age2.ed_debt_poverty_reduction_10	,
    text=age2.ed_debt_poverty_reduction_10	,
    name='$10k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=age2.agecl,
    y=age2.ubi_poverty_reduction_10,
    text=age2.ubi_poverty_reduction_10,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=income2.income_pp_quintile,
    y=income2.ed_debt_poverty_reduction_10,
    text=income2.ed_debt_poverty_reduction_10,
    name='$10k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=income2.income_pp_quintile,
    y=income2.ubi_poverty_reduction_10,
    text=income2.ubi_poverty_reduction_10,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=networth2.networth_pp_quintile2,
    y=networth2.ed_debt_poverty_reduction_10,
    text=networth2.ed_debt_poverty_reduction_10,
    name='$10k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=networth2.networth_pp_quintile2,
    y=networth2.ubi_poverty_reduction_10,
    text=networth2.ubi_poverty_reduction_10,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=poor.original_poor,
    y=poor.ed_debt_poverty_reduction_10,
    text=poor.ed_debt_poverty_reduction_10,
    name='$10k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=poor.original_poor,
    y=poor.ubi_poverty_reduction_10,
    text=poor.ubi_poverty_reduction_10,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))


fig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', plot_bgcolor='white')
fig.update_traces(texttemplate='%{text}%', textposition='outside')

fig.update_xaxes(
        tickangle = 0,
        title_text = &quot;Demographic of head of household&quot;,
        tickfont = {&quot;size&quot;: 14},
        title_standoff = 25)

fig.update_yaxes(
        title_text = &quot;Poverty reduction&quot;,
        ticksuffix =&quot;&quot;,
        tickfont = {'size':14},
        title_standoff = 25,
        range=[-55,0])

fig.update_xaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_yaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_layout(title_text='Poverty reduction by race')

fig.update_layout(barmode='group')

fig.update_layout(
    updatemenus=[go.layout.Updatemenu(
        active=0,
        buttons=list([
            dict(label=&quot;Race&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[True,True,False,False,False,False,False,False,False,False,False,False]},
                       {'title':'Poverty reduction by race',
                        'showlegend':True}]),
            
            dict(label=&quot;Education&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,True,True, False, False,False,False,False,False,False,False]},
                       {'title':'Poverty reduction by education level',
                        'showlegend':True}]),
            
            dict(label=&quot;Age&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, True, True,False,False,False,False,False,False]},
                       {'title':'Poverty reduction by age group',
                        'showlegend':True}]),
            
            dict(label=&quot;Income&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False,False,False,False,True,True,False,False,False,False]},
                       {'title':'Poverty reduction by income quintile',
                        'showlegend':True}]),
            
            dict(label=&quot;Networth&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, False, False,False,False,True,True,False,False]},
                       {'title':'Poverty reduction by net worth quintile',
                        'showlegend':True}]),
            
            dict(label=&quot;Poverty Status&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, False, False,False,False,False,False,True,True]},
                       {'title':'Poverty reduction by poverty status',
                        'showlegend':True}])
                        ]),
        
            direction=&quot;down&quot;,
            pad={&quot;r&quot;: 10, &quot;t&quot;: 10},
            showactive=True,
            x=-0.35,
            xanchor=&quot;left&quot;,
            y=1.1,
            yanchor=&quot;top&quot;
    
    )])

config = {'displayModeBar': False}

fig.show(config=config)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f17() {
  var x = document.getElementById(&quot;asset_code_17&quot;);
  var b = document.getElementById(&quot;button17&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset17&quot;).load(&quot;/assets/markdown_assets/student-debt/2020-11-17-student-debt-asset-17.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset17&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button18&quot; onclick=&quot;f18()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_18&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
## Percent in poverty by reform ##

fig = go.Figure()

fig.add_trace(go.Bar(
    x=race2.race,
    y=race2.ed_debt_gap_reduction_10	,
    text=race2.ed_debt_gap_reduction_10	,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE
))

fig.add_trace(go.Bar(
    x=race2.race,
    y=race2.ubi_gap_reduction_10,
    text= race2.ubi_gap_reduction_10,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE
))

fig.add_trace(go.Bar(
    x=education2.edcl,
    y=education2.ed_debt_gap_reduction_10	,
    text=education2.ed_debt_gap_reduction_10	,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=education2.edcl,
    y=education2.ubi_gap_reduction_10,
    text=education2.ubi_gap_reduction_10,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=age2.agecl,
    y=age2.ed_debt_gap_reduction_10,
    text=age2.ed_debt_gap_reduction_10,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=age2.agecl,
    y=age2.ubi_gap_reduction_10,
    text=age2.ubi_gap_reduction_10,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))


fig.add_trace(go.Bar(
    x=income2.income_pp_quintile,
    y=income2.ed_debt_gap_reduction_10,
    text=income2.ed_debt_gap_reduction_10,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=income2.income_pp_quintile,
    y=income2.ubi_gap_reduction_10,
    text=income2.ubi_gap_reduction_10,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=networth2.networth_pp_quintile2,
    y=networth2.ed_debt_gap_reduction_10,
    text=networth2.ed_debt_gap_reduction_10,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=networth2.networth_pp_quintile2,
    y=networth2.ubi_gap_reduction_10,
    text=networth2.ubi_gap_reduction_10,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=poor2.original_poor,
    y=poor2.ed_debt_gap_reduction_10	,
    text=poor2.ed_debt_gap_reduction_10	,
    name='$50k student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=poor2.original_poor,
    y=poor2.ubi_gap_reduction_10,
    text=poor2.ubi_gap_reduction_10,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))


fig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', plot_bgcolor='white')
fig.update_traces(texttemplate='%{text}%', textposition='outside')
fig.update_layout(title_text='Poverty gap reduction by race')

fig.update_xaxes(
        tickangle = 0,
        title_text = &quot;Demographic of head of household&quot;,
        tickfont = {&quot;size&quot;: 14},
        title_standoff = 25)

fig.update_yaxes(
        title_text = &quot;Poverty gap reduction&quot;,
        ticksuffix =&quot;%&quot;,
        tickprefix = &quot;&quot;,
        tickfont = {'size':14},
        title_standoff = 25,
        range=[-100,0])

fig.update_xaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_yaxes(title_font=dict(size=14, family='Roboto', color='black'))

fig.update_layout(barmode='group')

fig.update_layout(
    updatemenus=[go.layout.Updatemenu(
        active=0,
        buttons=list([
            dict(label=&quot;Race&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[True,True,False,False,False,False,False,False,False,False,False,False]},
                       {'title':'Poverty gap reduction by race',
                        'showlegend':True}]),
            
            dict(label=&quot;Education&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,True,True, False, False,False,False,False,False,False,False]},
                       {'title':'Poverty gap reductionp by education level',
                        'showlegend':True}]),
            
            dict(label=&quot;Age&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, True, True,False,False,False,False,False,False]},
                       {'title':'Poverty gap reduction by age level',
                        'showlegend':True}]),
            
            dict(label=&quot;Income&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False,False,False,False,True,True,False,False,False,False]},
                       {'title':'Poverty gap reduction by income quintile',
                        'showlegend':True}]),
            
            dict(label=&quot;Networth&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, False, False,False,False,True,True,False,False]},
                       {'title':'Poverty gap reduction by net worth quintile',
                        'showlegend':True}]),
            
            dict(label=&quot;Poverty Status&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, False, False,False,False,False,False,True,True]},
                       {'title':'Poverty gap reduction by poverty status',
                        'showlegend':True}])
                        ]),
        
            direction=&quot;down&quot;,
            pad={&quot;r&quot;: 10, &quot;t&quot;: 10},
            showactive=True,
            x=-0.35,
            xanchor=&quot;left&quot;,
            y=1.1,
            yanchor=&quot;top&quot;
    
    )])

config = {'displayModeBar': False}

fig.show(config=config)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f18() {
  var x = document.getElementById(&quot;asset_code_18&quot;);
  var b = document.getElementById(&quot;button18&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset18&quot;).load(&quot;/assets/markdown_assets/student-debt/2020-11-17-student-debt-asset-18.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset18&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;all-relief&quot;&gt;All relief&lt;/h3&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button19&quot; onclick=&quot;f19()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_19&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
## Average Benefit by reform ##

fig = go.Figure()

fig.add_trace(go.Bar(
    x=race2.race,
    y=race2.ed_debt_change,
    text=race2.ed_debt_change,
    name='All student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE
))

fig.add_trace(go.Bar(
    x=race2.race,
    y=race2.ubi_change,
    text= race2.ubi_change,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE
))

fig.add_trace(go.Bar(
    x=education2.edcl,
    y=education2.ed_debt_change,
    text=education2.ed_debt_change,
    name='All student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=education2.edcl,
    y=education2.ubi_change,
    text=education2.ubi_change,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=age2.agecl,
    y=age2.ed_debt_change,
    text=age2.ed_debt_change,
    name='All student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=age2.agecl,
    y=age2.ubi_change,
    text=age2.ubi_change,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=income2.income_pp_quintile,
    y=income2.ed_debt_change,
    text=income2.ed_debt_change,
    name='All student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=income2.income_pp_quintile,
    y=income2.ubi_change,
    text=income2.ubi_change,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=networth2.networth_pp_quintile2,
    y=networth2.ubi_change,
    text=networth2.ubi_change,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=networth2.networth_pp_quintile2,
    y=networth2.ed_debt_change,
    text=networth2.ed_debt_change,
    name='All student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=poor2.original_poor,
    y=poor2.ubi_change,
    text=poor2.ubi_change,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=poor2.original_poor,
    y=poor2.ed_debt_change,
    text=poor2.ed_debt_change,
    name='All student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))


fig.update_layout(uniformtext_minsize=9, uniformtext_mode='hide', plot_bgcolor='white')
fig.update_traces(texttemplate='$%{text}', textposition='outside')
fig.update_layout(title_text='Average benefit by race')

fig.update_xaxes(
        tickangle = 0,
        title_text = &quot;Demographic of head of household&quot;,
        tickfont = {&quot;size&quot;: 14},
        title_standoff = 25)

fig.update_yaxes(
        title_text = &quot;Average benefit&quot;,
        ticksuffix =&quot;&quot;,
        tickfont = {'size':14},
        title_standoff = 25,
        range=[0,12_000])

fig.update_xaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_yaxes(title_font=dict(size=14, family='Roboto', color='black'))

fig.update_layout(barmode='group')

fig.update_layout(
    updatemenus=[go.layout.Updatemenu(
        active=0,
        buttons=list([
            dict(label=&quot;Race&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[True,True,False,False,False,False,False,False,False,False,False,False]},
                       {'title':'Average benefit of reform by race',
                        'showlegend':True}]),
            
            dict(label=&quot;Education&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,True,True, False, False,False,False,False,False,False,False]},
                       {'title':'Average benefit of reform by education level',
                        'showlegend':True}]),
            
            dict(label=&quot;Age&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, True, True,False,False,False,False,False,False]},
                       {'title':'Average benefit of reform by age level',
                        'showlegend':True}]),
            
            dict(label=&quot;Income&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False,False,False,False,True,True,False,False,False,False]},
                       {'title':'Average benefit of reform by income quintile',
                        'showlegend':True}]),
            
            dict(label=&quot;Networth&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, False, False,False,False,True,True,False,False]},
                       {'title':'Average benefit of reform by net worth quintile',
                        'showlegend':True}]),
            
            dict(label=&quot;Poverty Status&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, False, False,False,False,False,False,True,True]},
                       {'title':'Average benefit of reform by poverty status',
                        'showlegend':True}])
                        ]),
        
            direction=&quot;down&quot;,
            pad={&quot;r&quot;: 10, &quot;t&quot;: 10},
            showactive=True,
            x=-0.35,
            xanchor=&quot;left&quot;,
            y=1.1,
            yanchor=&quot;top&quot;
    
    )])

config = {'displayModeBar': False}

fig.show(config=config)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f19() {
  var x = document.getElementById(&quot;asset_code_19&quot;);
  var b = document.getElementById(&quot;button19&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset19&quot;).load(&quot;/assets/markdown_assets/student-debt/2020-11-17-student-debt-asset-19.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset19&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button20&quot; onclick=&quot;f20()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_20&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
## Percent better off with ed debt ##
fig = go.Figure()

fig.add_trace(go.Bar(x=race2['race'], y=race2['percent_better_off_with_ubi'], 
                     text=race2['percent_better_off_with_ubi'], name='race',
                     showlegend=False, marker_color=DARK_BLUE))

fig.add_trace(go.Bar(x=education2['edcl'], y=education2['percent_better_off_with_ubi'],
                     text=education2['percent_better_off_with_ubi'], name='education',
                     visible = False, showlegend=False, marker_color=DARK_BLUE))

fig.add_trace(go.Bar(x=age2['agecl'], y=age2['percent_better_off_with_ubi'], name='age',
                     text=age2['percent_better_off_with_ubi'], visible = False,
                     showlegend=False, marker_color=DARK_BLUE))

fig.add_trace(go.Bar(x=income2['income_pp_quintile'], y=income2['percent_better_off_with_ubi'],
                     text=income2['percent_better_off_with_ubi'], name='income', visible = False,
                     showlegend=False, marker_color=DARK_BLUE))

fig.add_trace(go.Bar(x=networth2['networth_pp_quintile2'],
                     text=networth2['percent_better_off_with_ubi'], y=networth2['percent_better_off_with_ubi'],
                     name='networth', visible = False, showlegend=False, marker_color=DARK_BLUE))

fig.add_trace(go.Bar(x=poor2['original_poor'], y=poor2['percent_better_off_with_ubi'],
                     text=poor2['percent_better_off_with_ubi'], name='poor',
                     visible = False, showlegend=False, marker_color=DARK_BLUE))


fig.update_layout(uniformtext_minsize=13, uniformtext_mode='hide', plot_bgcolor='white')
fig.update_traces(texttemplate='%{text}%', textposition='outside')
fig.update_layout(title_text='Percent better off with universal payment')

fig.update_xaxes(
        tickangle = 0,
        title_text = &quot;Demographic of head of household&quot;,
        tickfont = {&quot;size&quot;: 14},
        title_standoff = 25)

fig.update_yaxes(
        title_text = &quot;Percent better off with universal payment&quot;,
        ticksuffix =&quot;%&quot;,
        tickfont = {'size':14},
        title_standoff = 25,
        range=[0,100])

fig.update_xaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_yaxes(title_font=dict(size=14, family='Roboto', color='black'))

fig.update_layout(
    updatemenus=[go.layout.Updatemenu(
        active=0,
        buttons=list([
            dict(label=&quot;Race&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[True,False,False,False,False,False]},
                       {'title':'Share better off with universal payments by race',
                        'showlegend':True}]),
            dict(label=&quot;Education&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,True,False, False,False, False]},
                       {'title':'Share better off with universal payments by education level',
                        'showlegend':True}]),
            dict(label=&quot;Age&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,True, False, False, False]},
                       {'title':'Share better off with universal payments by age',
                        'showlegend':True}]),
            dict(label=&quot;Income&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False, True, False, False]},
                       {'title':'Share better off with universal payments by income quintile',
                        'showlegend':True}]),
            dict(label=&quot;Networth&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False, False, True, False]},
                       {'title':'Share better off with universal payments by net worth quintile',
                        'showlegend':True}]),
            dict(label=&quot;Poverty Status&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False, False, False, True]},
                       {'title':'Share better off with universal payments by poverty status',
                        'showlegend':True}]), 
            ]),
            direction=&quot;down&quot;,
            pad={&quot;r&quot;: 10, &quot;t&quot;: 10},
            showactive=True,
            x=-0.35,
            xanchor=&quot;left&quot;,
            y=1.1,
            yanchor=&quot;top&quot;
    
    )])

fig.show(config=config)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f20() {
  var x = document.getElementById(&quot;asset_code_20&quot;);
  var b = document.getElementById(&quot;button20&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset20&quot;).load(&quot;/assets/markdown_assets/student-debt/2020-11-17-student-debt-asset-20.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset20&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button21&quot; onclick=&quot;f21()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_21&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
## Reduction in net debt rate by reform ##

fig = go.Figure()

fig.add_trace(go.Bar(
    x=race2.race,
    y=race2.ed_debt_debt_reduction,
    text=race2.ed_debt_debt_reduction,
    name='All student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE
))

fig.add_trace(go.Bar(
    x=race2.race,
    y=race2.ubi_debt_reduction,
    text= race2.ubi_debt_reduction,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE
))

fig.add_trace(go.Bar(
    x=education2.edcl,
    y=education2.ed_debt_debt_reduction,
    text=education2.ed_debt_debt_reduction,
    name='All student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=education2.edcl,
    y=education2.ubi_debt_reduction,
    text=education2.ubi_debt_reduction,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=age2.agecl,
    y=age2.ed_debt_debt_reduction,
    text=age2.ed_debt_debt_reduction,
    name='All student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=age2.agecl,
    y=age2.ubi_debt_reduction,
    text=age2.ubi_debt_reduction,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=income2.income_pp_quintile,
    y=income2.ed_debt_debt_reduction,
    text=income2.ed_debt_debt_reduction,
    name='All student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=income2.income_pp_quintile,
    y=income2.ubi_debt_reduction,
    text=income2.ubi_debt_reduction,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=networth2.networth_pp_quintile2,
    y=networth2.ed_debt_debt_reduction,
    text=networth2.ed_debt_debt_reduction,
    name='All student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=networth2.networth_pp_quintile2,
    y=networth2.ubi_debt_reduction,
    text=networth2.ubi_debt_reduction,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=poor2.original_poor,
    y=poor2.ed_debt_debt_reduction,
    text=poor2.ed_debt_debt_reduction,
    name='All student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=poor2.original_poor,
    y=poor2.ubi_debt_reduction,
    text=poor2.ubi_debt_reduction,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))


fig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', plot_bgcolor='white')
fig.update_traces(texttemplate='%{text}%', textposition='outside')
fig.update_layout(title_text='Reduction in net debt rate by race')

fig.update_xaxes(
        tickangle = 0,
        title_text = &quot;Demographic of head of household&quot;,
        tickfont = {&quot;size&quot;: 14},
        title_standoff = 25)

fig.update_yaxes(
        title_text = &quot;Reduction in net debt rate&quot;,
        ticksuffix =&quot;&quot;,
        tickfont = {'size':14},
        title_standoff = 25,
        range=[-100,0])

fig.update_xaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_yaxes(title_font=dict(size=14, family='Roboto', color='black'))

fig.update_layout(barmode='group')

fig.update_layout(
    updatemenus=[go.layout.Updatemenu(
        active=0,
        buttons=list([
            dict(label=&quot;Race&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[True,True,False,False,False,False,False,False,False,False,False,False]},
                       {'title':'Reduction in net debt rate by race',
                        'showlegend':True}]),
            
            dict(label=&quot;Education&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,True,True, False, False,False,False,False,False,False,False]},
                       {'title':'Reduction in net debt rate by education level',
                        'showlegend':True}]),
            
            dict(label=&quot;Age&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, True, True,False,False,False,False,False,False]},
                       {'title':'Reduction in net debt rate by age level',
                        'showlegend':True}]),
            
            dict(label=&quot;Income&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False,False,False,False,True,True,False,False,False,False]},
                       {'title':'Reduction in net debt rate by income quintile',
                        'showlegend':True}]),
            
            dict(label=&quot;Networth&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, False, False,False,False,True,True,False,False]},
                       {'title':'Reduction in net debt rate by net worth quintile',
                        'showlegend':True}]),
            
            dict(label=&quot;Poverty Status&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, False, False,False,False,False,False,True,True]},
                       {'title':'Reduction in net debt rate by poverty status',
                        'showlegend':True}])
                        ]),
        
            direction=&quot;down&quot;,
            pad={&quot;r&quot;: 10, &quot;t&quot;: 10},
            showactive=True,
            x=-0.35,
            xanchor=&quot;left&quot;,
            y=1.1,
            yanchor=&quot;top&quot;
    
    )])

fig.show(config=config)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f21() {
  var x = document.getElementById(&quot;asset_code_21&quot;);
  var b = document.getElementById(&quot;button21&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset21&quot;).load(&quot;/assets/markdown_assets/student-debt/2020-11-17-student-debt-asset-21.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset21&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button22&quot; onclick=&quot;f22()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_22&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
## Percent reduction in poverty rate by reform ##

fig = go.Figure()

fig.add_trace(go.Bar(
    x=race2.race,
    y=race2.ed_debt_poverty_reduction	,
    text=race2.ed_debt_poverty_reduction	,
    name='All student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE
))

fig.add_trace(go.Bar(
    x=race2.race,
    y=race2.ubi_poverty_reduction,
    text= race2.ubi_poverty_reduction,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE
))

fig.add_trace(go.Bar(
    x=education2.edcl,
    y=education2.ed_debt_poverty_reduction	,
    text=education2.ed_debt_poverty_reduction	,
    name='All student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=education2.edcl,
    y=education2.ubi_poverty_reduction,
    text=education2.ubi_poverty_reduction,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=age2.agecl,
    y=age2.ed_debt_poverty_reduction	,
    text=age2.ed_debt_poverty_reduction	,
    name='All student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=age2.agecl,
    y=age2.ubi_poverty_reduction,
    text=age2.ubi_poverty_reduction,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=income2.income_pp_quintile,
    y=income2.ed_debt_poverty_reduction,
    text=income2.ed_debt_poverty_reduction,
    name='All student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=income2.income_pp_quintile,
    y=income2.ubi_poverty_reduction,
    text=income2.ubi_poverty_reduction,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=networth2.networth_pp_quintile2,
    y=networth2.ed_debt_poverty_reduction,
    text=networth2.ed_debt_poverty_reduction,
    name='All student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=networth2.networth_pp_quintile2,
    y=networth2.ubi_poverty_reduction,
    text=networth2.ubi_poverty_reduction,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=poor2.original_poor,
    y=poor2.ubi_poverty_reduction,
    text=poor2.ubi_poverty_reduction,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=poor2.original_poor,
    y=poor2.ed_debt_poverty_reduction,
    text=poor2.ed_debt_poverty_reduction,
    name='All student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))


fig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', plot_bgcolor='white')
fig.update_traces(texttemplate='%{text}%', textposition='outside')
fig.update_layout(title_text='Reduction in poverty rate by race')

fig.update_xaxes(
        tickangle = 0,
        title_text = &quot;Demographic of head of household&quot;,
        tickfont = {&quot;size&quot;: 14},
        title_standoff = 25)

fig.update_yaxes(
        title_text = &quot;Poverty reduction&quot;,
        ticksuffix =&quot;&quot;,
        tickfont = {'size':14},
        title_standoff = 25,
        range=[-105,0])

fig.update_xaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_yaxes(title_font=dict(size=14, family='Roboto', color='black'))

fig.update_layout(barmode='group')

fig.update_layout(
    updatemenus=[go.layout.Updatemenu(
        active=0,
        buttons=list([
            dict(label=&quot;Race&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[True,True,False,False,False,False,False,False,False,False,False,False]},
                       {'title':'Poverty reduction by race',
                        'showlegend':True}]),
            
            dict(label=&quot;Education&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,True,True, False, False,False,False,False,False,False,False]},
                       {'title':'Poverty reduction by education level',
                        'showlegend':True}]),
            
            dict(label=&quot;Age&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, True, True,False,False,False,False,False,False]},
                       {'title':'Poverty reduction by age group',
                        'showlegend':True}]),
            
            dict(label=&quot;Income&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False,False,False,False,True,True,False,False,False,False]},
                       {'title':'Poverty reduction by income quintile',
                        'showlegend':True}]),
            
            dict(label=&quot;Networth&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, False, False,False,False,True,True,False,False]},
                       {'title':'Poverty reduction by net worth quintile',
                        'showlegend':True}]),
            
            dict(label=&quot;Poverty Status&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, False, False,False,False,False,False,True,True]},
                       {'title':'Poverty reduction by poverty status',
                        'showlegend':True}])
                        ]),
        
            direction=&quot;down&quot;,
            pad={&quot;r&quot;: 10, &quot;t&quot;: 10},
            showactive=True,
            x=-0.35,
            xanchor=&quot;left&quot;,
            y=1.1,
            yanchor=&quot;top&quot;
    
    )])

fig.show(config=config)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f22() {
  var x = document.getElementById(&quot;asset_code_22&quot;);
  var b = document.getElementById(&quot;button22&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset22&quot;).load(&quot;/assets/markdown_assets/student-debt/2020-11-17-student-debt-asset-22.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset22&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button23&quot; onclick=&quot;f23()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_23&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
## Percent in poverty by reform ##

fig = go.Figure()

fig.add_trace(go.Bar(
    x=race2.race,
    y=race2.ed_debt_gap_reduction	,
    text=race2.ed_debt_gap_reduction	,
    name='All student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE
))

fig.add_trace(go.Bar(
    x=race2.race,
    y=race2.ubi_gap_reduction,
    text= race2.ubi_gap_reduction,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE
))

fig.add_trace(go.Bar(
    x=education2.edcl,
    y=education2.ed_debt_gap_reduction	,
    text=education2.ed_debt_gap_reduction	,
    name='All student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=education2.edcl,
    y=education2.ubi_gap_reduction,
    text=education2.ubi_gap_reduction,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))


fig.add_trace(go.Bar(
    x=age2.agecl,
    y=age2.ed_debt_gap_reduction,
    text=age2.ed_debt_gap_reduction,
    name='All student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=age2.agecl,
    y=age2.ubi_gap_reduction,
    text=age2.ubi_gap_reduction,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=income2.income_pp_quintile,
    y=income2.ed_debt_gap_reduction,
    text=income2.ed_debt_gap_reduction,
    name='All student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=income2.income_pp_quintile,
    y=income2.ubi_gap_reduction,
    text=income2.ubi_gap_reduction,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=networth2.networth_pp_quintile2,
    y=networth2.ed_debt_gap_reduction,
    text=networth2.ed_debt_gap_reduction,
    name='All student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=networth2.networth_pp_quintile2,
    y=networth2.ubi_gap_reduction,
    text=networth2.ubi_gap_reduction,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=poor2.original_poor,
    y=poor2.ed_debt_gap_reduction	,
    text=poor2.ed_debt_gap_reduction	,
    name='All student&lt;br /&gt;debt cancellation',
    marker_color=LIGHT_BLUE,
    visible = False
))

fig.add_trace(go.Bar(
    x=poor2.original_poor,
    y=poor2.ubi_gap_reduction,
    text=poor2.ubi_gap_reduction,
    name='Budget-equivalent&lt;br /&gt;universal payment',
    marker_color=DARK_BLUE,
    visible = False
))


fig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', plot_bgcolor='white')
fig.update_traces(texttemplate='%{text}%', textposition='outside')
fig.update_layout(title_text='Poverty gap reduction by race')

fig.update_xaxes(
        tickangle = 0,
        title_text = &quot;Demographic of head of household&quot;,
        tickfont = {&quot;size&quot;: 14},
        title_standoff = 25)

fig.update_yaxes(
        title_text = &quot;Poverty gap reduction&quot;,
        ticksuffix =&quot;%&quot;,
        tickprefix = &quot;&quot;,
        tickfont = {'size':14},
        title_standoff = 25,
        range=[-100,0])

fig.update_xaxes(title_font=dict(size=14, family='Roboto', color='black'))
fig.update_yaxes(title_font=dict(size=14, family='Roboto', color='black'))

fig.update_layout(barmode='group')

fig.update_layout(
    updatemenus=[go.layout.Updatemenu(
        active=0,
        buttons=list([
            dict(label=&quot;Race&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[True,True,False,False,False,False,False,False,False,False,False,False]},
                       {'title':'Poverty gap reduction by race',
                        'showlegend':True}]),
            
            dict(label=&quot;Education&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,True,True, False, False,False,False,False,False,False,False]},
                       {'title':'Poverty gap reduction by education level',
                        'showlegend':True}]),
            
            dict(label=&quot;Age&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, True, True,False,False,False,False,False,False]},
                       {'title':'Poverty gap reduction by age level',
                        'showlegend':True}]),
            
            dict(label=&quot;Income&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False,False,False,False,False,False,True,True,False,False,False,False]},
                       {'title':'Poverty gap reduction by income quintile',
                        'showlegend':True}]),
            
            dict(label=&quot;Networth&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, False, False,False,False,True,True,False,False]},
                       {'title':'Poverty gap reduction by net worth quintile',
                        'showlegend':True}]),
            
            dict(label=&quot;Poverty Status&quot;,
                 method=&quot;update&quot;,
                 args=[{'visible':[False, False,False, False, False, False,False,False,False,False,True,True]},
                       {'title':'Poverty gap reduction by poverty status',
                        'showlegend':True}])
                        ]),
        
            direction=&quot;down&quot;,
            pad={&quot;r&quot;: 10, &quot;t&quot;: 10},
            showactive=True,
            x=-0.35,
            xanchor=&quot;left&quot;,
            y=1.1,
            yanchor=&quot;top&quot;
    
    )])

fig.show(config=config)
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f23() {
  var x = document.getElementById(&quot;asset_code_23&quot;);
  var b = document.getElementById(&quot;button23&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset23&quot;).load(&quot;/assets/markdown_assets/student-debt/2020-11-17-student-debt-asset-23.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset23&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:debt&quot;&gt;
      &lt;p&gt;The Federal Reserve Bank of New York has &lt;a href=&quot;https://www.newyorkfed.org/microeconomics/hhdc.html&quot;&gt;estimated&lt;/a&gt; total student debt to be $1.54 trillion as of the second quarter of 2020. &lt;a href=&quot;#fnref:debt&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:hhdemo&quot;&gt;
      &lt;p&gt;Because the SCF collects data at the household level, all demographics are represented by the demographic of the head of household. &lt;a href=&quot;#fnref:hhdemo&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:quintiles&quot;&gt;
      &lt;p&gt;I assign households to income and net worth quintiles based on per-capita income and net worth, respectively, weighted by person such that each quintile has the same population. Inequality statistics are also based on per-capita income and net worth and weighted by person. &lt;a href=&quot;#fnref:quintiles&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:poverty&quot;&gt;
      &lt;p&gt;I classify a household as in poverty if its official &lt;a href=&quot;https://aspe.hhs.gov/2019-poverty-guidelines&quot;&gt;2019 poverty guideline&lt;/a&gt; (defined by Health and Human Services) exceeds its total income (including in-kind benefits like food assistance, and in this case, student loan forgiveness). &lt;a href=&quot;#fnref:poverty&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:static&quot;&gt;
      &lt;p&gt;Calculations around net debt and other outcomes assume that all cancelled debt and universal payments go directly to net worth; that is, consumption is assumed to be constant. &lt;a href=&quot;#fnref:static&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>Nate Golden</name>
        
        
      </author>

      

      
        <category term="us" />
      
        <category term="student debt" />
      

      
        <summary type="html">Dollar for dollar, universal payments do more for poverty and income inequality.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">A $300-per-month UBI would cut Veteran poverty in half</title>
      <link href="/veterans" rel="alternate" type="text/html" title="A $300-per-month UBI would cut Veteran poverty in half" />
      <published>2020-11-11T00:00:00+00:00</published>
      <updated>2020-11-11T00:00:00+00:00</updated>
      <id>/veterans</id>
      <content type="html" xml:base="/veterans">&lt;head&gt;
  &lt;script src=&quot;https://cdn.plot.ly/plotly-latest.min.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;p&gt;Today we honor &lt;a href=&quot;https://www.va.gov/vetdata/veteran_population.asp&quot;&gt;over 19 million Americans&lt;/a&gt; who have served in the military, of whom one in 13 is in poverty. This is a third lower than the poverty rate among non-Veterans, thanks to &lt;a href=&quot;https://www.pewresearch.org/fact-tank/2019/12/09/veteran-households-in-u-s-are-economically-better-off-than-those-of-non-veterans/&quot;&gt;higher incomes&lt;/a&gt; and Veteran benefits, but still amounts to over 1.4 million people who lack resources to cover basic needs. Universal basic income would help.&lt;/p&gt;

&lt;p&gt;Existing assistance programs cut Veteran poverty substantially. &lt;a href=&quot;https://www.cbpp.org/blog/veterans-and-the-safety-net-0&quot;&gt;Two million Veterans&lt;/a&gt; receive refundable tax credits—the Earned Income Tax Credit and the refundable portion of the Child Tax Credit—and &lt;a href=&quot;https://www.cbpp.org/research/food-assistance/snap-helps-13-million-low-income-veterans-including-thousands-in-every&quot;&gt;1.3 million&lt;/a&gt; receive SNAP (formerly food stamps). Certain veteran households are also eligible to receive &lt;a href=&quot;https://www.va.gov/pension/veterans-pension-rates/&quot;&gt;up to $36,387&lt;/a&gt; per year through the &lt;a href=&quot;https://www.va.gov/pension/eligibility/&quot;&gt;Veterans Pension&lt;/a&gt; program, depending on their household size, income, net worth, age, service period, and disability status. Veterans with disabilities related to their active-duty service can also receive up to $44,208 per year, depending on their household size and severity of their disability through the &lt;a href=&quot;https://www.va.gov/disability/compensation-rates/veteran-rates/&quot;&gt;Veterans Disability Compensation&lt;/a&gt; program. The &lt;a href=&quot;https://benefits.va.gov/benefits/&quot;&gt;Veterans Benefit Administration&lt;/a&gt; provides a number of other benefits around health, education, and other areas, especially for &lt;a href=&quot;https://www.benefits.va.gov/persona/veteran-elderly.asp&quot;&gt;elderly Veterans&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Yet these programs fail to reach all Veterans in need. As the Department of Veterans Affairs &lt;a href=&quot;https://www.va.gov/vetdata/docs/specialreports/veteran_poverty_trends.pdf&quot;&gt;found&lt;/a&gt; in 2012, veterans with disabilities have a higher official poverty rate than non-veterans with disabilities for all age groups except over age 65, and &lt;a href=&quot;https://www.va.gov/vetdata/docs/Quickfacts/VA_Utilization_Profile_2017.pdf&quot;&gt;half of Veterans&lt;/a&gt; don’t use VA programs. &lt;a href=&quot;https://www.bls.gov/opub/ted/2016/43-point-3-percent-of-veterans-with-a-service-connected-disability-were-employed-in-august-2015.htm#:~:text=Bureau%20of%20Labor%20Statistics,-The%20Economics%20Daily&amp;amp;text=In%20August%202015%2C%20about%204.3,all%20veterans%20was%2047.8%20percent.&quot;&gt;20 percent of Veterans&lt;/a&gt; have a service-connected disability, and as we &lt;a href=&quot;https://blog.ubicenter.org/20200731/ada30.html&quot;&gt;wrote in July&lt;/a&gt;, one in five people with disabilities is in poverty—nearly double the rate of people without disabilities. In that analysis, we also showed that a $300-per-month universal basic income (UBI) would halve poverty among people with disabilities. What would UBI do for all Veterans?&lt;/p&gt;

&lt;p&gt;In this analysis, we modeled a UBI funded by a flat tax on adjusted gross income (AGI). In this model, every $100 monthly UBI requires a 3.3 percent tax on AGI. To fund a $300-per-month UBI, the federal government would have to levy a 9.8 percent tax. But like we found in the disability analysis, this would also reduce Veteran poverty by half. Poverty among children in Veteran households would be cut by 60 percent.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button1&quot; onclick=&quot;f1()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_1&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# Import Libraries
import microdf as mdf
import numpy as np
import pandas as pd
import plotly.express as px

# Import data
raw = pd.read_csv(&quot;https://github.com/UBICenter/Veteran-s_Day/raw/main/VeteranData.gz&quot;)

# Create Demographic Columns
person = raw.copy(deep=True)
person.columns = person.columns.str.lower()
person[&quot;child&quot;] = person.age &amp;lt; 18
person[&quot;adult&quot;] = person.age &amp;gt;= 18
person[&quot;veteran&quot;] = (person.vetstat == 2) &amp;amp; person.adult
person[&quot;non_veteran&quot;] = (person.vetstat == 1) &amp;amp; person.adult

veterans = person.groupby([&quot;spmfamunit&quot;])[[&quot;veteran&quot;]].sum()
veterans.columns = [&quot;total_veterans&quot;]
person = person.merge(veterans.reset_index(), on=[&quot;spmfamunit&quot;])

person[&quot;child_with_vet&quot;] = (person.child) &amp;amp; (person.total_veterans &amp;gt; 0)
person[&quot;child_with_no_vet&quot;] = (person.child) &amp;amp; (person.total_veterans == 0)

# Show total veterans in millions
total_veterans = (person.veteran * person.asecwt).sum()
total_veterans / 1_000_000

# Calculate total AGI
person[&quot;adjginc&quot;].replace({99999999: 0}, inplace=True)
population = person.asecwt.sum()
person[&quot;weighted_agi&quot;] = person.adjginc * person.asecwt
total_agi = person.weighted_agi.sum()

# Calculate AGI tax rate per dollar of UBI
fed_tax_rate_per_dollar_ubi_monthly = (population * 12) / total_agi

# Create table showing tax amounts
tax_rates = pd.DataFrame(np.arange(0, 1001, 50))
tax_rates.columns = [&quot;monthly_ubi&quot;]


def tax(monthly_ubi):
    return (monthly_ubi * fed_tax_rate_per_dollar_ubi_monthly * 100).round(1)


def tax_row(row):
    return tax(row.monthly_ubi)


tax_rates[&quot;tax_rate&quot;] = tax_rates.apply(tax_row, axis=1)
tax_rates.columns = [&quot;Monthly UBI&quot;, &quot;Flat Tax Rate on AGI&quot;]


def ubi(status, monthly_ubi):
    &quot;&quot;&quot;At a given UBI level, calculate the poverty rate, median resources,
    mean resources, and percent of people better off for:
    * Veterans
    * Non-Veterans
    * Children living with Veteran
    * Children not living with Veterans
  
    Args:
        status: A person's Veteran status.
            For this simulation their are 4 categories:
            * Veteran
            * Non-Veteran
            * Child living with a Veteran
            * Children not living with a Veteran
        monthly_ubi: the monthly cash transfer given to each person
  
    Returns:
        pandas Series with four elements for the selected group:
        * Poverty rate
        * Median resources per person
        * Mean resources per person
        * Percent of people better off
    &quot;&quot;&quot;

    # Create a copy of the person DataFrame
    target_persons = person.copy(deep=True)

    # Calculate a person's tax increase
    target_persons[&quot;tax_increase&quot;] = (
        fed_tax_rate_per_dollar_ubi_monthly * monthly_ubi * target_persons.adjginc
    )

    # Calculate the total UBI per SPM unit.
    target_persons[&quot;total_ubi&quot;] = target_persons.spmnpers * 12 * monthly_ubi

    # Calculate the total tax increase of an SPM unit
    spmu = target_persons.groupby([&quot;spmfamunit&quot;])[[&quot;tax_increase&quot;]].sum()
    spmu.columns = [&quot;total_tax_increase&quot;]
    target_persons = target_persons.merge(
        spmu, left_on=[&quot;spmfamunit&quot;], right_index=True
    )

    # Calculate each SPM unit's tax rate person
    target_persons[&quot;new_spm_resources&quot;] = (
        target_persons.spmtotres
        + target_persons.total_ubi
        - target_persons.total_tax_increase
    )

    # Calculate the new resources per person of each SPM unit
    target_persons[&quot;new_resources_per_person&quot;] = (
        target_persons.new_spm_resources / target_persons.spmnpers
    )

    # Slice the data based on Race input
    if status == &quot;veteran&quot;:
        target_persons = target_persons[target_persons.veteran]
    if status == &quot;non_veteran&quot;:
        target_persons = target_persons[target_persons.non_veteran]

    if status == &quot;veteran_child&quot;:
        target_persons = target_persons[target_persons.child_with_vet]
    if status == &quot;non_veteran_child&quot;:
        target_persons = target_persons[target_persons.child_with_no_vet]

    # Calculate the change in poverty rate
    target_persons[&quot;poor&quot;] = target_persons.new_spm_resources &amp;lt; target_persons.spmthresh
    total_poor = (target_persons.poor * target_persons.asecwt).sum()
    target_pop = target_persons.asecwt.sum()

    # Calculate percent better off
    target_persons[&quot;better_off&quot;] = (
        target_persons.new_spm_resources &amp;gt; target_persons.spmtotres
    )
    total_better_off = (target_persons.better_off * target_persons.asecwt).sum()
    percent = total_better_off / target_pop * 100

    return pd.Series(
        [
            mdf.weighted_median(
                target_persons, &quot;new_resources_per_person&quot;, &quot;asecwt&quot;
            ).round(0),
            mdf.weighted_mean(
                target_persons, &quot;new_resources_per_person&quot;, &quot;asecwt&quot;
            ).round(0),
            (total_poor / target_pop * 100).round(1),
            percent,
        ]
    )


def ubi_row(row):
    &quot;&quot;&quot; run the ubi function across the rows of a DataFrame.
  
    Arguments
    row: the row of the DataFrame containing a person's race and the monthly UBI amount
  
    Returns
    The poverty rate for the selected row.
    The median resources per person for the selected row.
    The mean resources per person for the selected row.
    The percent of people better off under the program for the selected row.
    &quot;&quot;&quot;
    return ubi(row.status, row.monthly_ubi)


# Create a DataFrame that has each the each monthly UBI amount for each race input
summary = mdf.cartesian_product(
    {
        &quot;monthly_ubi&quot;: np.arange(0, 1001, 50),
        &quot;status&quot;: [&quot;veteran&quot;, &quot;non_veteran&quot;, &quot;veteran_child&quot;, &quot;non_veteran_child&quot;],
    }
)

# Calculate the poverty rate for each row of the summary DataFrame
summary[
    [
        &quot;med_resources_per_person&quot;,
        &quot;mean_resources_per_person&quot;,
        &quot;poverty_rate&quot;,
        &quot;better_off&quot;,
    ]
] = summary.apply(ubi_row, axis=1)

summary2 = summary[summary[&quot;status&quot;] != &quot;non_veteran_child&quot;]
summary2 = summary2[summary2[&quot;status&quot;] != &quot;veteran_child&quot;]
# Format text
center = {
    &quot;med_resources_per_person&quot;: &quot;Median resources&quot;,
    &quot;mean_resources_per_person&quot;: &quot;Mean resources&quot;,
}
status = {
    &quot;veteran&quot;: &quot;Veterans&quot;,
    &quot;non_veteran&quot;: &quot;Non-Veteran adults&quot;,
    &quot;veteran_child&quot;: &quot;Children in Veteran households&quot;,
    &quot;non_veteran_child&quot;: &quot;Children in non-Veteran households&quot;,
}

summary[&quot;status&quot;] = summary[&quot;status&quot;].map(status)
summary2[&quot;status&quot;] = summary2[&quot;status&quot;].map(status)

# Colors from https://material.io/design/color/the-color-system.html
BLUE = &quot;#1976D2&quot;
DARK_BLUE = &quot;#0D47A1&quot;
BARELY_BLUE = &quot;#64B5F6&quot;
GRAY = &quot;#9E9E9E&quot;
LIGHT_GRAY = &quot;#E0E0E0&quot;

COLOR_MAP = {
    &quot;Veterans&quot;: BLUE,
    &quot;Non-Veteran adults&quot;: GRAY,
    &quot;Children in Veteran households&quot;: BARELY_BLUE,
    &quot;Children in non-Veteran households&quot;: LIGHT_GRAY,
}


def line_graph(df, x, y, color, title, xaxis_title, yaxis_title):
    &quot;&quot;&quot;Style for line graphs.
    
    Args:
        df: DataFrame with data to be plotted.
        x: The string representing the column in df that holds the new
            spending in billions.
        y: The string representing the column in df that holds the poverty
            rate.
        color: The string representing the UBI type.
        xaxis_title: The string represnting the xaxis-title.
        yaxis_title: The string representing the yaxis-title.
    
    Returns:
        Nothing. Shows the plot.
    &quot;&quot;&quot;
    fig = px.line(df, x=x, y=y, color=color, color_discrete_map=COLOR_MAP)
    fig.update_layout(
        title=title,
        xaxis_title=xaxis_title,
        yaxis_title=yaxis_title,
        yaxis_ticksuffix=&quot;%&quot;,
        font=dict(family=&quot;Roboto&quot;),
        hovermode=&quot;x&quot;,
        xaxis_tickprefix=&quot;$&quot;,
        xaxis_ticksuffix=&quot;&quot;,
        plot_bgcolor=&quot;white&quot;,
        legend_title_text=&quot;&quot;,
    )
    fig.update_traces(mode=&quot;markers+lines&quot;, hovertemplate=None)

    hide_line = [&quot;Children in Veteran households&quot;, &quot;Children in non-Veteran households&quot;]

    fig.for_each_trace(
        lambda trace: trace.update(visible=&quot;legendonly&quot;)
        if trace.name in hide_line
        else ()
    )

    return fig


fig = line_graph(
    df=summary,
    x=&quot;monthly_ubi&quot;,
    y=&quot;poverty_rate&quot;,
    color=&quot;status&quot;,
    title=&quot;The impact of a UBI on Veterans and their families&quot;,
    xaxis_title=&quot;Monthly UBI&quot;,
    yaxis_title=&quot;SPM poverty rate&quot;,
)
fig.show()
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f1() {
  var x = document.getElementById(&quot;asset_code_1&quot;);
  var b = document.getElementById(&quot;button1&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset1&quot;).load(&quot;/assets/markdown_assets/veterans/2020-11-11-veterans-asset-1.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset1&quot;&gt;&lt;/div&gt;

&lt;p&gt;Studies suggest that reducing Veteran poverty could address issues disproportionately experienced by Veterans. &lt;a href=&quot;https://www.hud.gov/press/press_releases_media_advisories/HUD_No_19_163&quot;&gt;Over 37,000 Veterans&lt;/a&gt; experience homelessness on a given night, and a recent experiment in Canada found that &lt;a href=&quot;https://forsocialchange.org/our-story&quot;&gt;cash transfers accelerated&lt;/a&gt; transitions out of homelessness. Veterans have a higher rate of &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4638236/&quot;&gt;mental illness&lt;/a&gt;, especially depression, PTSD, and substance abuse disorder, while Finland’s UBI experiment &lt;a href=&quot;https://twitter.com/TheUBICenter/status/1258064957406511104&quot;&gt;improved mental health&lt;/a&gt;. Controlling for age and sex, the Veteran suicide rate exceeds the non-Veteran suicide rate by &lt;a href=&quot;https://www.mentalhealth.va.gov/docs/data-sheets/2019/2019_National_Veteran_Suicide_Prevention_Annual_Report_508.pdf&quot;&gt;50 percent&lt;/a&gt;, and a review of cash transfer programs in low- and middle-income countries found &lt;a href=&quot;https://mbrg.bsg.ox.ac.uk/sites/default/files/2020-05/the_role_of_cash_transfers_in_preventing_suicides_in_lmics_1.pdf&quot;&gt;significant suicide reductions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The unique Veteran experience warrants investment in tailored solutions, such as the health and education programs offered by the VA. Cash transfers like universal basic income can also reduce their incidence of poverty and empower them to meet their individual needs. Even modest basic incomes such as a tax-funded $300 per month would halve Veteran poverty and more than halve poverty among children of Veterans, improving poverty-linked outcomes for those who have served.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>[&quot;max&quot;, &quot;nate&quot;]</name>
        
        
      </author>

      

      
        <category term="us" />
      
        <category term="veterans" />
      
        <category term="poverty" />
      

      
        <summary type="html">Unconditional cash would fill in gaps of VA programs.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">How a tax-funded UBI can improve the lives of Indigenous Americans</title>
      <link href="/indigenous" rel="alternate" type="text/html" title="How a tax-funded UBI can improve the lives of Indigenous Americans" />
      <published>2020-10-12T00:00:00+00:00</published>
      <updated>2020-10-12T00:00:00+00:00</updated>
      <id>/indigenous</id>
      <content type="html" xml:base="/indigenous">&lt;head&gt;
  &lt;script src=&quot;https://cdn.plot.ly/plotly-latest.min.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;p&gt;Indigenous People’s Day is a time to celebrate and honor Indigenous Americans, while also recognizing the history of discrimination, oppression, and genocide they have faced since Europeans arrived in the Americas more than 500 years ago.&lt;/p&gt;

&lt;p&gt;For centuries, American public policy has treated Indigenous Americans as second class citizens—enforcing migration, barring citizenship, and refusing to give them the fundamental rights granted to them by the Constitution. All of this produced large economic disparities that continue to this day.  Indigenous Americans are 35 percent more likely to be in poverty than non-Indigenous Americans, and their median income is a third lower.  While public policy has historically been used to marginalize Indigenous Americans, it can also be used as a tool to build them up. In this paper, I examine how a tax-funded Universal Basic Income (UBI) would impact Indigenous Americans.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;To conduct the simulation I used data from the Census Bureau’s Annual Social and Economic Supplement (ASEC), which reports on data from 2019.  For each simulation, a UBI is given to every American of all ages and funded by a flat tax on Adjusted Gross Income (AGI).  AGI includes labor and capital income, and subtracts specific deductions like half of the self-employment taxes and contributions to certain retirement accounts.  Unlike taxable income, AGI does not account for most itemized deductions or the standard deduction. I assume no labor supply responses to the new taxes or income.&lt;/p&gt;

&lt;p&gt;For each UBI amount ranging from $0 per month to $1,000 per month, I calculated the necessary tax rates (below; each $100 per month requires a 3.3 percent tax on AGI), and change in poverty rates and income distributions for both Indigenous and non-Indigenous Americans after taxes and the UBI.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button1&quot; onclick=&quot;f1()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_1&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# Import Libraries
import numpy as np
import pandas as pd
import microdf as mdf
import plotly.express as px

# Import data
person = pd.read_csv('https://github.com/ngpsu22/indigenous-peoples-day/raw/main/cps_00021.csv.gz')

# Create Demographic Columns
person.columns = person.columns.str.lower()
person['child'] = person.age &amp;lt; 18
person['adult'] = person.age &amp;gt;= 18
person['native'] = person.race == 300
person['non_native'] = person.race != 300

# Calculate total AGI
person['adjginc'].replace({99999999: 0}, inplace=True)
population = person.asecwt.sum()
person['weighted_agi'] = person.adjginc * person.asecwt
total_agi = person.weighted_agi.sum()

# Calculate AGI tax rate per dollar of UBI
fed_tax_rate_per_dollar_ubi_monthly = (population * 12) / total_agi

# Create table showing tax amounts
tax_rates = pd.DataFrame(np.arange(0,1001, 50))
tax_rates.columns = ['monthly_ubi']

def tax(monthly_ubi):
    return (monthly_ubi * fed_tax_rate_per_dollar_ubi_monthly * 100).round(1)

def tax_row(row):
    return tax(row.monthly_ubi)

tax_rates['tax_rate'] = tax_rates.apply(tax_row, axis=1)
tax_rates.columns = ['monthly_ubi', 'tax_rate']

fig = px.line(tax_rates, x='monthly_ubi', y='tax_rate')
fig.update_layout(
    title='Tax rate on AGI needed to fund each UBI level',
    xaxis_title='Monthly UBI amount',
    yaxis_title='Required tax rate on adjusted gross income',
    yaxis_ticksuffix='%',
    font=dict(family='Roboto'),
    hovermode='x', 
    xaxis_tickprefix='$',
    xaxis_ticksuffix='',
    plot_bgcolor='white',
    legend_title_text=''
)
fig.update_traces(mode='markers+lines', hovertemplate=None)

fig.show(config={'displayModeBar': False})
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f1() {
  var x = document.getElementById(&quot;asset_code_1&quot;);
  var b = document.getElementById(&quot;button1&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset1&quot;).load(&quot;/assets/markdown_assets/indigenous/2020-10-12-indigenous-asset-1.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset1&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;
&lt;p&gt;The simulation shows that a tax-funded UBI has the potential to drastically reduce the poverty rate of Indigenous Americans. A UBI of $100 per month would drop Indigenous poverty below the current non-Indigenous poverty rate.  At $250 per month Indigenous poverty rates fall by more than half.  A larger UBI of $1,000 per month would drive Indigenous poverty to less than one percent.&lt;/p&gt;

&lt;p&gt;Beyond just reducing the overall poverty rate a UBI could shrink or eliminate the poverty gap between Indigenous and non-Indigenous Americans.  At all rates of $250 per month or higher, the gap closes within one percentage point.  At all rates of $600 per month or higher, Indigenous poverty is lower than non-Indigenous poverty.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button2&quot; onclick=&quot;f2()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_2&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
def ubi(race, monthly_ubi):
    &quot;&quot;&quot; Calculate the poverty rate, median resources, mean resources, and 
        percent of people better off for Indigenous and Non-Indigenous
        Americans at a given UBI level.
  
    Args:
        race: a person's race, for this simulation, either Indigenous or
            non-Indigenous.
        monthly_ubi: the monthly cash transfer given to each person.
  
    Returns:
        pd.Series with the following attributes:
        - The poverty rate for the selected group.
        - The median resources per person for the selected group.
        - The mean resources per person for the selected group.
        - The percent of people better off under the program for the selected
          group.
    &quot;&quot;&quot;    

  
    # Create a copy of the person DataFrame
    target_persons = person.copy(deep=True)
    
    # Calculate a person's tax increase
    target_persons['tax_increase'] = (
        fed_tax_rate_per_dollar_ubi_monthly * monthly_ubi * 
        target_persons.adjginc)
    
    # Calculate the total UBI per SPM unit.
    target_persons['total_ubi'] = (
        target_persons.spmnpers * 12 * monthly_ubi)
  
    # Calculate the total tax increase of an SPM unit
    spmu = target_persons.groupby(['spmfamunit'])[['tax_increase']].sum()
    spmu.columns = ['total_tax_increase']
    target_persons = target_persons.merge(spmu,left_on=['spmfamunit'],
                                          right_index=True)
    
    # Calculate each SPM unit's tax rate person
    target_persons['new_spm_resources'] = (target_persons.spmtotres
                                         + target_persons.total_ubi
                                         - target_persons.total_tax_increase)
    
    # Calculate the new resources per person of each SPM unit
    target_persons['new_resources_per_person'] = (
        target_persons.new_spm_resources / target_persons.spmnpers)
      
    # Slice the data based on Race input
    if race == 'native':
        target_persons = target_persons[target_persons.native]
    if race == 'non_native':
        target_persons = target_persons[target_persons.non_native] 
  
    # Calculate the change in poverty rate
    target_persons['poor'] = (target_persons.new_spm_resources 
                            &amp;lt; target_persons.spmthresh)
    total_poor = (target_persons.poor * target_persons.asecwt).sum()
    target_pop = target_persons.asecwt.sum()
    
    # Calculate percent better off
    target_persons['better_off'] = (target_persons.new_spm_resources &amp;gt; 
                                target_persons.spmtotres)
    total_better_off = (
        target_persons.better_off * target_persons.asecwt).sum()
    percent = total_better_off / target_pop * 100

    return pd.Series([
        mdf.weighted_median(target_persons, 'new_resources_per_person',
                            'asecwt').round(0), 
        mdf.weighted_mean(target_persons, 'new_resources_per_person',
                          'asecwt').round(0), 
        (total_poor / target_pop * 100).round(1), percent])

def ubi_row(row):  
    &quot;&quot;&quot; Runs the ubi_pov function across the rows of a DataFrame.
  
    Args:
        row: the row of the DataFrame containing a person's race and the
            monthly UBI amount
  
    Returns:
        pd.Series with the following elements:
        - The poverty rate for the selected row.
        - The median resources per person for the selected row.
        - The mean resources per person for the selected row.
        - The percent of people better off under the program for the selected
            row.
    &quot;&quot;&quot;  
    return ubi(row.race, row.monthly_ubi)

# Create a DataFrame that has each the each monthly UBI amount for each race
# input.
summary = mdf.cartesian_product({'monthly_ubi': np.arange(0, 1001, 50),
                       'race': ['native', 'non_native']})

# Calculate the poverty rate for each row of the summary DataFrame.
summary[['med_resources_per_person', 'mean_resources_per_person',
         'poverty_rate', 'better_off']] = summary.apply(ubi_row, axis=1)

# Format text.
center = {&quot;med_resources_per_person&quot;: &quot;Median resources&quot;,
          &quot;mean_resources_per_person&quot;: &quot;Mean resources&quot;}
race = {&quot;native&quot;: &quot;Indigenous&quot;,
        &quot;non_native&quot;: &quot;Non-Indigenous&quot;}

summary[&quot;race&quot;] =  summary.race.map(race)

COLOR_MAP = {'Indigenous': '#1976D2',  # Blue.
             'Non-Indigenous': '#BDBDBD'  # Gray.
            }


def line_graph(df, x, y, color, title, xaxis_title, yaxis_title):
    &quot;&quot;&quot;Style for line graphs.
    
    Args:
        df: DataFrame with data to be plotted.
        x: The string representing the column in df that holds the new
            spending in billions.
        y: The string representing the column in df that holds the poverty
            rate.
        color: The string representing the UBI type.
        xaxis_title: The string represnting the xaxis-title.
        yaxis_title: The string representing the yaxis-title.
    
    Returns:
        Nothing. Shows the plot.
    &quot;&quot;&quot;
    fig = px.line(df, x=x, y=y, color=color, color_discrete_map=COLOR_MAP)
    fig.update_layout(
        title=title,
        xaxis_title=xaxis_title,
        yaxis_title=yaxis_title,
        yaxis_ticksuffix='%',
        font=dict(family='Roboto'),
        hovermode='x', 
        xaxis_tickprefix='$',
        xaxis_ticksuffix='',
        plot_bgcolor='white',
        legend_title_text=''   
    )
    fig.update_traces(mode='markers+lines', hovertemplate=None)

    return fig

fig = line_graph(df=summary, x='monthly_ubi', 
           y='poverty_rate', color='race',
           title='The impact of a UBI on Indigenous and Non-Indigenous poverty',
           xaxis_title='Monthly UBI',
           yaxis_title='SPM poverty rate')
fig.show()
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f2() {
  var x = document.getElementById(&quot;asset_code_2&quot;);
  var b = document.getElementById(&quot;button2&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset2&quot;).load(&quot;/assets/markdown_assets/indigenous/2020-10-12-indigenous-asset-2.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset2&quot;&gt;&lt;/div&gt;

&lt;p&gt;A UBI funded by a flat tax would not just benefit those currently living in poverty; our simulation finds that 83 percent of Indigenous Americans would be better off under the program, regardless of the amount.&lt;/p&gt;

&lt;p&gt;Further, a UBI could reduce both the median and mean income gaps between Indigenous and non-Indigenous Americans.  A $500 per month UBI shrinks the gap in both median and mean resources by about a third.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button3&quot; onclick=&quot;f3()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_3&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# Add commas
def comma(num):
    return num.astype(int).apply(&quot;{:,}&quot;.format)

summary[&quot;med_resources_per_person&quot;] = comma(summary.med_resources_per_person)
summary[&quot;mean_resources_per_person&quot;] = comma(summary.mean_resources_per_person)

# Create identifier columns
summary_long = pd.melt(summary,
                       id_vars=[&quot;monthly_ubi&quot;, &quot;race&quot;],
                       value_vars=['med_resources_per_person',
                                   'mean_resources_per_person'],
                       var_name=&quot;resource&quot;,
                       value_name=&quot;y&quot;)

summary_long[&quot;resource&quot;] = summary_long.resource.map(center)

# Plot
fig = px.bar(summary_long,
             x='resource',
             y=&quot;y&quot;,
             color=&quot;race&quot;,
             barmode='group',
             animation_frame='monthly_ubi',
             text='y',
             labels={&quot;race&quot;: &quot;Race&quot;,
                     &quot;monthly_ubi&quot;: &quot;Monthly UBI&quot;,
                     &quot;y&quot;: &quot;Resources per person&quot;,
                     &quot;resource&quot;: &quot;Metric&quot;
                    },
             color_discrete_map=COLOR_MAP,
             title=&quot;Tax-funded UBI and median/mean resources per person&quot;,
             range_y=[0, 32_000]
    )
fig.update_traces(texttemplate='$%{text}')
fig.update_layout(xaxis_title='',
                  yaxis_tickprefix='$',
                  uniformtext_minsize=9,
                  plot_bgcolor='white',
                  font=dict(family='Roboto'),
                  legend_title_text='')
fig.show(config={'displayModeBar': False})
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f3() {
  var x = document.getElementById(&quot;asset_code_3&quot;);
  var b = document.getElementById(&quot;button3&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset3&quot;).load(&quot;/assets/markdown_assets/indigenous/2020-10-12-indigenous-asset-3.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset3&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Disparities between Indigenous and non-Indigenous Americans are not limited to income: inequities persist in &lt;a href=&quot;https://education.wsu.edu/documents/2015/08/native-american-achievement-gap-report.pdf/&quot;&gt;education&lt;/a&gt;, &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2567901/&quot;&gt;health outcomes&lt;/a&gt;, &lt;a href=&quot;https://www.bjs.gov/content/pub/pdf/aic.pdf&quot;&gt;incarceration rates&lt;/a&gt;, and &lt;a href=&quot;http://ssrc-static.s3.amazonaws.com/wp-content/uploads/2015/04/Geographies-of-Opportunity-4.22.2015.pdf&quot;&gt;life expectancy&lt;/a&gt;.  However, evidence suggests that cash transfers could help close these gaps as well.  One &lt;a href=&quot;https://www.aeaweb.org/articles?id=10.1257/app.2.1.86&quot;&gt;study&lt;/a&gt; followed a group of Cherokee Indian families that received unconditional cash transfers of approximately $4,000 annually as part of a profit sharing agreement from a local casino. When recipients of the dividend were compared to residents nearby that did not receive it, researchers found that an additional $4,000 per year for the poorest households increased educational attainment of children by one year by age 21, and reduced the chance of committing a minor crime by 22 percent for 16 and 17 year olds.  They also documented a decline in teenage pregnancy and substance abuse.  Other studies found cash transfers reduce &lt;a href=&quot;https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3380033&quot;&gt;child obesity&lt;/a&gt;, improve &lt;a href=&quot;http://eprints.lse.ac.uk/58059/1/__lse.ac.uk_storage_LIBRARY_Secondary_libfile_shared_repository_Content_STICERD_PEP%20discussion%20papers_pep01.pdf&quot;&gt;health outcomes&lt;/a&gt;, and increase &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5510957/&quot;&gt;life expectancy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In short, UBI is a policy tool that has already been successfully trialed in Indigenous communities, and which has the potential to radically change the life of the average Indigenous American for the better.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Nate Golden</name>
        
        
      </author>

      

      
        <category term="us" />
      
        <category term="indigenous americans" />
      

      
        <summary type="html">Policies of at least $250 per month would close the Indigenous/non-Indigenous poverty gap.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">One in five Americans with disabilities is in poverty. Even small basic incomes would help.</title>
      <link href="/ada30" rel="alternate" type="text/html" title="One in five Americans with disabilities is in poverty. Even small basic incomes would help." />
      <published>2020-07-31T00:00:00+00:00</published>
      <updated>2020-07-31T00:00:00+00:00</updated>
      <id>/ada30</id>
      <content type="html" xml:base="/ada30">&lt;head&gt;
  &lt;script src=&quot;https://cdn.plot.ly/plotly-latest.min.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;p&gt;As the Americans with Disabilities Act reaches its 30th anniversary, we wanted to look beyond the workplace to poverty, safety net programs, and basic income. Today, more than 1 in 5 Americans with disabilities live below the poverty threshold, nearly twice the rate of Americans without disabilities.&lt;/p&gt;

&lt;p&gt;While America provides some income support to its citizens with disabilities through Supplemental Security Income (SSI) and Social Security Disability Insurance (SSDI), these programs inevitably leave many out.  Today, 22% of households with people with disabilities do not receive any federal government assistance.  Further, just 14% of households of families where someone is disabled collected SSI, a program “designed to help aged, blind, and &lt;a href=&quot;https://www.ssa.gov/ssi/&quot;&gt;disabled people&lt;/a&gt;, who have little or no income.”  Unemployment insurance was the only program in our analysis that was more likely to go to families without people with disabilities&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button1&quot; onclick=&quot;f1()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_1&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
### LOAD PACKAGES ####

import pandas as pd
import plotly.express as px
import microdf as mdf
import numpy as np

### COLORS ###

# Colors from https://material.io/design/color/the-color-system.html
BLUE = '#1976D2'
DARK_BLUE = '#0D47A1'
BARELY_BLUE = '#E3F2FD'
GRAY = '#BDBDBD'


### LOAD DATA ###

person_raw = pd.read_csv('https://github.com/MaxGhenis/datarepo/raw/master/pppub19.csv.gz',
                         usecols=['MARSUPWT', 'SPM_ID', 'SPM_RESOURCES',
                                  'SPM_POVTHRESHOLD', 'A_AGE', 'PEDISDRS',
                                  'PEDISEAR', 'PEDISEYE', 'PEDISOUT',
                                  'PEDISPHY', 'PEDISREM', 'SPM_NUMPER',
                                  'SS_VAL', 'SSI_VAL', 'SPM_SNAPSUB',
                                  'PAW_TYP', 'SPM_CAPHOUSESUB', 'UC_VAL'])

### PREPROCESS ###

person = person_raw.copy(deep = True)
person.columns = person.columns.str.lower()
person['weight'] = person.marsupwt / 100
# Create a new dataframe that only includes adults.
adults = person[person['a_age'] &amp;gt; 17].copy(deep=True)

# Create a column that shows if people have any disabilities.
adults['any_disability'] = ((adults.pedisdrs == 1) | 
                            (adults.pedisear == 1) | 
                            (adults.pediseye == 1) |
                            (adults.pedisout == 1) | 
                            (adults.pedisphy == 1) |
                            (adults.pedisrem == 1))

# Map the ASEC codes to disability types.
PWD_MAP = ({'pedisdrs': 'Self-care',
            'pedisear': 'Hearing',
            'pediseye': 'Vision',
            'pedisout': 'Mobility',
            'pedisphy': 'Physical',
            'pedisrem': 'Cognitive',
            'any_disability': 'Any'
           })

# group individual questions by spm group
adults['got_tanf'] = np.where(adults.paw_typ == 1, 1, 0)
PERSON_SPM_COLS = ['ss_val', 'ssi_val', 'uc_val', 'got_tanf']
groups = adults.groupby('spm_id')[PERSON_SPM_COLS].sum()
groups.columns = ['spm_' + i for i in PERSON_SPM_COLS]
adults2 = adults.merge(groups, left_on='spm_id', right_index=True)
# Also look into OI_OFF column: Value 3 = AFDC

# All PWD records.
adults_pwd = adults2[adults2.any_disability]

# Note these columns don't represent anything consistent
# except that &amp;gt;0 values indicate that the SPM unit received it.

# create a columns map
BEN_MAP = ({'spm_ss_val': 'Social Security', 
            'spm_ssi_val': 'Supplemental Security Income',
            'spm_got_tanf': 'TANF',
            'spm_uc_val': 'Unemployment',
            'spm_snapsub': 'SNAP',
            'spm_caphousesub': 'Housing Assistance',
            'spm_any_ben': 'Any'
            })

# Sum up all columns except the last (which is any, itself).
adults2['spm_any_ben'] = adults2[list(BEN_MAP.keys())[:-1]].sum(axis=1)


# Create a function that calculates percent of people with disabilities
# receiving each benefit.
def percent_bens(ben_column, has_disability):
    target_adults = adults2[adults2.any_disability == has_disability]
    total_w_ben = ((target_adults[ben_column] &amp;gt; 0) * target_adults.weight)
    return ((total_w_ben.sum() / target_adults.weight.sum()) * 100).round(1)

def percent_bens_row(row):
    return percent_bens(row.ben_column, row.has_disability)

benefits = mdf.cartesian_product({'ben_column': BEN_MAP.keys(),
                                  'has_disability': [True, False]
                                  })

benefits['percentage'] = benefits.apply(percent_bens_row, axis=1)
benefits['benefit'] = benefits.ben_column.map(BEN_MAP)
benefits = (benefits.sort_values(['percentage','benefit'],
                               ascending=(True, True)))
benefits['disability_text'] = np.where(benefits.has_disability,
                                       'Has disability', 'No disability')

fig = px.bar(benefits, x='percentage', y='benefit', color='disability_text',
             labels={'percentage': 'Percent receiving benefit',
                      'benefit': 'Benefit'},
             title='Share of Americans in families receiving benefits',
             text='percentage',
             orientation='h',
             barmode='group',
             color_discrete_map={'Has disability': BLUE, 'No disability': GRAY}
)

fig.update_layout(barmode='group',
                  font=dict(family='Roboto'),
                  plot_bgcolor='white',
                  yaxis_title='',
                  legend_title='',
                  xaxis_ticksuffix='%',
                  legend={'traceorder': 'reversed'}
                 )

fig.update_traces(texttemplate='%{text}%')

fig.show(config={'displayModeBar': False})
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f1() {
  var x = document.getElementById(&quot;asset_code_1&quot;);
  var b = document.getElementById(&quot;button1&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset1&quot;).load(&quot;/assets/markdown_assets/ada30/2020-07-31-ada30-asset-1.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset1&quot;&gt;&lt;/div&gt;

&lt;p&gt;Universal payments would ensure that all households receive government assistance.  The remainder of this paper examines how universal payments can alleviate poverty for Americans with disabilities.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;p&gt;To conduct this analysis, we used the most recent Current Population Survey March Supplement, which reflects 2018 income.  Using this data, we simulated how various UBI levels impact the poverty rate of Americans with a variety of disabilities. For reference, the chart below shows the amount of Americans identifying with each type of disability.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button2&quot; onclick=&quot;f2()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_2&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# data for bar graph that shows amount of people with each disability

total_cognitive_m = (adults.weight * (adults.pedisrem==1)).sum()/1e6
total_mobility_m = (adults.weight * (adults.pedisout==1)).sum()/1e6
total_self_care_m = (adults.weight * (adults.pedisdrs==1)).sum()/1e6
total_physical_m = (adults.weight * (adults.pedisphy==1)).sum()/1e6 
total_vision_m = (adults.weight * (adults.pediseye==1)).sum()/1e6
total_hearing_m = (adults.weight* (adults.pedisear==1)).sum()/1e6
total_pwd_m = (adults.weight * adults.any_disability).sum()/1e6
total_pwd = (adults.weight * adults.any_disability).sum()

total_dict = {'disability_type': ['Cognitive', 'Mobility', 'Self-care', 'Physical',
                       'Vision', 'Hearing', 'Any'],
              'total_millions': [total_cognitive_m, total_mobility_m, total_self_care_m, 
                        total_physical_m, total_vision_m, total_hearing_m,
                        total_pwd_m] 
}

total_df = pd.DataFrame(total_dict)
total_df = total_df.round(1)
total_df = (total_df.sort_values(['total_millions','disability_type'],
                               ascending=(False, True)))

fig = px.bar(total_df, x = 'total_millions', y='disability_type',
             title='Number of adults reporting each disability type',
             color='disability_type',
             text='total_millions',
             orientation = 'h',
             color_discrete_map={'Cognitive': BLUE,
                                 'Mobility': BLUE,
                                 'Self-care': BLUE,
                                 'Physical': BLUE,
                                 'Vision': BLUE,
                                 'Hearing': BLUE,
                                 'Any': DARK_BLUE})

fig.update_layout(showlegend=False,
                  xaxis_ticksuffix='M',
                  font=dict(family='Roboto'),
                  plot_bgcolor='white',
                  xaxis_title='',
                  yaxis_title=''
                 )
fig.update_traces(texttemplate='%{text}M')

fig.show(config={'displayModeBar': False})
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f2() {
  var x = document.getElementById(&quot;asset_code_2&quot;);
  var b = document.getElementById(&quot;button2&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset2&quot;).load(&quot;/assets/markdown_assets/ada30/2020-07-31-ada30-asset-2.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset2&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;findings&quot;&gt;Findings&lt;/h2&gt;
&lt;p&gt;We found that  a UBI has the potential to drastically reduce poverty among adults with disabilities and that a $300 monthly UBI would cut the poverty rate in half, from 20.7 percent to 9.2 percent.  A UBI of $1,000 per month, such as in &lt;a href=&quot;https://www.ubicenter.org/plans&quot;&gt;Andrew Yang’s Freedom Dividend&lt;/a&gt;, would shrink the poverty rate among people with disabilities to 1.3 percent.&lt;/p&gt;

&lt;p&gt;With the status quo, poverty rates are highest among people with cognitive, physical, and self-care disabilities, which all exceed 24 percent.  A UBI of $500 per month would slash all these rates below 7 percent, a third of their current level.&lt;/p&gt;

&lt;p&gt;The interactive chart below shows the poverty rate for each group with various monthly UBI levels up to $1,000 at $100 intervals.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button3&quot; onclick=&quot;f3()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_3&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
# Determine the poverty rate impact for Americans with disabilities of a UBI from $0 per month to $1000 per month

def pwd_pov(type_of_disability, monthly_ubi=0):
    target_persons = adults[adults[type_of_disability]==1].copy(deep=True)
    target_persons['total_ubi'] = person.spm_numper * monthly_ubi * 12
    target_persons['new_spm_resources'] = (target_persons.total_ubi
                                           + target_persons.spm_resources)
    target_persons['poor'] = (target_persons.new_spm_resources 
                              &amp;lt; target_persons.spm_povthreshold)
    population_target = target_persons.weight.sum()
    total_target_poor = (target_persons.poor * target_persons.weight).sum()
    total_pov_rate = total_target_poor / population_target

    return (total_pov_rate * 100).round(1)

def pwd_pov_row(row):
    return pwd_pov(row.type_of_disability, row.monthly_ubi)

# Create a dataframe that summarizes the outputs of the function

summary = mdf.cartesian_product({'type_of_disability':PWD_MAP,
                       'monthly_ubi': np.arange(0,1001,100)})

summary['poverty_rate'] = summary.apply(pwd_pov_row, axis=1)
summary['disability_type'] = summary.type_of_disability.map(PWD_MAP)
summary = (summary.sort_values(['poverty_rate','disability_type'],
                               ascending=(False, True)))

# Add new rows for the difference between original and current (w/UBI) pov.
original_pov = summary[summary.monthly_ubi == 0].copy(deep=True)
original_pov.drop(['monthly_ubi', 'disability_type'], axis=1, inplace=True)
original_pov.rename(columns = {'poverty_rate': 'original_poverty_rate'},
                    inplace=True)
summary = summary.merge(original_pov, on='type_of_disability')

# Calculate the difference
summary['poverty_delta'] = (summary.original_poverty_rate -
                            summary.poverty_rate).round(1)

SUM_MAP = ({'poverty_rate': 'People in poverty',
            'poverty_delta': 'People no longer in poverty'})

summary_long = summary.melt(id_vars=['disability_type', 'monthly_ubi',
                                     'original_poverty_rate'],
                            value_vars=['poverty_rate', 'poverty_delta'])
summary_long['poverty_in_out'] = summary_long.variable.map(SUM_MAP)
summary_long.sort_values(['original_poverty_rate', 'monthly_ubi'],
                         ascending=[True, True], inplace=True)

fig = px.bar(summary_long, x='value', y='disability_type',
             color='poverty_in_out',
             animation_frame='monthly_ubi', range_x=[0,25],
             labels={&quot;value&quot;: &quot;SPM poverty rate&quot;,
                     &quot;disability_type&quot;: &quot;Disability type&quot;,
                     &quot;monthly_ubi&quot;: &quot;Monthly UBI&quot;
                    },
             title='Effect of UBI on poverty among adults with disabilities',
             orientation='h',
             color_discrete_map={'People in poverty': BLUE,
                                 'People no longer in poverty': BARELY_BLUE
                                }
             )

fig.update_layout(xaxis_ticksuffix='%',
                  plot_bgcolor='white',
                  font=dict(family='Roboto'),
                  legend_title_text=''
                 )

fig.show(config={'displayModeBar': False})
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f3() {
  var x = document.getElementById(&quot;asset_code_3&quot;);
  var b = document.getElementById(&quot;button3&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset3&quot;).load(&quot;/assets/markdown_assets/ada30/2020-07-31-ada30-asset-3.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset3&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This research fits a growing trend, that stripping benefits of their bureaucracy, and making payments truly universal, is often the simplest way to reach target groups.  Programs that impose administrative burdens will continue to miss many Americans with disabilities, while a UBI will not.  Still, it is important to acknowledge that cash transfers alone are not sufficient in protecting the rights of Americans with disabilities and that  we should follow disability rights advocates in the fight for equal access to healthcare, transportation, independent living, and more workplace portections.   But reducing poverty among people with disabilities is a worthy goal of its own, and our analysis shows that a UBI would be a powerful tool in accomplishing that aim.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>[&quot;nate&quot;, &quot;max&quot;]</name>
        
        
      </author>

      

      
        <category term="us" />
      
        <category term="disability" />
      
        <category term="poverty" />
      

      
        <summary type="html">$300 per month would cut the rate to one in ten.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">To minimize poverty, should UBI be provided for adults, children, or both?</title>
      <link href="/adult-child-ubi" rel="alternate" type="text/html" title="To minimize poverty, should UBI be provided for adults, children, or both?" />
      <published>2020-07-07T00:00:00+00:00</published>
      <updated>2020-07-07T00:00:00+00:00</updated>
      <id>/adult-child-ubi</id>
      <content type="html" xml:base="/adult-child-ubi">&lt;head&gt;
  &lt;script src=&quot;https://cdn.plot.ly/plotly-latest.min.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;p&gt;While &lt;a href=&quot;https://fred.stlouisfed.org/series/A939RX0Q048SBEA&quot;&gt;US GDP per capita has more than doubled in the past 50 years&lt;/a&gt;, many Americans still remain in poverty. According to the Census Bureau’s 2018 Supplemental Poverty Measure (SPM), over 40 million Americans live below their SPM poverty threshold.&lt;/p&gt;

&lt;p&gt;Some &lt;a href=&quot;https://www.ubicenter.org/plans&quot;&gt;large guaranteed-income programs have been shown to nearly eliminate poverty&lt;/a&gt;, but spending constraints can change how program design affects different outcomes. This paper shows the impact of new universal cash programs on poverty alleviation under varying levels of spending.&lt;/p&gt;

&lt;p&gt;I examine the poverty rate impacts of three different basic income programs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Adult UBI - provides monthly stipends only to adults.&lt;/li&gt;
  &lt;li&gt;Child Allowance - provides families monthly stipends based only on how many children are in their household.&lt;/li&gt;
  &lt;li&gt;All UBI - provides an equal monthly stipend to all Americans regardless of age (parents would receive it on behalf of their children).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Two years ago, Matt Bruenig produced a similar  &lt;a href=&quot;https://www.peoplespolicyproject.org/2018/11/29/a-child-allowance-would-be-very-effective-at-poverty-reduction/&quot;&gt;paper&lt;/a&gt; using 2017 data in which he compared the same three programs and their impact on the poverty rate up to $500 billion in new spending. Bruenig found that at all levels of spending up to $500 billion, a Child Allowance was the most effective program at reducing poverty. This paper considers new spending up to $1 trillion with updated data from 2018.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I used data from the Census Bureau’s 2019 Annual Social and Economic Supplement (ASEC), which uses data collected in 2018. The ASEC survey contains over 180,000 Americans from more than 75,000 households. Each respondent is assigned a sample weight by the Census Bureau so that models can provide consistent national-level estimates.&lt;/p&gt;

&lt;p&gt;The Supplemental Poverty Measure classifies respondents’ poverty status by comparing their total family income (post tax and transfers) to their family poverty threshold. The Census Bureau defines poverty thresholds based on family size and costs of necessities.&lt;/p&gt;

&lt;p&gt;In 2018, 12.7 percent of Americans were in poverty, including 13.6 percent of children and 12.5 percent of adults.&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;p&gt;A Child Allowance reduces overall poverty more than the other two designs, for spending up to $500 billion; this aligns with Bruenig’s results. However, at levels beyond $500 billion, a UBI that includes everyone cuts overall poverty more.&lt;/p&gt;

&lt;p&gt;Spending $100 billion on a Child Allowance would equate to monthly stipends of $114 per child and lift 4.5 million Americans (1.3 million children and 3.2 million adults) out of poverty. $500 billion on either a Child Allowance or All UBI would lift 12 million Americans out of poverty. Spending $1 trillion on an All UBI would equate to monthly checks of $258 per American and lift over 22 million people out of poverty.&lt;/p&gt;

&lt;p&gt;The interactive graph below shows the poverty impacts of each program at different funding levels.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button1&quot; onclick=&quot;f1()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_1&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
### LOAD PACKAGES ####

import pandas as pd
import numpy as np
import plotly.express as px
import plotly

### LOAD DATA ###

person_raw = pd.read_csv('https://github.com/MaxGhenis/datarepo/raw/master/pppub19.csv.gz',
                         usecols=['MARSUPWT', 'SPM_ID', 'SPM_POVTHRESHOLD',
                                  'SPM_RESOURCES', 'A_AGE'])

### PREPROCESS ###

person = person_raw.copy(deep=True)
person.columns = person.columns.str.lower()
person['weight'] = person.marsupwt/100
#Compute total children and adults in each resource sharing group.
person['child'] = person.a_age &amp;lt; 18
person['adult'] = person.a_age &amp;gt;= 18
spmu_ages = person.groupby('spm_id')[['child','adult']].sum()
spmu_ages.columns = ['children', 'total_adults']
person2 = person.merge(spmu_ages,left_on='spm_id', right_index=True)
total_children = (person2.child * person2.weight).sum()
total_adults = (person2.adult * person2.weight).sum()

### CALCULATIONS ###

child_allowance_overall = []
child_allowance_child = []
child_allowance_adults = []

# Determine the poverty rate impact of a Child Allownace from $0 in new spending to $1 trillion.

for spending in range(0, 1000000000001, 50000000000):
    child_allowance_per_child = spending/total_children
    total_child_allowance = person2.children * child_allowance_per_child
    new_spm_resources_ca = person2.spm_resources + total_child_allowance
    new_poor_ca = new_spm_resources_ca &amp;lt; person2.spm_povthreshold
    new_total_child_poor = ((person2.child * person2.weight * 
                             new_poor_ca).sum())
    new_child_poverty_rate = ((new_total_child_poor)/
                              (person2.child * person2.weight).sum())
    new_total_adult_poor = ((person2.adult * person2.weight * 
                             new_poor_ca).sum())
    new_adult_poverty_rate = ((new_total_adult_poor)/
                              (person2.adult * person2.weight).sum())
    new_total_poor_ca = (new_poor_ca * person2.weight).sum()
    new_poverty_rate_ca = new_total_poor_ca/person2.weight.sum()
    child_allowance_overall.append(new_poverty_rate_ca)
    child_allowance_child.append(new_child_poverty_rate)
    child_allowance_adults.append(new_adult_poverty_rate)
    
ubi_adults_overall = []
ubi_adults_child = []
ubi_adults_adults = []

# Determine the poverty rate impact of a Adult UBI from $0 in new spending to $1 trillion.

for spending in range(0, 1000000000001, 50000000000):
    adult_ubi = spending/total_adults
    total_adult_ubi = person2.total_adults * adult_ubi
    new_spm_resources_ubi = person2.spm_resources + total_adult_ubi
    new_poor_ubi = new_spm_resources_ubi &amp;lt; person2.spm_povthreshold
    new_total_child_poor = ((person2.child * person2.weight * 
                             new_poor_ubi).sum())
    new_child_poverty_rate = ((new_total_child_poor)/
                              (person2.child * person2.weight).sum())
    new_total_adult_poor = ((person2.adult * person2.weight * 
                             new_poor_ubi).sum())
    new_adult_poverty_rate = ((new_total_adult_poor)/
                              (person2.adult * person2.weight).sum())
    new_total_poor_ubi = (new_poor_ubi * person2.weight).sum()
    new_poverty_rate_ubi = new_total_poor_ubi/person2.weight.sum()
    ubi_adults_overall.append(new_poverty_rate_ubi)
    ubi_adults_child.append(new_child_poverty_rate)
    ubi_adults_adults.append(new_adult_poverty_rate)
    
ubi_all_overall = []
ubi_all_child = []
ubi_all_adults = []

# Determine the poverty rate impact of a All UBI from $0 in new spending to $1 trillion.

for spending in range(0, 1000000000001, 50000000000):
    all_ubi_per_person = spending/(total_adults + total_children)
    total_all_ubi = ((person2.children * all_ubi_per_person) + 
                    (person2.total_adults * all_ubi_per_person))
    new_spm_resources_all_ubi = person2.spm_resources + total_all_ubi
    new_poor_all_ubi = new_spm_resources_all_ubi &amp;lt; person2.spm_povthreshold
    new_total_child_poor = ((person2.child * person2.weight * 
                             new_poor_all_ubi).sum())
    new_child_poverty_rate = ((new_total_child_poor)/
                              (person2.child * person2.weight).sum())
    new_total_adult_poor = ((person2.adult * person2.weight * 
                             new_poor_all_ubi).sum())
    new_adult_poverty_rate = ((new_total_adult_poor)/
                              (person2.adult * person2.weight).sum())
    new_total_poor_all_ubi = (new_poor_all_ubi * person2.weight).sum()
    new_poverty_rate_all_ubi = new_total_poor_all_ubi/person2.weight.sum()
    ubi_all_overall.append(new_poverty_rate_all_ubi)
    ubi_all_child.append(new_child_poverty_rate)
    ubi_all_adults.append(new_adult_poverty_rate)
    
spending_data = []
for spending in range(0, 1001, 50):
    spending = spending/100
    spending_data.append(spending)
    
### ANALYSIS ###

# Create a DataFrame grouped by each plans impact on the overall poverty rate. 
overall = {'spending_in_billions': spending_data,
                       'child_allowance': child_allowance_overall,
                       'adult_ubi': ubi_adults_overall,
                       'all_ubi': ubi_all_overall}
                    
overall_df = pd.DataFrame(overall)
overall_df = pd.DataFrame(overall_df).round(3)

# Create a DataFrame grouped by each plans impact on the child poverty rate.
child = {'spending_in_billions': spending_data,
         'child_allowance': child_allowance_child,
         'adult_ubi': ubi_adults_child,
         'all_ubi': ubi_all_child}
                    
child_df = pd.DataFrame(child)
child_df = pd.DataFrame(child_df).round(3)


# Create a DataFrame grouped by each plans impact on the adult poverty rate.
adult = {'spending_in_billions': spending_data,
         'child_allowance': child_allowance_adults,
         'adult_ubi': ubi_adults_adults,
         'all_ubi': ubi_all_adults}
                    
adult_df = pd.DataFrame(adult)
adult_df = pd.DataFrame(adult_df).round(3)


# Join different programs together for plotly.
program = (pd.melt(overall_df, 'spending_in_billions', 
                   var_name='ubi_type',value_name='poverty_rate'))

def melt_dict(d):
  &quot;&quot;&quot; produce long version of data frame represented by dictionary (d).
  
  Arguments
  d: Dictionary where each element represents a differnt UBI type and spending levels and the poverty impacts.
  
  Returns
  DataFrame where every row is the combination of UBI type and spending level.
  &quot;&quot;&quot;
  df = pd.DataFrame(d).round(3) * 100
  program = pd.melt(df, 'spending_in_billions', var_name='ubi_type',value_name='poverty_rate')
  program['ubi_type'] = program.ubi_type.map({'child_allowance': 'Child allowance',
                                      'adult_ubi': 'Adult UBI',
                                      'all_ubi': 'All UBI'})
  return program

program_overall = melt_dict(overall)
program_child = melt_dict(child)
program_adult = melt_dict(adult)

def line_graph(df, x, y, color, title, xaxis_title, yaxis_title):
    &quot;&quot;&quot;Style for line graphs.
    
    Arguments
    df: DataFrame with data to be plotted.
    x: The string representing the column in df that holds the new spending in billions.
    y: The string representing the column in df that holds the poverty rate.
    color: The string representing the UBI type.
    xaxis_title: The string represnting the xaxis-title.
    yaxis_title: The string representing the yaxis-title.
    
    Returns
    Nothing. Shows the plot.
    &quot;&quot;&quot;
    fig = px.line(df, x=x, y=y, color=color)
    fig.update_layout(
        title=title,
        xaxis_title=xaxis_title,
        yaxis_title=yaxis_title,
        yaxis_ticksuffix='%',
        font=dict(family='Roboto'),
        hovermode='x',
        xaxis_tickprefix='$',
        xaxis_ticksuffix='B',
        plot_bgcolor='white',
        legend_title_text=''
        
    )

    fig.update_traces(mode='markers+lines', hovertemplate=None)

    return fig

fig = line_graph(df=program_overall, x='spending_in_billions', 
           y='poverty_rate', color='ubi_type',
           title='Overall poverty rate and spending on cash transfer programs',
           xaxis_title='Spending in billions',
           yaxis_title='SPM poverty rate')

fig.show()
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f1() {
  var x = document.getElementById(&quot;asset_code_1&quot;);
  var b = document.getElementById(&quot;button1&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset1&quot;).load(&quot;/assets/markdown_assets/adult_child_ubi/2020-07-07-adult-child-ubi-asset-1.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset1&quot;&gt;&lt;/div&gt;

&lt;p&gt;Unsurprisingly, a Child Allowance was the most effective program at reducing child poverty at all levels of spending. Spending $400 billion on a Child Allowance cuts child poverty by over two-thirds, from 13.6 percent to 4.3 percent.&lt;/p&gt;

&lt;p&gt;Comparatively, spending $1 trillion on an Adult UBI leaves 7 percent of children still in poverty. For an All UBI and a Child Allowance under the same spending, 4 percent and 1 percent of children would remain in poverty, respectively.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button2&quot; onclick=&quot;f2()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_2&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
fig = line_graph(df=program_child, x='spending_in_billions', 
           y='poverty_rate', color='ubi_type',
           title='Child poverty rate and spending on cash transfer programs',
           xaxis_title='Spending in billions',
           yaxis_title='SPM poverty rate among people aged 17 and under')
fig.show()
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f2() {
  var x = document.getElementById(&quot;asset_code_2&quot;);
  var b = document.getElementById(&quot;button2&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset2&quot;).load(&quot;/assets/markdown_assets/adult_child_ubi/2020-07-07-adult-child-ubi-asset-2.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset2&quot;&gt;&lt;/div&gt;

&lt;p&gt;An Adult UBI and an All UBI have nearly identical effects on the adult poverty rate. A Child Allowance has a smaller impact on adult poverty because the benefits only go to adults with children in their family.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;code-button&quot; id=&quot;button3&quot; onclick=&quot;f3()&quot;&gt;▶ Click to show code&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;code-cell&quot; id=&quot;asset_code_3&quot; style=&quot;display: none;&quot;&gt;
  &lt;pre&gt;
    &lt;code&gt;
fig = line_graph(df=program_adult, x='spending_in_billions', 
           y='poverty_rate', color='ubi_type',
           title='Adult poverty rate and spending on cash transfer programs',
           xaxis_title='Spending in billions',
           yaxis_title='SPM poverty rate among people aged 18 and over')
fig.show()
    &lt;/code&gt;
  &lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
function f3() {
  var x = document.getElementById(&quot;asset_code_3&quot;);
  var b = document.getElementById(&quot;button3&quot;);
  if (x.style.display === &quot;none&quot;) {
    x.style.display = &quot;block&quot;;
    b.innerHTML = &quot;&amp;#9660 Click to hide code&quot;;
  } else {
    x.style.display = &quot;none&quot;;
    b.innerHTML = &quot;&amp;#9654 Click to show code&quot;;
  }
}
&lt;/script&gt;

&lt;div&gt;
  &lt;script&gt;
    $(document).ready(function(){
      $(&quot;#asset3&quot;).load(&quot;/assets/markdown_assets/adult_child_ubi/2020-07-07-adult-child-ubi-asset-3.html&quot;);
    });
  &lt;/script&gt;
&lt;/div&gt;
&lt;div id=&quot;asset3&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This analysis finds that (a) including children in basic income plans enhances their anti-poverty effects and (b) optimal policy depends on spending levels.&lt;/p&gt;

&lt;p&gt;Given limited political support for added spending, a Child Allowance alleviates poverty most effectively. If the political appetite for anti-poverty spending is more substantial, we should aim to provide a truly universal UBI and provide cash transfers to everyone.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Nate Golden</name>
        
        
      </author>

      

      
        <category term="us" />
      
        <category term="child allowance" />
      
        <category term="poverty" />
      

      
        <summary type="html">UBI relieves poverty more when it includes children.</summary>
      

      
      
    </entry>
  
</feed>
